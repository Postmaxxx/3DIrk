{"version":3,"file":"static/js/855.66b73910.chunk.js","mappings":"6QAeA,MA8BA,GAAeA,EAAAA,EAAAA,KATUC,IAAiB,CACtCC,KAAMD,EAAMC,KACZC,KAAMF,EAAMG,KAAKD,QAOrB,EA9B4CE,IAAgC,IAA/B,KAACF,EAAI,KAAED,GAAKG,EAErD,MAAMC,EAAcJ,EAAKK,MAAMC,QAAO,CAACC,EAAOC,IAASD,EAAQC,EAAKC,QAAQ,GAC5E,OACIC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACiC,YAA5BZ,EAAKa,YAAYC,QACdJ,EAAAA,EAAAA,KAAA,OAAKK,UAAU,gBAAeH,UAC1BF,EAAAA,EAAAA,KAAA,QAAAE,SAAOR,EAAc,EAAK,IAAGA,IAAgB,SAGjD,MAEL,I,cCdX,MAAMY,EAAkB,CAACC,cAAa,KAAEC,eAAc,KAAEC,aAAY,KAAEC,cAAc,MAC9EC,EAAoB,CAAEC,WAAW,MAkBjCC,EAAY,CACd,CACIC,KAAM,CACFC,GAAI,6CACJC,GAAI,QAERC,KAAM,IACNC,GAAI,aAER,CACIJ,KAAM,CACFC,GAAI,yDACJC,GAAI,aAERC,KAAM,UACNC,GAAI,cAEJC,QAAU,CACN,CACIL,KAAM,CACFC,GAAI,sEACJC,GAAI,SAERC,KAAM,UACNC,GAAI,SAGR,CACIJ,KAAM,CACFC,GAAI,yDACJC,GAAI,eAERC,KAAM,kBACNC,GAAI,aAKhB,CACIJ,KAAM,CACFC,GAAI,6CACJC,GAAI,WAERC,KAAM,WACNC,GAAI,WAER,CACIJ,KAAM,CACFC,GAAI,mDACJC,GAAI,SAERC,KAAM,SACNC,GAAI,UAgMZ,GAAe9B,EAAAA,EAAAA,KAhBUC,IAAiB,CACzCE,KAAMF,EAAMG,KAAKD,KACd6B,UAAW/B,EAAMG,KAAK4B,UACtBC,cAAehC,EAAMG,KAAK6B,cAC1BC,YAAajC,EAAMkC,WAIKC,IAA6B,CACrDC,SAAU,CACZjC,MAAMkC,EAAAA,EAAAA,IAAmBpB,EAAiBkB,GAC1CD,QAAQG,EAAAA,EAAAA,IAAmBf,EAAmBa,OAKhD,EAzL6B/B,IAA2E,IAA1E,KAACF,EAAI,SAAEkC,EAAQ,UAAEL,EAAS,cAAEC,EAAa,YAAEC,GAAY7B,EACjF,MAAMkC,GAAQC,EAAAA,EAAAA,QAAuB,OAC9BC,EAAKC,IAAUC,EAAAA,EAAAA,UAAsBlB,IACrCmB,EAAkBC,IAAuBF,EAAAA,EAAAA,UAA4B,IAOtEG,EAAkBA,KACpBd,EAAYK,EAASjC,KAAKgB,iBAAmBiB,EAASjC,KAAKkB,eAAe,GAW9EyB,EAAAA,EAAAA,YAAU,QAKR,KAGLA,EAAAA,EAAAA,YAAU,KACH,GAAuC,YAAnCb,EAAYnB,YAAYC,QAA0D,IAAlCkB,EAAYc,WAAWC,OAAc,OACzF,MAAMC,EAASzB,EAAU0B,KAAKC,IAC1B,GAAgB,gBAAZA,EAAKtB,GAAsB,CAAC,IAADuB,EAC3B,MAAMC,EAASpB,EAAYc,WAAWG,KAAKI,IAAK,CACxC7B,KAAM6B,EAAMC,MAAM9B,KAClBG,KAAO,WAAU0B,EAAMzB,KACvBA,GAAIyB,EAAMzB,OAGlB,MAAO,IAAIsB,EAAMrB,QAAqB,QAAdsB,EAAED,EAAKrB,eAAO,IAAAsB,OAAA,EAAZA,EAAcI,OAAOH,GACnD,CAEA,OAAOF,CAAI,IAEfV,EAAOQ,EAAO,GAClB,CAAChB,EAAYnB,YAAYC,OAAQb,IAYjC,OACIuD,EAAAA,EAAAA,MAAA7C,EAAAA,SAAA,CAAAC,SAAA,EACI4C,EAAAA,EAAAA,MAAA,OAAKzC,UAAWgB,EAAgB,qBAAuB,cAAcnB,SAAA,EACjEF,EAAAA,EAAAA,KAAA,OAAKK,UAAU,iBAAgBH,UAC3BF,EAAAA,EAAAA,KAAA,MAAAE,SACK2B,EAAIU,KAAKC,IAEFM,EAAAA,EAAAA,MAAA,MAAoBzC,UAAWmC,EAAKrB,QAAS,aAAe,GAAGjB,SAAA,EAC3D4C,EAAAA,EAAAA,MAACC,EAAAA,GAAO,CAAC1C,UAAW2C,IAAmB,IAAlB,SAAEC,GAAUD,EAAM,OAAOC,EAAW,WAAa,EAAE,EACpEC,GAAIV,EAAKvB,KACT,gBAAeuB,EAAKtB,GAAGhB,SAAA,CAEtBsC,EAAK1B,KAAKvB,GACO,UAAjBiD,EAAK1B,KAAKE,IAAiBhB,EAAAA,EAAAA,KAAA,OAAKK,UAAU,2BAA0BH,UAACF,EAAAA,EAAAA,KAACmD,EAAY,MAAY,QAElGX,EAAKrB,SACFnB,EAAAA,EAAAA,KAAA,MAAIK,UAAU,WAAUH,UACpBF,EAAAA,EAAAA,KAAA,OAAKK,UAAU,mBAAkBH,SAC5BsC,EAAKrB,QAAQoB,KAAIa,IAEVpD,EAAAA,EAAAA,KAAA,MAAAE,UACIF,EAAAA,EAAAA,KAAC+C,EAAAA,GAAO,CACJG,GAAIE,EAAQnC,KACZ,mBAAkBuB,EAAKtB,GAAGhB,SAEzBkD,EAAQtC,KAAKvB,MALb6D,EAAQnC,YAYnC,OAzBGuB,EAAKvB,aAgC9B6B,EAAAA,EAAAA,MAAA,OAAKzC,UAAU,gBAAeH,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,OAAKK,UAAU,gBACfyC,EAAAA,EAAAA,MAAA,SAAO,aAAW,uBAAsB5C,SAAA,EACpCF,EAAAA,EAAAA,KAAA,SAAOqD,KAAK,WAAWC,QA9FzBC,KACdlC,EAAgBI,EAASjC,KAAKe,gBAAkBkB,EAASjC,KAAKiB,cAAc,KA8F5DT,EAAAA,EAAAA,KAAA,OAAKwD,IAAKC,EAASC,IAAI,UACvB1D,EAAAA,EAAAA,KAAA,OAAKK,UAAU,YAAWH,UACtBF,EAAAA,EAAAA,KAAA,uBAQhB8C,EAAAA,EAAAA,MAAA,OAAKzC,UAAWe,EAAY,oBAAsB,aAAalB,SAAA,EAC3DF,EAAAA,EAAAA,KAAA,OAAKK,UAAU,gBAAeH,UAC1B4C,EAAAA,EAAAA,MAAA,SAAO,aAAW,uBAAsB5C,SAAA,EACpCF,EAAAA,EAAAA,KAAA,SAAOqD,KAAK,WAAWC,QAASpB,KAChClC,EAAAA,EAAAA,KAAA,OAAKwD,IAAKC,EAASC,IAAI,UACvB1D,EAAAA,EAAAA,KAAA,OAAKK,UAAU,YAAWH,UACtBF,EAAAA,EAAAA,KAAA,mBAIZA,EAAAA,EAAAA,KAAA,OAAKK,UAAU,OAAOsD,IAAKhC,KAC3B3B,EAAAA,EAAAA,KAAA,OAAKK,UAAU,iBAAgBH,UAC3BF,EAAAA,EAAAA,KAAA,MAAAE,SACK2B,EAAIU,KAAKC,IAAqB,IAADoB,EAAAC,EAC1B,OACI7D,EAAAA,EAAAA,KAAC8D,EAAAA,SAAQ,CAAA5D,SACQ,QAAZ0D,EAAApB,EAAKrB,eAAO,IAAAyC,GAAZA,EAAcvB,QACXS,EAAAA,EAAAA,MAAA,MAAIzC,UAAY,IAAE2B,EAAiB+B,SAASvB,EAAKtB,IAAM,WAAa,IAAKhB,SAAA,EACrEF,EAAAA,EAAAA,KAAA,QAAMsD,QAASA,KAAMU,OAhFhCC,EAgFoDzB,EAAKtB,QA/E9Ec,EAAiB+B,SAASE,GAC1BhC,EAAoBD,EAAiBkC,QAAOhD,GAAMA,IAAO+C,KAEzDhC,EAAoB,IAAID,EAAkBiC,KAJrBA,KAgF6D,EAAA/D,SAAEsC,EAAK1B,KAAKvB,MAC9DS,EAAAA,EAAAA,KAAA,MAAAE,UACIF,EAAAA,EAAAA,KAAA,OAAKK,UAAU,cAAaH,SACX,QADW2D,EACvBrB,EAAKrB,eAAO,IAAA0C,OAAA,EAAZA,EAActB,KAAKa,IAEZpD,EAAAA,EAAAA,KAAA,MAAAE,UACIF,EAAAA,EAAAA,KAAC+C,EAAAA,GAAO,CAAC1C,UAAW8D,IAAmB,IAAlB,SAAElB,GAAUkB,EAAM,OAAOlB,EAAW,WAAa,EAAE,EACpEK,QAASpB,EACTgB,GAAIE,EAAQnC,KAAMmD,KAAG,EAAAlE,SACpBkD,EAAQtC,KAAKvB,MAJb6D,EAAQlC,cAerClB,EAAAA,EAAAA,KAAA,MAAAE,UACIF,EAAAA,EAAAA,KAAC+C,EAAAA,GAAO,CAAC1C,UAAWgE,IAAmB,IAAlB,SAAEpB,GAAUoB,EAAM,OAAOpB,EAAW,WAAa,EAAE,EAAGK,QAASpB,EAChFgB,GAAIV,EAAKvB,KAAKf,SACbsC,EAAK1B,KAAKvB,QA1BZiD,EAAKvB,KA8BT,SAM3BjB,EAAAA,EAAAA,KAAA,OAAKK,UAAU,8BAEpB,I,mDCxOX,EAlBeiE,KAIPtE,EAAAA,EAAAA,KAAA,UAAAE,UACIF,EAAAA,EAAAA,KAAA,OAAKK,UAAU,YAAWH,UACtB4C,EAAAA,EAAAA,MAAA,OAAKzC,UAAU,kBAAiBH,SAAA,EAC5BF,EAAAA,EAAAA,KAACuE,EAAAA,GAAI,CAACrB,GAAG,IAAI7C,UAAU,YAAWH,UAC9BF,EAAAA,EAAAA,KAAA,OAAKwD,IAAKgB,EAAUd,IAAI,gBAE5B1D,EAAAA,EAAAA,KAACyE,EAAG,U,wHCXjB,MAAMC,EAAYA,KAAA,CACrBrB,KAAM/C,EAAAA,GAAgBqE,cAGbC,EAAYA,KAAA,CACrBvB,KAAM/C,EAAAA,GAAgBuE,cAObC,EAAgBA,KAAA,CACzBzB,KAAM/C,EAAAA,GAAgByE,kBAGbC,EAAeA,KAAA,CACxB3B,KAAM/C,EAAAA,GAAgB2E,iBAGbC,EAAiBA,KAAA,CAC1B7B,KAAM/C,EAAAA,GAAgB6E,mBAMbzE,EAAgBA,KAAA,CACzB2C,KAAM/C,EAAAA,GAAgB8E,mBAGb5E,EAAiBA,KAAA,CAC1B6C,KAAM/C,EAAAA,GAAgB+E,oBASb5E,EAAeA,KAAA,CACxB4C,KAAM/C,EAAAA,GAAgBgF,kBAGb/E,EAAgBA,KAAA,CACzB8C,KAAM/C,EAAAA,GAAgBiF,kB","sources":["components/CartInformer/CartInformer.tsx","partials/Nav/Nav.tsx","partials/Header/Header.tsx","redux/actions/base.ts"],"sourcesContent":["import { AnyAction, bindActionCreators } from \"redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport './cart-informer.scss'\r\nimport { ICartState, IFullState, TLang } from \"../../interfaces\";\r\n\r\n\r\ninterface IPropsState {\r\n    cart: ICartState\r\n    lang: TLang\r\n}\r\n\r\n\r\n\r\n\r\nconst CartInformer: React.FC<IPropsState> = ({lang, cart}): JSX.Element => {\r\n    \r\n    const itemsInCart = cart.items.reduce((total, item) => total + item.amount, 0)\r\n    return (\r\n        <>\r\n            {cart.dataLoading.status === 'success' ? \r\n                <div className=\"cart-informer\">\r\n                    <span>{itemsInCart > 0 ? `+${itemsInCart}` : null}</span>\r\n                </div>\r\n                :\r\n                null\r\n            }\r\n        </>\r\n        \r\n    )\r\n\r\n\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state: IFullState): IPropsState => ({\r\n    cart: state.cart,\r\n    lang: state.base.lang\r\n})\r\n\r\n\r\n\r\n  \r\n\r\nexport default connect(mapStateToProps)(CartInformer);\r\n","import { Fragment, useEffect, useState,  useRef } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { IFibersState, IFullState, IPageItem, TLang } from \"src/interfaces\";\r\nimport \"./nav.scss\"\r\nimport navLogo from \"../../assets/img/nav_logo.png\"\r\nimport { connect } from \"react-redux\";\r\nimport { AnyAction, bindActionCreators } from \"redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { setNavCloseDt, setNavCloseMob, setNavOpenDt, setNavOpenMob }  from \"../../redux/actions/base\"\r\nimport CartInformer from \"../../components/CartInformer/CartInformer\";\r\nimport { loadFibers } from \"../../redux/actions/fibers\"\r\n\r\n\r\nconst actionsListBase = {setNavCloseDt, setNavCloseMob, setNavOpenDt, setNavOpenMob }\r\nconst actionsListFibers = { loadFibers }\r\n\r\ninterface IPropsState {\r\n    lang: TLang\r\n    mobOpened: boolean\r\n    desktopOpened: boolean\r\n    fibersState: IFibersState\r\n}\r\n\r\ninterface IPropsActions {\r\n    setState: {\r\n        base: typeof actionsListBase\r\n        fibers: typeof actionsListFibers\r\n    }\r\n}\r\n\r\ninterface IProps extends IPropsState, IPropsActions {}\r\n\r\nconst pagesList = [\r\n    {\r\n        name: {\r\n            ru: \"главная\",\r\n            en: 'home'\r\n        },\r\n        path: \"/\",\r\n        id: 'main_home',\r\n    },\r\n    {\r\n        name: {\r\n            ru: \"Филаменты\",\r\n            en: 'Filaments'\r\n        },\r\n        path: \"/fibers\",\r\n        id: 'main_fibers',\r\n        //expanded: false,\r\n        subMenu : [\r\n            {\r\n                name: {\r\n                    ru: \"О ФИЛАМЕНТАХ\",\r\n                    en: 'ABOUT'\r\n                },\r\n                path: \"/fibers\",\r\n                id: 'about',\r\n\r\n            },\r\n            {\r\n                name: {\r\n                    ru: \"СРАВНЕНИЕ\",\r\n                    en: 'COMPARASING'\r\n                },\r\n                path: \"/fibers/compare\",\r\n                id: 'compare',\r\n\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        name: {\r\n            ru: \"каталог\",\r\n            en: 'catalog'\r\n        },\r\n        path: \"/catalog\",\r\n        id: 'catalog',\r\n    },\r\n    {\r\n        name: {\r\n            ru: \"заказать\",\r\n            en: 'order',\r\n        },\r\n        path: \"/order\",\r\n        id: 'order',\r\n    },\r\n] satisfies IPageItem[]\r\n\r\n\r\n\r\n\r\nconst Nav:React.FC<IProps> = ({lang, setState, mobOpened, desktopOpened, fibersState}): JSX.Element => {\r\n    const _blur = useRef<HTMLDivElement>(null)\r\n    const [nav, setNav] = useState<IPageItem[]>(pagesList)\r\n    const [expandedNavItems, setExpandedNavItems] = useState<IPageItem[\"id\"][]>([])\r\n    \r\n\r\n    const navToggle = () => {\r\n        desktopOpened ? setState.base.setNavCloseDt() : setState.base.setNavOpenDt()\r\n    }\r\n\r\n    const navToggleMobile = () => {\r\n        mobOpened ? setState.base.setNavCloseMob() : setState.base.setNavOpenMob()\r\n    }\r\n\r\n\r\n    /*const handleScroll =() => {\r\n        scrollTimeout.current && clearTimeout(scrollTimeout.current)\r\n        scrollTimeout.current = setTimeout(()=> {\r\n            setOpened(window.scrollY < 400)\r\n        }, 250)\r\n    }*/\r\n\r\n    useEffect(() => {\r\n        /*window.addEventListener(\"scroll\", handleScroll);\r\n        return(() => {\r\n            window.removeEventListener(\"scroll\", handleScroll);\r\n        })*/\r\n    },[])\r\n\r\n\r\n\tuseEffect(() => {\r\n        if (fibersState.dataLoading.status !== 'success' || fibersState.fibersList.length === 0) return\r\n        const newNav = pagesList.map((page) => {\r\n            if (page.id === \"main_fibers\") {\r\n                const newSub = fibersState.fibersList.map((fiber) => ({\r\n                        name: fiber.short.name,\r\n                        path: `/fibers/${fiber.id}`,\r\n                        id: fiber.id\r\n                    })\r\n                )\r\n                return {...page, subMenu: page.subMenu?.concat(newSub)}\r\n            }\r\n\r\n            return page\r\n        })\r\n        setNav(newNav)\r\n\t}, [fibersState.dataLoading.status, lang])\r\n\r\n\r\n    const onNavWithSubClicked = (pageId: IPageItem[\"id\"]) => {\r\n        if (expandedNavItems.includes(pageId)) {\r\n            setExpandedNavItems(expandedNavItems.filter(id => id !== pageId))\r\n        } else (\r\n            setExpandedNavItems([...expandedNavItems, pageId])\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <nav className={desktopOpened ? \"nav_desktop opened\" : \"nav_desktop\"}>\r\n                <div className=\"nav__container\">\r\n                    <ul>\r\n                        {nav.map((page: IPageItem) => {\r\n                            return (\r\n                                <li key={page.path} className={page.subMenu? 'extandable' : ''}>\r\n                                    <NavLink className={({ isActive }) => {return isActive ? \"selected\" : \"\"}}\r\n                                        to={page.path}\r\n                                        data-nav-text={page.id}\r\n                                    >\r\n                                        {page.name[lang]}\r\n                                        {page.name.en === 'order' ? <div className=\"cart-informer__container\"><CartInformer /></div> : null}\r\n                                    </NavLink>\r\n                                    {page.subMenu ? \r\n                                        <ul className=\"sub_menu\">\r\n                                            <div className=\"submenu__content\">\r\n                                                {page.subMenu.map(subPage => {\r\n                                                    return (\r\n                                                        <li key={subPage.path}>\r\n                                                            <NavLink\r\n                                                                to={subPage.path}\r\n                                                                data-subnav-text={page.id}\r\n                                                            >\r\n                                                                {subPage.name[lang]}\r\n                                                            </NavLink>\r\n                                                        </li>\r\n                                                    )\r\n                                                })}\r\n                                            </div>\r\n                                        </ul>\r\n                                    : null}\r\n                                </li>\r\n                            )\r\n                        })\r\n                        }\r\n                    </ul>\r\n                </div>\r\n                <div className=\"nav__switcher\">\r\n                    <div className=\"text-hider\"></div>\r\n                    <label aria-label=\"open/hide navigation\">\r\n                        <input type=\"checkbox\" onClick={navToggle}/>\r\n                        <img src={navLogo} alt=\"Menu\" />\r\n                        <div className=\"nav__sign\">\r\n                            <span></span>\r\n                        </div>\r\n                    </label>\r\n                </div>\r\n            </nav>\r\n\r\n\r\n\r\n            <nav className={mobOpened ? \"nav_mobile opened\" : \"nav_mobile\"}>\r\n                <div className=\"nav__switcher\">\r\n                    <label aria-label=\"open/hide navigation\">\r\n                        <input type=\"checkbox\" onClick={navToggleMobile}/>\r\n                        <img src={navLogo} alt=\"Menu\" />\r\n                        <div className=\"nav__sign\">\r\n                            <span></span>\r\n                        </div>\r\n                    </label>\r\n                </div>\r\n                <div className=\"blur\" ref={_blur}></div>\r\n                <div className=\"nav__container\">\r\n                    <ul>\r\n                        {nav.map((page: IPageItem) => {\r\n                            return (\r\n                                <Fragment key={page.path}>\r\n                                    {page.subMenu?.length ? \r\n                                        <li className={`${expandedNavItems.includes(page.id) ? 'expanded' : ''}`}>\r\n                                            <span onClick={() => onNavWithSubClicked(page.id)}>{page.name[lang]}</span>\r\n                                            <ul>\r\n                                                <div className=\"nav__subNav\">\r\n                                                    {page.subMenu?.map((subPage) => {\r\n                                                        return (\r\n                                                            <li key={subPage.id}>\r\n                                                                <NavLink className={({ isActive }) => {return isActive ? \"selected\" : \"\"}} \r\n                                                                    onClick={navToggleMobile}\r\n                                                                    to={subPage.path} end>\r\n                                                                    {subPage.name[lang]}\r\n                                                                    \r\n                                                                </NavLink>\r\n                                                            </li>\r\n                                                        )\r\n                                                    })}\r\n\r\n                                                </div>\r\n                                            </ul>\r\n                                        </li>\r\n                                        :\r\n                                        <li>\r\n                                            <NavLink className={({ isActive }) => {return isActive ? \"selected\" : \"\"}} onClick={navToggleMobile}\r\n                                                to={page.path}>\r\n                                                {page.name[lang]}\r\n                                            </NavLink>\r\n                                        </li>\r\n                                    }\r\n                                </Fragment>\r\n                            )\r\n                        })\r\n                        }\r\n                    </ul>\r\n                </div>\r\n                <div className=\"nav__container_right\"></div>\r\n            </nav>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: IFullState): IPropsState => ({\r\n\tlang: state.base.lang,\r\n    mobOpened: state.base.mobOpened,\r\n    desktopOpened: state.base.desktopOpened,\r\n    fibersState: state.fibers\r\n})\r\n  \r\n  \r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): IPropsActions => ({\r\n    setState: {\r\n\t\tbase: bindActionCreators(actionsListBase, dispatch),\r\n\t\tfibers: bindActionCreators(actionsListFibers, dispatch),\r\n\t}\r\n})\r\n  \r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Nav)\r\n","import { Link } from \"react-router-dom\";\r\nimport Nav from \"../Nav/Nav\";\r\nimport siteLogo from \"../../assets/img/logo.png\"\r\nimport './header.scss'\r\n\r\nconst Header = () => {\r\n    //console.log(\"header render\");\r\n   \r\n    return (\r\n        <header>\r\n            <div className=\"container\">\r\n                <div className=\"header__content\">\r\n                    <Link to=\"/\" className=\"logo-link\"> \r\n                        <img src={siteLogo} alt=\"Our Logo\" />\r\n                    </Link>\r\n                    <Nav />\r\n                </div>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\n\r\nexport default Header;","import { IAction } from \"src/interfaces\"\r\nimport { actionsListBase } from './actionsList'\r\n\r\n\r\nexport const setLangEn = <T>(): IAction<T> => ({\r\n    type: actionsListBase.SET_LANG_EN,\r\n})\r\n\r\nexport const setLangRu = <T>(): IAction<T> => ({\r\n    type: actionsListBase.SET_LANG_RU,\r\n})\r\n\r\n\r\n\r\n\r\n\r\nexport const setThemeLight = <T>(): IAction<T> => ({\r\n    type: actionsListBase.SET_THEME_LIGHT,\r\n})\r\n\r\nexport const setThemeDark = <T>(): IAction<T> => ({\r\n    type: actionsListBase.SET_THEME_DARK,\r\n})\r\n\r\nexport const setThemeToggle = <T>(): IAction<T> => ({\r\n    type: actionsListBase.SET_THEME_TOGGLE,\r\n})\r\n\r\n\r\n\r\n\r\nexport const setNavOpenMob = <T>():IAction<T> => ({\r\n    type: actionsListBase.SET_NAV_OPEN_MOB,\r\n});\r\n\r\nexport const setNavCloseMob = <T>():IAction<T> => ({\r\n    type: actionsListBase.SET_NAV_CLOSE_MOB,\r\n});\r\n/*\r\nexport const setNavToggleMob = <T>():IAction<T> => ({\r\n    type: SET_NAV_TOGGLE_MOB,\r\n});\r\n*/\r\n\r\n\r\nexport const setNavOpenDt = <T>():IAction<T> => ({\r\n    type: actionsListBase.SET_NAV_OPEN_DT,\r\n});\r\n\r\nexport const setNavCloseDt = <T>():IAction<T> => ({\r\n    type: actionsListBase.SET_NAV_CLOSE_DT,\r\n});\r\n/*\r\nexport const setNavToggleDt = <T>():IAction<T> => ({\r\n    type: SET_NAV_TOGGLE_DT});\r\n*/\r\n"],"names":["connect","state","cart","lang","base","_ref","itemsInCart","items","reduce","total","item","amount","_jsx","_Fragment","children","dataLoading","status","className","actionsListBase","setNavCloseDt","setNavCloseMob","setNavOpenDt","setNavOpenMob","actionsListFibers","loadFibers","pagesList","name","ru","en","path","id","subMenu","mobOpened","desktopOpened","fibersState","fibers","dispatch","setState","bindActionCreators","_blur","useRef","nav","setNav","useState","expandedNavItems","setExpandedNavItems","navToggleMobile","useEffect","fibersList","length","newNav","map","page","_page$subMenu","newSub","fiber","short","concat","_jsxs","NavLink","_ref2","isActive","to","CartInformer","subPage","type","onClick","navToggle","src","navLogo","alt","ref","_page$subMenu2","_page$subMenu3","Fragment","includes","onNavWithSubClicked","pageId","filter","_ref3","end","_ref4","Header","Link","siteLogo","Nav","setLangEn","SET_LANG_EN","setLangRu","SET_LANG_RU","setThemeLight","SET_THEME_LIGHT","setThemeDark","SET_THEME_DARK","setThemeToggle","SET_THEME_TOGGLE","SET_NAV_OPEN_MOB","SET_NAV_CLOSE_MOB","SET_NAV_OPEN_DT","SET_NAV_CLOSE_DT"],"sourceRoot":""}