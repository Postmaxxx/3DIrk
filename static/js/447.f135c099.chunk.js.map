{"version":3,"file":"static/js/447.f135c099.chunk.js","mappings":"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","sources":["assets/data/fibers.ts","assets/js/ImgWithPreloader.tsx","components/MessageImage/MessageImage.tsx","components/Modal/Modal.tsx","components/Spliders/Common/SpliderCommon.tsx","components/Proscons/Proscons.tsx","assets/js/processors.ts","components/Features/Features.tsx","components/FiberItem/FiberItem.tsx","pages/Fiber/Fiber.tsx"],"sourcesContent":["import { TPropertiesValues } from \"src/interfaces\"\r\n\r\nexport const propertiesList = [\r\n    \"strength\",\r\n    \"stiffnes\",\r\n    \"durability\",\r\n    \"resistantImpact\",\r\n    \"minTemp\",\r\n    \"maxTemp\",\r\n    \"thermalExpansion\",\r\n    \"density\",\r\n    \"flexible\",\r\n    \"elastic\",\r\n    \"soft\",\r\n    \"composite\",\r\n    \"resistantUV\",\r\n    \"resistantWater\",\r\n    \"dissolvable\",\r\n    \"resistantHeat\",\r\n    \"resistantChemically\",\r\n    \"resistantFatigue\",\r\n    \"cutting\",\r\n    \"grinding\",\r\n    //\"speed\",\r\n    \"price\",\r\n] as const\r\n\r\n\r\nexport const propertiesValues: TPropertiesValues = {\r\n    strength: {\r\n        name: {\r\n            en: 'Strength',\r\n            ru: 'Прочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: 'MPa',\r\n            ru: 'Мпа'\r\n        }\r\n    },\r\n    stiffnes: {\r\n        name: {\r\n            en: 'Stiffnes',\r\n            ru: 'SПрочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '',\r\n            ru: ''\r\n        }\r\n    },\r\n    durability: {\r\n        name: {\r\n            en: 'Durability',\r\n            ru: 'DПрочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '',\r\n            ru: ''\r\n        }\r\n    },\r\n    minTemp: {\r\n        name: {\r\n            en: 'Min usage temp',\r\n            ru: 'mПрочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '°C',\r\n            ru: '°C'\r\n        }\r\n    },\r\n    maxTemp: {\r\n        name: {\r\n            en: 'Max usage temp',\r\n            ru: 'Прочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '°C',\r\n            ru: '°C'\r\n        }\r\n    },\r\n    thermalExpansion: {\r\n        name: {\r\n            en: 'Thermal expansion',\r\n            ru: 'svПрочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: 'µm/m-°C',\r\n            ru: 'µm/m-°C'\r\n        }\r\n    },\r\n    density: {\r\n        name: {\r\n            en: 'Density',\r\n            ru: 'Прочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: 'g/cm3',\r\n            ru: 'г/см3'\r\n        }\r\n    },\r\n    price: {\r\n        name: {\r\n            en: 'Price',\r\n            ru: 'Цена'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: 'rub/gr',\r\n            ru: 'руб/гр'\r\n        }\r\n    },\r\n    flexible: {\r\n        name: {\r\n            en: 'Flexible',\r\n            ru: 'Прочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '',\r\n            ru: ''\r\n        }\r\n    },\r\n    elastic: {\r\n        name: {\r\n            en: 'Elastic',\r\n            ru: 'Прочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '',\r\n            ru: ''\r\n        }\r\n    },\r\n    resistantImpact: {\r\n        name: {\r\n            en: 'Impact resistant',\r\n            ru: 'Прочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '',\r\n            ru: ''\r\n        }\r\n    },\r\n    soft: {\r\n        name: {\r\n            en: 'Soft',\r\n            ru: 'Прочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '',\r\n            ru: ''\r\n        }\r\n    },\r\n    composite: {\r\n        name: {\r\n            en: 'Composite',\r\n            ru: 'Прочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '',\r\n            ru: ''\r\n        }\r\n    },\r\n    resistantUV: {\r\n        name: {\r\n            en: 'UV resistant',\r\n            ru: 'Прочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '',\r\n            ru: ''\r\n        }\r\n    },\r\n    resistantWater: {\r\n        name: {\r\n            en: 'Water resistant',\r\n            ru: 'Прочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '',\r\n            ru: ''\r\n        }\r\n    },\r\n    dissolvable: {\r\n        name: {\r\n            en: 'Dissolvable',\r\n            ru: 'Прочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '',\r\n            ru: ''\r\n        }\r\n    },\r\n    resistantHeat: {\r\n        name: {\r\n            en: 'Heat resistant',\r\n            ru: 'Прочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '°C',\r\n            ru: '°C'\r\n        }\r\n    },\r\n    resistantChemically: {\r\n        name: {\r\n            en: 'Chemically resistant',\r\n            ru: 'Прочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '',\r\n            ru: ''\r\n        }\r\n    },\r\n    resistantFatigue: {\r\n        name: {\r\n            en: 'Fatigue resistant',\r\n            ru: 'Прочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '',\r\n            ru: ''\r\n        }\r\n    },\r\n    cutting: {\r\n        name: {\r\n            en: 'Cutting',\r\n            ru: 'Прочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '',\r\n            ru: ''\r\n        }\r\n    },\r\n    grinding: {\r\n        name: {\r\n            en: 'Grinding',\r\n            ru: 'Прочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '',\r\n            ru: ''\r\n        }\r\n    },\r\n    /*speed: {\r\n        name: {\r\n            en: 'Printing speed',\r\n            ru: 'Прочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '',\r\n            ru: ''\r\n        }\r\n    },*/\r\n}\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport Preloader from \"../../components/Preloaders/Preloader\";\r\n\r\ninterface IProps {\r\n\tsrc: string\r\n\talt: string\r\n\tid?: string\r\n}\r\n\r\n\r\nconst ImgWithPreloader: React.FC<IProps> = ({src, alt, id}: IProps):JSX.Element => {\r\n\r\n\tconst [loaded, setLoaded] = useState(false);\r\n\tconst img = useRef<HTMLImageElement>(null);\r\n\r\n\tconst hasLoaded = () => {\r\n\t\tsetLoaded(true)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{loaded || <Preloader />}\r\n\t\t\t<img ref={img} src={src} alt={alt} onLoad={hasLoaded} style={{display: loaded ? \"block\" : \"none\"}} id={id} />\r\n\t\t</>\r\n\t);\r\n};\r\n\r\n\r\nexport default ImgWithPreloader;","import { useState, useEffect, useRef } from 'react'\r\nimport \"./message_image.scss\"\r\nimport Preloader from '../Preloaders/Preloader'\r\n\r\ninterface IProps {\r\n    path: string\r\n    descr: string\r\n}\r\n\r\nconst ModalImage = ({props}: {props: IProps}) => {\r\n\r\n    const [loaded, setLoaded] = useState<boolean>(false)\r\n    const _container = useRef<HTMLDivElement>(null)\r\n    \r\n\r\n    const setStatusLoaded = () => {\r\n        setLoaded(true)\r\n    }\r\n\r\n    useEffect(() => {\r\n        const _img: HTMLImageElement = new Image;\r\n        _img.src = props.path;\r\n        _container.current?.appendChild(_img)\r\n        _img.addEventListener('load', setStatusLoaded)\r\n        setLoaded(false);\r\n        return () => {\r\n            _img.removeEventListener('load', setStatusLoaded)\r\n            _container.current?.removeChild(_img)\r\n        }\r\n    }, [props.path])\r\n\r\n    \r\n    return (\r\n        <div className=\"message_image__container\">\r\n            <div className=\"img__wrapper\" ref={_container}>\r\n                {!loaded && <Preloader />}\r\n            </div>\r\n            <div className=\"descr__container\">\r\n                <span>{props.descr}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ModalImage","import './modal.scss'\r\nimport { createPortal } from 'react-dom';\r\nimport closeIcon from \"../../assets/img/icon_close.svg\"\r\nimport { useEffect } from 'react';\r\n\r\n\r\ninterface IProps {\r\n    visible: boolean\r\n    escExit: boolean\r\n    close: () => void\r\n    children: React.ReactNode\r\n}\r\n\r\n\r\n\r\nconst Modal: React.FC<IProps> = ({visible, escExit, close, children}) => {\r\n    const _modal = document.getElementById('modal') as HTMLElement;\r\n\r\n    const modalKeyListener = (e: KeyboardEvent) => {\r\n        escExit && e.keyCode === 27 && close();\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.addEventListener(\"keyup\", modalKeyListener);\r\n        return () => {\r\n            document.removeEventListener(\"keyup\", modalKeyListener);\r\n        }\r\n    }, [])\r\n\r\n    return _modal ? createPortal(\r\n        <div className={visible ? \"modal-window visible\" : \"modal-window\"}>\r\n            <button className=\"closer\" aria-label='close | закрыть' onClick={close}>\r\n                <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path fillRule=\"evenodd\" stroke=\"#979797\" clipRule=\"evenodd\" d=\"M16 31C24.2843 31 31 24.2843 31 16C31 7.71573 24.2843 1 16 1C7.71573 1 1 7.71573 1 16C1 24.2843 7.71573 31 16 31Z\" strokeWidth=\"2\"/>\r\n                    <path d=\"M9 9L24 24\"  strokeWidth=\"2\" strokeLinecap=\"square\"/>\r\n                    <path d=\"M8.49512 23.4586L24.5049 9.54144\"  strokeWidth=\"2\" strokeLinecap=\"square\"/>\r\n                </svg>\r\n            </button>\r\n\t\t\t<div className=\"content\">\r\n                {visible ? children : null}\r\n            </div>\r\n        </div>,\r\n        _modal    \r\n    ) \r\n    :\r\n    <div className=\"modal-window_absence\">\r\n        Node for Modal Windows was not found\r\n    </div>\r\n\r\n}\r\n\r\n\r\nexport default Modal;","import './splider-common.scss'\r\nimport Splide from \"@splidejs/splide\";\r\nimport { findBestSuitedImg } from \"src/assets/js/findBestSuitedImg\";\r\nimport ImgWithPreloader from 'src/assets/js/ImgWithPreloader';\r\nimport { IImg, IModal, IModalImg, ISpliderOptions, TLang } from 'src/interfaces';\r\nimport \"@splidejs/react-splide/css\";\r\nimport Modal from 'src/components/Modal/Modal';\r\nimport ModalImage from 'src/components/MessageImage/MessageImage';\r\nimport { useRef, useState, useEffect, MouseEvent } from 'react'\r\n\r\n\r\n\r\ninterface IProps {\r\n\tlang: TLang\r\n\timages: IImg[]\r\n    imagesPerSlide: number\r\n}\r\n\r\ninterface IContainerSize {\r\n\twidth: number\r\n\theight: number\r\n}\r\n\r\n\r\n\r\n\r\nconst SpliderCommon: React.FC<IProps> = ({lang, images, imagesPerSlide=1}): JSX.Element => {\r\n\t\r\n\tconst splideCommon = useRef<Splide>();\r\n\tconst containerSize = useRef<IContainerSize>();\r\n\tconst _splideFabric = useRef<any>();\r\n\tconst [modal, setModal] = useState<IModal>({visible: false})\r\n\tconst [modalImg, setModalImg] = useState<IModalImg>({descr: '', path: ''})\r\n\r\n    const options: Partial<ISpliderOptions> = {\r\n        //type   : 'loop',\r\n        perPage: imagesPerSlide,\r\n        gap: '5%',\r\n\t\trewind: true,\r\n\t\tlazyLoad: true,\r\n\t\tupdateOnMove: true,\r\n\t\tperMove: 1,\r\n\t\tpagination: true,\r\n\t\tarrows: true,\r\n\t\tdrag: true,\r\n\t\tspeed: 500,\r\n\t\tautoplay: true,\r\n\t\tinterval: 5000,\r\n\t\tpauseOnHover: true,\r\n\t\tbreakpoints: {\r\n\t\t\t768: {\r\n\t\t\t\twheel: false,\r\n\t\t\t\tperPage: 2,\r\n                pagination: false,\r\n\t\t\t}, \r\n\t\t\t480: {\r\n\t\t\t\tperPage: 1,\r\n\t\t\t}, \r\n\t\t},\r\n\t};\r\n \r\n\tconst handleImgClick = (e: MouseEvent<HTMLDivElement>) => {\r\n\t\tif ((e.target as HTMLImageElement).tagName === 'IMG') {\r\n\t\t\tconst id = Number(((e.target as HTMLImageElement).id));\r\n\t\t\tsetModal({visible: true})\r\n\t\t\tsetModalImg({path: images[id].url, descr: images[id].name[lang]})\r\n\t\t}\r\n\t}\r\n\r\n\tconst closeModal = () => {\r\n\t\tsetModal({visible: false})\r\n\t}\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\tcontainerSize.current = {\r\n\t\t\twidth:  _splideFabric.current.offsetWidth,\r\n\t\t\theight:  _splideFabric.current.offsetHeight,\r\n\t\t};\r\n\t\tsplideCommon.current = new Splide(_splideFabric.current, options);\r\n\t\tsplideCommon.current.mount();\t\t\r\n\t\treturn () => {\r\n    \t\tsplideCommon.current?.destroy();\t\t\r\n\t\t};\r\n\t}, []);\r\n\r\n\t\r\n\r\n\r\n\treturn (\r\n        <div className='splider_common__wrapper' onClick={(e) => handleImgClick(e)}>\r\n            <div className=\"splide\" ref={_splideFabric} aria-label=\"The carousel\">\r\n                <div className=\"splide__track\">\r\n                    <ul className=\"splide__list\">\r\n                        {images.map((img, i) => {\r\n                            return (\r\n                                <li className=\"splide__slide\" key={i} data-path={img.url}>\r\n                                    <div className=\"splide__slide-container\">\r\n\t\t\t\t\t\t\t\t\t\t<ImgWithPreloader src={img.url} alt={img.name[lang]} id={String(i)}/>\r\n                                    </div>\r\n                                </li>\r\n                            );\r\n                        })\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            <Modal {...{visible: modal.visible, close: closeModal, escExit: true}}>\r\n\t\t\t\t<ModalImage props={{path: modalImg.path, descr: modalImg.descr}}/>\r\n\t\t\t</Modal> \r\n        </div>\r\n\t)\r\n\r\n};\r\n\r\n\r\n\r\n  \r\n\r\nexport default SpliderCommon;\r\n","import { TLang, TLangText, TLangTextArr } from 'src/interfaces'\r\nimport './proscons.scss'\r\n\r\ninterface IProps {  \r\n    pros: TLangText[]\r\n    cons: TLangText[]\r\n    lang: TLang\r\n}\r\n\r\nconst Proscons = ({pros, cons, lang} : IProps) => {\r\n    return (\r\n        <div className=\"proscons__container\">\r\n            <ul className='pros'>\r\n                {pros.length > 0 ? pros.map((item,i) => <li key={i}>{item[lang]}</li>) : null}\r\n            </ul>\r\n            <ul className='cons'>\r\n                {cons.length > 0 ? cons.map((item,i) => <li key={i}>{item[lang]}</li>) : null}\r\n            </ul>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Proscons","import { TLangText } from \"src/interfaces\";\r\n\r\ninterface ICompareTable {\r\n    [key: number] : TLangText\r\n}\r\n\r\nexport const ratingNumberToText = (value: number, scale: number): TLangText => {\r\n    let compareTable: ICompareTable = {}\r\n    switch (scale) {\r\n        case 10:\r\n            compareTable = {\r\n                1 : {\r\n                    en: 'none',\r\n                    ru: 'отсутствует'\r\n                },\r\n                2: {\r\n                    en: 'extremely low',\r\n                    ru: 'крайне низкая'\r\n                },\r\n                3: {\r\n                    en: 'low',\r\n                    ru: 'низкая'\r\n                },\r\n                4: {\r\n                    en: 'poor',\r\n                    ru: 'посредственная'\r\n                },\r\n                5: {\r\n                    en: 'below medium',\r\n                    ru: 'ниже средней'\r\n                },\r\n                6: {\r\n                    en: 'medium',\r\n                    ru: 'средняя'\r\n                },\r\n                7: {\r\n                    en: 'upper medium',\r\n                    ru: 'хорошая'\r\n                },\r\n                8: {\r\n                    en: 'hign',\r\n                    ru: 'высокая'\r\n                },\r\n                9: {\r\n                    en: 'very high',\r\n                    ru: 'очень высокая'\r\n                },\r\n                10: {\r\n                    en: 'exellent',\r\n                    ru: 'отличная'\r\n                }\r\n            }\r\n        break;\r\n        case 3:            \r\n        compareTable = {\r\n            1 : {\r\n                en: 'none',\r\n                ru: 'отсутствует'\r\n            },\r\n            2: {\r\n                en: 'average',\r\n                ru: 'средняя'\r\n            },\r\n            3: {\r\n                en: 'high',\r\n                ru: 'высокая'\r\n            },\r\n        }\r\n    break;\r\n        default:\r\n            break;\r\n    }\r\n    return compareTable[Number(value)]\r\n    \r\n}\r\n\r\n/*\r\nexport type TSvgTypes = 'minus' | 'ok' | 'con' | 'pro' | 'question' | 1 |2 |3\r\n\r\ninterface ISvgInserter {\r\n    color: string\r\n    type: TSvgTypes\r\n}\r\n\r\nexport const icon = ({type, color}: ISvgInserter): JSX.Element => {\r\n\r\n\r\n    return (\r\n        <>\r\n        </>\r\n    )\r\n}*/","import { IFeature, IFiber, IFiberParam, TLang, TLangText } from 'src/interfaces'\r\nimport './features.scss'\r\nimport { ratingNumberToText } from 'src/assets/js/processors'\r\nimport { propertiesValues, propertiesList } from 'src/assets/data/fibers'\r\n\r\ninterface IProps {  \r\n    params: IFiberParam\r\n\tfiber: IFiber\r\n    lang: TLang\r\n}\r\n\r\nconst Features = ({params, lang, fiber} : IProps) => {\r\n\r\n\r\n    return (\r\n        <div className=\"features\">\r\n            {propertiesList\r\n                .filter(property => property !== 'maxTemp')\r\n                .map((property, i) => {\r\n                return (\r\n                    <div className=\"feature__container\" key={property}>\r\n                        {(property === \"strength\" || property === \"thermalExpansion\" || property === \"density\") && <div className=\"feature\"><span>{propertiesValues[property].name[lang]}: </span><span></span><span>{params[property]} {propertiesValues[property].unit[lang]}</span></div>}\r\n                        {(property === \"stiffnes\" || property === \"durability\" || property === \"resistantImpact\") && <div className=\"feature\"><span>{propertiesValues[property].name[lang]}: </span><span></span><span>{ratingNumberToText(params.stiffnes, 10)[lang]}</span></div>}\r\n                        {property === \"minTemp\" && <div className=\"feature\"><span>{lang === \"en\" ? \"Temperetures\" : 't использования'}: </span><span></span><span>{params.minTemp} ... {params.maxTemp} {propertiesValues[property].unit[lang]}</span></div>}\r\n\r\n                        {(property === \"flexible\" \r\n                        || property === \"elastic\"\r\n                        || property === \"soft\"\r\n                        || property === \"composite\"\r\n                        || property === \"resistantUV\"\r\n                        || property === \"resistantWater\"\r\n                        || property === \"dissolvable\"\r\n                        || property === \"resistantHeat\"\r\n                        || property === \"resistantChemically\"\r\n                        || property === \"resistantFatigue\"\r\n                        || property === \"cutting\"\r\n                        || property === \"grinding\"\r\n                        ) && <div className=\"feature\"><span>{propertiesValues[property].name[lang]}: </span><span></span><span>{ratingNumberToText(params[property]+1, 3)[lang]}</span></div>}\r\n\r\n                        {/*property === \"speed\" && <div className=\"feature\"><span>{propertiesValues[property].name[lang]}: </span><span></span><span>{ratingNumberToText(params[property]+1, 10)[lang]}</span></div>*/}\r\n                        {property === \"price\" && <div className=\"feature\"><span>{propertiesValues[property].name[lang]}: </span><span></span><span>{fiber.params.priceGr} {propertiesValues.price.unit[lang]}</span></div>}\r\n\r\n                    </div>\r\n                )\r\n            })}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Features","import { IColor, IFiber, IModal, IModalImg, TLang } from 'src/interfaces'\r\nimport Proscons from '../Proscons/Proscons'\r\nimport './fiber-item.scss'\r\nimport SpliderCommon from '../Spliders/Common/SpliderCommon';\r\nimport Features from '../Features/Features';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { useState, useEffect, useRef } from 'react'\r\nimport Modal from '../Modal/Modal';\r\nimport ModalImage from '../MessageImage/MessageImage';\r\n\r\n\r\ninterface IProps {\r\n\tfiber: IFiber\r\n\tlang: TLang\r\n\tcolors: IColor[]\r\n}\r\n\r\nconst FiberItem = ({fiber, lang, colors}: IProps) => {\r\n\tconst [modal, setModal] = useState<IModal>({visible: false})\r\n\tconst [modalImg, setModalImg] = useState<IModalImg>({descr: '', path: ''})\r\n\r\n\r\n\t\r\n    const onImageClick = (e: React.MouseEvent , color: IColor) => {\r\n        e.stopPropagation()\r\n\t\tsetModalImg({descr: color.name[lang], path: color.url})\r\n        setModal({visible: true})\r\n    }\r\n\r\n    \r\n    const closeModal = () => {\r\n\t\tsetModal({visible: false})\r\n\t}\r\n\r\n\r\n    return (\r\n        <div className=\"fiber__item\">\r\n\t\t\t<h2>{fiber.name[lang]}</h2>\r\n            <div className='fiber__splider__container'>\r\n\t\t\t\t<SpliderCommon images={fiber.imgs} lang={lang} imagesPerSlide={3}/>\r\n            </div>\r\n            <div className=\"fiber__descr__container\">\r\n\t\t\t\t<div className=\"block_text\">\r\n\t\t\t\t\t{fiber.text[lang].map((textItem, i) => <p key={i}>{textItem.part}</p>)}\r\n\t\t\t\t\t<div className=\"features__container\">\r\n\t\t\t\t\t\t<h3>{lang === 'en' ? 'Features' : 'Характеристики'}</h3>\r\n\t\t\t\t\t\t<Features params={fiber.params} fiber={fiber} lang={lang}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"colors\">\r\n\t\t\t\t\t\t<h3>{lang === 'en' ? 'Available colors' : 'Доступные цвета'}</h3>\r\n\t\t\t\t\t\t<div className=\"colors__container\">\r\n\t\t\t\t\t\t\t{fiber.colors.map((color, i) => {\r\n\t\t\t\t\t\t\t\tconst colorData: IColor | undefined = colors.find(colorItem => colorItem.id === color)\r\n\t\t\t\t\t\t\t\tif (colorData) {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<div key={i} className='color__container' onClick={(e) => onImageClick(e, colorData)}>\r\n\t\t\t\t\t\t\t\t\t\t\t<img src={colorData.url} alt={colorData.name[lang]} />\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"proscons\">\r\n\t\t\t\t\t\t<h3>{lang === 'en' ? 'Summary' : '?'}</h3>\r\n\t\t\t\t\t\t<Proscons {...fiber.proscons} lang={lang}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t<NavLink\r\n\t\t\t\t\t\tclassName=\"button_blue link_compareList\"\r\n\t\t\t\t\t\tto=\"/fibers/compare\">\r\n\t\t\t\t\t\t\t{lang === 'en' ? 'Watch in comparasing' : 'Посмотреть в сравнении'}\r\n\t\t\t\t\t</NavLink>\r\n\t\t\t\t</div>\r\n            </div>\r\n\t\t\t<Modal {...{visible: modal.visible, close: closeModal, escExit: true}}>\r\n\t\t\t\t<ModalImage props={{path: modalImg.path, descr: modalImg.descr}}/>\r\n\t\t\t</Modal> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FiberItem\r\n","import './fiber.scss'\r\nimport { loadFibers, setSelectedFiber }  from \"../../redux/actions/fibers\"\r\nimport { loadColors }  from \"../../redux/actions/colors\"\r\nimport { useParams } from 'react-router-dom';\r\nimport { useEffect, useState } from 'react';\r\nimport { AnyAction, bindActionCreators, Dispatch } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport Preloader from '../../components/Preloaders/Preloader';\r\nimport { TLang, IFullState, IFiber, IFibersState, IColorsState, IColor } from \"../../interfaces\";\r\nimport FiberItem from 'src/components/FiberItem/FiberItem';\r\n\r\nconst actionsListFibers = { loadFibers, setSelectedFiber }\r\nconst actionsListColors = { loadColors }\r\n\r\ninterface IPropsState {\r\n    lang: TLang,\r\n    fibers: IFibersState\r\n    colors: IColorsState\r\n}\r\n\r\ninterface IPropsActions {\r\n    setState: {\r\n        fibers: typeof actionsListFibers\r\n        colors: typeof actionsListColors\r\n    }\r\n}\r\n\r\ninterface IProps extends IPropsState, IPropsActions {}\r\n\r\n\r\n\r\n\r\nconst Fiber:React.FC<IProps> = ({lang, fibers, colors, setState}):JSX.Element => {\r\n    const paramFiberId = useParams().fiberId || ''\r\n    \r\n    const [loaded, setLoaded] = useState<boolean>(false)\r\n    const [fiber, setFiber] = useState<IFiber>()\r\n    \r\n\r\n    useEffect(() => {\r\n        if (fibers.dataLoading.status === 'idle') {\r\n            setState.fibers.loadFibers()\r\n            setLoaded(false)\r\n        }\r\n        if (colors.dataLoading.status === 'idle') {\r\n            setState.colors.loadColors()\r\n            setLoaded(false)\r\n        }\r\n        if (colors.dataLoading.status === 'success' && fibers.dataLoading.status === 'success') {\r\n            setLoaded(true)\r\n            setFiber(fibers.fibersList.find(item => item.id === paramFiberId))\r\n            setState.fibers.setSelectedFiber(paramFiberId)\r\n        }\r\n    }, [colors.dataLoading?.status, fibers.dataLoading?.status, paramFiberId])\r\n    \r\n\r\n    return (\r\n        <div className=\"page page_fiber\">\r\n            <div className=\"container_page\">\r\n                <div className=\"container\">\r\n                    {loaded && fiber ? \r\n                        <FiberItem {...{fiber}} lang={lang} colors={colors.colors} />\r\n                    :\r\n                        <Preloader />}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: IFullState): IPropsState  => ({\r\n    lang: state.base.lang,\r\n    fibers: state.fibers,\r\n    colors: state.colors\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): IPropsActions => ({\r\n    setState: {\r\n\t\tfibers: bindActionCreators(actionsListFibers, dispatch),\r\n\t\tcolors: bindActionCreators(actionsListColors, dispatch)\r\n\t}\r\n})\r\n    \r\nexport default connect(mapStateToProps, mapDispatchToProps)(Fiber)"],"names":["propertiesList","propertiesValues","strength","name","en","ru","tip","unit","stiffnes","durability","minTemp","maxTemp","thermalExpansion","density","price","flexible","elastic","resistantImpact","soft","composite","resistantUV","resistantWater","dissolvable","resistantHeat","resistantChemically","resistantFatigue","cutting","grinding","_ref","src","alt","id","loaded","setLoaded","useState","img","useRef","_jsxs","_Fragment","children","_jsx","Preloader","ref","onLoad","hasLoaded","style","display","props","_container","setStatusLoaded","useEffect","_container$current","_img","Image","path","current","appendChild","addEventListener","_container$current2","removeEventListener","removeChild","className","descr","visible","escExit","close","_modal","document","getElementById","modalKeyListener","e","keyCode","createPortal","onClick","width","height","viewBox","fill","xmlns","fillRule","stroke","clipRule","d","strokeWidth","strokeLinecap","lang","images","imagesPerSlide","splideCommon","containerSize","_splideFabric","modal","setModal","modalImg","setModalImg","options","perPage","gap","rewind","lazyLoad","updateOnMove","perMove","pagination","arrows","drag","speed","autoplay","interval","pauseOnHover","breakpoints","wheel","offsetWidth","offsetHeight","Splide","mount","_splideCommon$current","destroy","target","tagName","Number","url","handleImgClick","map","i","ImgWithPreloader","String","Modal","closeModal","ModalImage","pros","cons","length","item","ratingNumberToText","value","scale","compareTable","params","fiber","filter","property","priceGr","colors","SpliderCommon","imgs","text","textItem","part","Features","color","colorData","find","colorItem","onImageClick","stopPropagation","Proscons","proscons","NavLink","to","actionsListFibers","loadFibers","setSelectedFiber","actionsListColors","loadColors","connect","state","base","fibers","dispatch","setState","bindActionCreators","_colors$dataLoading","_fibers$dataLoading","paramFiberId","useParams","fiberId","setFiber","dataLoading","status","fibersList","FiberItem"],"sourceRoot":""}