{"version":3,"file":"static/js/827.df6d75a6.chunk.js","mappings":"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","sources":["assets/data/fibers.ts","components/tiny/SvgInserter/SvgInserter.tsx","components/tiny/RatingLine/RatingLine.tsx","components/tiny/RatingMoney/RatingMoney.tsx","pages/FibersCompare/FibersCompare.tsx"],"sourcesContent":["import { TPropertiesValues } from \"src/interfaces\"\r\n\r\nexport const propertiesList = [\r\n    \"strength\",\r\n    \"stiffnes\",\r\n    \"durability\",\r\n    \"resistantImpact\",\r\n    \"minTemp\",\r\n    \"maxTemp\",\r\n    \"thermalExpansion\",\r\n    \"density\",\r\n    \"flexible\",\r\n    \"elastic\",\r\n    \"soft\",\r\n    \"composite\",\r\n    \"resistantUV\",\r\n    \"resistantWater\",\r\n    \"dissolvable\",\r\n    \"resistantHeat\",\r\n    \"resistantChemically\",\r\n    \"resistantFatigue\",\r\n    \"cutting\",\r\n    \"grinding\",\r\n    //\"speed\",\r\n    \"price\",\r\n] as const\r\n\r\n\r\nexport const propertiesValues: TPropertiesValues = {\r\n    strength: {\r\n        name: {\r\n            en: 'Strength',\r\n            ru: 'Прочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: 'MPa',\r\n            ru: 'Мпа'\r\n        }\r\n    },\r\n    stiffnes: {\r\n        name: {\r\n            en: 'Stiffnes',\r\n            ru: 'SПрочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '',\r\n            ru: ''\r\n        }\r\n    },\r\n    durability: {\r\n        name: {\r\n            en: 'Durability',\r\n            ru: 'DПрочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '',\r\n            ru: ''\r\n        }\r\n    },\r\n    minTemp: {\r\n        name: {\r\n            en: 'Min usage temp',\r\n            ru: 'mПрочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '°C',\r\n            ru: '°C'\r\n        }\r\n    },\r\n    maxTemp: {\r\n        name: {\r\n            en: 'Max usage temp',\r\n            ru: 'Прочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '°C',\r\n            ru: '°C'\r\n        }\r\n    },\r\n    thermalExpansion: {\r\n        name: {\r\n            en: 'Thermal expansion',\r\n            ru: 'svПрочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: 'µm/m-°C',\r\n            ru: 'µm/m-°C'\r\n        }\r\n    },\r\n    density: {\r\n        name: {\r\n            en: 'Density',\r\n            ru: 'Прочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: 'g/cm3',\r\n            ru: 'г/см3'\r\n        }\r\n    },\r\n    price: {\r\n        name: {\r\n            en: 'Price',\r\n            ru: 'Цена'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: 'rub/gr',\r\n            ru: 'руб/гр'\r\n        }\r\n    },\r\n    flexible: {\r\n        name: {\r\n            en: 'Flexible',\r\n            ru: 'Прочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '',\r\n            ru: ''\r\n        }\r\n    },\r\n    elastic: {\r\n        name: {\r\n            en: 'Elastic',\r\n            ru: 'Прочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '',\r\n            ru: ''\r\n        }\r\n    },\r\n    resistantImpact: {\r\n        name: {\r\n            en: 'Impact resistant',\r\n            ru: 'Прочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '',\r\n            ru: ''\r\n        }\r\n    },\r\n    soft: {\r\n        name: {\r\n            en: 'Soft',\r\n            ru: 'Прочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '',\r\n            ru: ''\r\n        }\r\n    },\r\n    composite: {\r\n        name: {\r\n            en: 'Composite',\r\n            ru: 'Прочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '',\r\n            ru: ''\r\n        }\r\n    },\r\n    resistantUV: {\r\n        name: {\r\n            en: 'UV resistant',\r\n            ru: 'Прочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '',\r\n            ru: ''\r\n        }\r\n    },\r\n    resistantWater: {\r\n        name: {\r\n            en: 'Water resistant',\r\n            ru: 'Прочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '',\r\n            ru: ''\r\n        }\r\n    },\r\n    dissolvable: {\r\n        name: {\r\n            en: 'Dissolvable',\r\n            ru: 'Прочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '',\r\n            ru: ''\r\n        }\r\n    },\r\n    resistantHeat: {\r\n        name: {\r\n            en: 'Heat resistant',\r\n            ru: 'Прочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '°C',\r\n            ru: '°C'\r\n        }\r\n    },\r\n    resistantChemically: {\r\n        name: {\r\n            en: 'Chemically resistant',\r\n            ru: 'Прочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '',\r\n            ru: ''\r\n        }\r\n    },\r\n    resistantFatigue: {\r\n        name: {\r\n            en: 'Fatigue resistant',\r\n            ru: 'Прочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '',\r\n            ru: ''\r\n        }\r\n    },\r\n    cutting: {\r\n        name: {\r\n            en: 'Cutting',\r\n            ru: 'Прочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '',\r\n            ru: ''\r\n        }\r\n    },\r\n    grinding: {\r\n        name: {\r\n            en: 'Grinding',\r\n            ru: 'Прочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '',\r\n            ru: ''\r\n        }\r\n    },\r\n    /*speed: {\r\n        name: {\r\n            en: 'Printing speed',\r\n            ru: 'Прочность'\r\n        },\r\n        tip: {\r\n            en: 'The maximum stress that a material can withstand without breaking.',\r\n            ru: 'Максимальная нагрузка, которую материал может выдержать без разрушения.'\r\n        },\r\n        unit: {\r\n            en: '',\r\n            ru: ''\r\n        }\r\n    },*/\r\n}\r\n","import './svg-inserter.scss'\r\n\r\nexport type TSvgTypes = 'minus' | 'ok' | 'con' | 'pro' | 'plus' | 'question'\r\n\r\ninterface ISvgInserter {\r\n    type: TSvgTypes\r\n    value?: number\r\n    color?: string\r\n\r\n}\r\n\r\n\r\nconst SvgInserter: React.FC<ISvgInserter> = ({color, type, value}): JSX.Element => {\r\n    let icon: JSX.Element\r\n    \r\n    switch (type) {\r\n        case 'minus':\r\n            icon = <svg className={`svg-icon ${type}`} xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" viewBox=\"0 0 1000 1000\" enableBackground=\"new 0 0 1000 1000\" xmlSpace=\"preserve\"  fill={color ? color : '#FFAAAA'}>\r\n                    <path d=\"M867.5,377.5h-735C64.9,377.5,10,432.4,10,500s54.9,122.5,122.5,122.5h735c67.6,0,122.5-54.9,122.5-122.5S935.1,377.5,867.5,377.5z\"/>\r\n                </svg>\r\n            break;\r\n        case 'plus':\r\n            icon = <svg className={`svg-icon ${type}`} version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" viewBox=\"0 0 1000 1000\" enableBackground=\"new 0 0 1000 1000\" xmlSpace=\"preserve\" fill={color ? color : '#41AD49'}>\r\n                    <path d=\"M990,500c0,56.3-45.6,101.9-101.9,101.9H601.9v286.2c0,56.3-45.6,101.9-101.9,101.9c-56.3,0-101.9-45.6-101.9-101.9V601.9H111.9C55.6,601.9,10,556.3,10,500c0-56.3,45.6-101.9,101.9-101.9h286.2V111.9C398.1,55.6,443.7,10,500,10c56.3,0,101.9,45.6,101.9,101.9v286.2h286.2C944.4,398.1,990,443.7,990,500z\"/>\r\n                </svg>\r\n            break;\r\n        case 'pro':\r\n            icon = <svg className={`svg-icon ${type}`} version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 512 512\" fill={color ? color : '#41AD49'}>\r\n                    <path d=\"M26.636 280.832l51.12-51.090 102.225 102.282-51.12 51.091-102.225-102.282z\" />\r\n                    <path d=\"M179.996 331.976l254.25-254.25 51.12 51.12-254.25 254.25-51.12-51.12z\" />\r\n                    <path d=\"M180.006 434.245l-51.141-51.141 51.12-51.12 51.141 51.141-51.119 51.12z\" />\r\n                </svg>\r\n            break;\r\n        case 'con':\r\n            icon = <svg className={`svg-icon ${type}`} version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" viewBox=\"0 0 174.239 174.239\" xmlSpace=\"preserve\" fill={color ? color : '#FF0000'}>\r\n                    <path d=\"M146.537,1.047c-1.396-1.396-3.681-1.396-5.077,0L89.658,52.849c-1.396,1.396-3.681,1.396-5.077,0L32.78,1.047 \r\n                            c-1.396-1.396-3.681-1.396-5.077,0L1.047,27.702c-1.396,1.396-1.396,3.681,0,5.077l51.802,51.802c1.396,1.396,1.396,3.681,0,5.077\r\n                        L1.047,141.46c-1.396,1.396-1.396,3.681,0,5.077l26.655,26.655c1.396,1.396,3.681,1.396,5.077,0l51.802-51.802\r\n                        c1.396-1.396,3.681-1.396,5.077,0l51.801,51.801c1.396,1.396,3.681,1.396,5.077,0l26.655-26.655c1.396-1.396,1.396-3.681,0-5.077\r\n                        l-51.801-51.801c-1.396-1.396-1.396-3.681,0-5.077l51.801-51.801c1.396-1.396,1.396-3.681,0-5.077L146.537,1.047z\"/>\r\n                </svg>\r\n            break;\r\n        case 'question':\r\n            icon = <svg className={`svg-icon ${type}`} version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"800px\" height=\"800px\" viewBox=\"0 0 973.1 973.1\" xmlSpace=\"preserve\">\r\n                    <path d=\"M502.29,788.199h-47c-33.1,0-60,26.9-60,60v64.9c0,33.1,26.9,60,60,60h47c33.101,0,60-26.9,60-60v-64.9\r\n                        C562.29,815,535.391,788.199,502.29,788.199z\"/>\r\n                    <path d=\"M170.89,285.8l86.7,10.8c27.5,3.4,53.6-12.4,63.5-38.3c12.5-32.7,29.9-58.5,52.2-77.3c31.601-26.6,70.9-40,117.9-40\r\n                        c48.7,0,87.5,12.8,116.3,38.3c28.8,25.6,43.1,56.2,43.1,92.1c0,25.8-8.1,49.4-24.3,70.8c-10.5,13.6-42.8,42.2-96.7,85.9\r\n                        c-54,43.7-89.899,83.099-107.899,118.099c-18.4,35.801-24.8,75.5-26.4,115.301c-1.399,34.1,25.8,62.5,60,62.5h49\r\n                        c31.2,0,57-23.9,59.8-54.9c2-22.299,5.7-39.199,11.301-50.699c9.399-19.701,33.699-45.701,72.699-78.1\r\n                        C723.59,477.8,772.79,428.4,795.891,392c23-36.3,34.6-74.8,34.6-115.5c0-73.5-31.3-138-94-193.4c-62.6-55.4-147-83.1-253-83.1\r\n                        c-100.8,0-182.1,27.3-244.1,82c-52.8,46.6-84.9,101.8-96.2,165.5C139.69,266.1,152.39,283.5,170.89,285.8z\"/>\r\n                </svg>\r\n            break;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        default:\r\n            icon = <></>\r\n            break;\r\n    }\r\n\r\n    return icon\r\n}\r\n\r\n\r\nexport default SvgInserter","import { useEffect, useRef } from \"react\"\r\nimport './rating-line.scss'\r\n\r\ninterface IRatingLine {\r\n    colorValue?: string\r\n    value: number\r\n    min: number\r\n    max: number\r\n    text: string\r\n    measurment: string\r\n}\r\n\r\nconst RatingLine: React.FC<IRatingLine> = ({colorValue, value, min, max, text, measurment}): JSX.Element => {\r\n    const _rating = useRef<HTMLDivElement>(null)\r\n    const _value = useRef<HTMLDivElement>(null)\r\n\r\n\r\n    useEffect(() => {\r\n        if (!_rating.current || !_value.current) return\r\n        const percent = 100 * value / (max-min);\r\n        _value.current.style.width = `${percent}%`;\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"rating_value\" ref={_rating}>\r\n            <div className=\"value__container\">\r\n                <div className={`rating__value ${colorValue ? `color_${colorValue}` : ''}`} ref={_value}></div>\r\n                <div className=\"border_inner border_inner_1\"></div>\r\n                <div className=\"border_inner border_inner_2\"></div>\r\n                <div className=\"border_inner border_inner_3\"></div>\r\n                <div className=\"border_inner border_inner_4\"></div>\r\n            </div>\r\n\r\n\r\n            <div className=\"rating__legend\">\r\n                <span>{text}<span>{measurment}</span></span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default RatingLine","import { useEffect, useRef } from \"react\"\r\nimport './rating-money.scss'\r\n\r\ninterface IRatingMoney {\r\n    colorValue?: string\r\n    value: number\r\n    max: number\r\n    text: string\r\n    measurment: string\r\n}\r\n\r\nconst RatingMoney: React.FC<IRatingMoney> = ({colorValue, value, max, text, measurment}): JSX.Element => {\r\n    const _rating = useRef<HTMLDivElement>(null)\r\n    const _value = useRef<HTMLDivElement>(null)\r\n    \r\n\r\n    useEffect(() => {\r\n        /*if (!_rating.current || !_value.current) return\r\n        const percent = 100 * value / (max-min);\r\n        _value.current.style.width = `${percent}%`;*/\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"rating_money\" ref={_rating}>\r\n            <div className=\"money__container\">\r\n                {Array(value).fill('').map((item, i) => {\r\n                    return (\r\n                        <div className=\"img__container\" key={i}>\r\n                            <svg className={i >= value ? \"faded\" : ``} xmlns=\"http://www.w3.org/2000/svg\" fill=\"transparent\" stroke=\"#000\" viewBox=\"100 0 300 500\">\r\n                                <path strokeWidth=\"45\" d=\"m119,312c4,70 58,111 130,110c78,1 129,-34 125,-101c-11,-61 -78,-69 -122,-79c-48,-16 -118,-16 -117,-89c-1,-53 59,-84 117,-78c60,1 111,32 112,96\"/>\r\n                                <path strokeWidth=\"35\" d=\"m221,17l0,464m63,0l0,-464\"/>\r\n                            </svg>\r\n                        </div>\r\n                    )\r\n                })}\r\n\r\n            </div>\r\n\r\n            <div className=\"rating__legend\">\r\n                <span>{text}<span>{measurment}</span></span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default RatingMoney","import './FibersCompare.scss'\r\nimport { AnyAction, bindActionCreators, Dispatch } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { TLang, IFullState, IFibersState, IColorsState, IColor, TLangText, IFiber, IPropertyTypes } from \"../../interfaces\";\r\nimport { useEffect, useState, Fragment } from 'react'; \r\nimport Preloader from 'src/components/Preloaders/Preloader';\r\nimport { loadFibers, setShowListFibers, setSelectedFiber }  from \"../../redux/actions/fibers\"\r\nimport { loadColors }  from \"../../redux/actions/colors\"\r\nimport { NavLink } from 'react-router-dom';\r\nimport SvgInserter from 'src/components/tiny/SvgInserter/SvgInserter';\r\nimport RatingLine from 'src/components/tiny/RatingLine/RatingLine';\r\nimport RatingMoney from 'src/components/tiny/RatingMoney/RatingMoney';\r\nimport { propertiesList, propertiesValues } from 'src/assets/data/fibers';\r\n\r\nconst actionsListFibers = { loadFibers, setShowListFibers, setSelectedFiber }\r\nconst actionsListColors = { loadColors }\r\n\r\ninterface IPropsState {\r\n    lang: TLang,\r\n    fibers: IFibersState\r\n    colors: IColorsState\r\n}\r\n\r\ninterface IPropsActions {\r\n    setState: {\r\n        fibers: typeof actionsListFibers\r\n        colors: typeof actionsListColors\r\n    }\r\n}\r\n\r\ninterface IProps extends IPropsState, IPropsActions {}\r\n\r\nconst FibersCompare:React.FC<IProps> = ({lang, fibers, colors, setState}):JSX.Element => {\r\n\r\n    const [loaded, setLoaded] = useState<boolean>(false)\r\n    const [filtered, setFiltered] = useState<boolean>(false)\r\n    const [selectError, setSelectError] = useState<boolean>(false)\r\n    const [selectedMore, setSelectedMore] = useState<boolean>(false)\r\n    const [selectedProperty, setSelectedProperty] = useState<IPropertyTypes>()\r\n\r\n    useEffect(() => {\r\n        if (fibers.dataLoading.status === 'idle') {\r\n            setState.fibers.loadFibers()\r\n            setLoaded(false)\r\n        }\r\n        if (colors.dataLoading.status === 'idle') {\r\n            setState.colors.loadColors()\r\n            setLoaded(false)\r\n        }\r\n        if (colors.dataLoading.status === 'success' && fibers.dataLoading.status === 'success') {\r\n            setState.fibers.setShowListFibers(fibers.fibersList.map(fiber => fiber.id))\r\n            setLoaded(true)\r\n        }\r\n    }, [colors.dataLoading?.status, fibers.dataLoading?.status])\r\n   \r\n\r\n\r\n    const clearCheckboxes = () => {\r\n        Array.from(document.querySelectorAll('[data-fiberselect]')).forEach(item => (item as HTMLInputElement).checked = false)\r\n    }\r\n\r\n\r\n    const compareSelected =() => {\r\n        const selectedFibers:IFiber['id'][] = Array.from(document.querySelectorAll('[data-fiberselect]'))\r\n            .filter(item => (item as HTMLInputElement).checked)\r\n            .map(input => (input as HTMLInputElement).dataset.fiberselect as IFiber['id']) \r\n        if (selectedFibers.length < 2) {\r\n                setSelectError(true)\r\n            return\r\n        }\r\n        setState.fibers.setShowListFibers(selectedFibers)\r\n        setFiltered(true)\r\n        clearCheckboxes()\r\n        setSelectedMore(false)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {setSelectError(false)}, 3000)\r\n    }, [selectError])\r\n\r\n\r\n    const clearSelected = () => {\r\n        setFiltered(false)  \r\n        setState.fibers.setShowListFibers(fibers.fibersList.map(fiber => fiber.id))\r\n        clearCheckboxes()\r\n    }\r\n\r\n\r\n\r\n    const onCheckbox = () => {\r\n        setSelectError(false)\r\n        if (filtered) {\r\n            setSelectedMore(true)\r\n        }\r\n    }\r\n\r\n\r\n    const onCellClick = (id: IFiber['id'], propertyName: IPropertyTypes | '') => { //\r\n        setState.fibers.setSelectedFiber(id)\r\n        if (propertyName) {\r\n            setSelectedProperty(propertyName)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"page page_compare\">\r\n            <div className=\"container_page\">\r\n                <div className=\"container_compare\">\r\n                    <h1>{lang === 'en' ? 'Filaments comparison' : 'Сравнение филаментов'}</h1>\r\n                    <div className=\"table__container\">\r\n                        {loaded ? \r\n                            <div className=\"table\">\r\n                                <div className=\"cell row-name fixed-left\">\r\n                                    <span></span>\r\n                                </div>\r\n                                \r\n                                <div className=\"cell row-name fixed-left selectors\">\r\n                                    {(filtered && !selectedMore) && <button className='button_blue' onClick={clearSelected}>{lang === 'en' ? 'Show all' : 'Показать все'}</button>}\r\n                                    {(!filtered || selectedMore) && <button className='button_blue' onClick={compareSelected}>{lang === 'en' ? 'Compare' : 'Сравнить'}</button>}\r\n                                       \r\n                                        {selectError && <span className='error-message'>{lang === 'en' ? `select 2 or more` : `выберите 2 или более`}</span>}\r\n                                </div>\r\n                                {propertiesList.map((property) => {\r\n                                    return (\r\n                                        <div className=\"cell row-name fixed-left with-tip padding_no\" key={property}>\r\n                                            <NavLink \r\n                                                key={property}\r\n                                                to='/fibers'>\r\n                                                    <span>{propertiesValues[property].name[lang]}</span>\r\n                                                    <div className='tip' title={propertiesValues[property].tip[lang]}>\r\n                                                        <SvgInserter type={'question'}/>\r\n                                                    </div>\r\n                                            </NavLink>\r\n                                        </div>\r\n                                    )\r\n                                })}\r\n                                <div className=\"cell row-name fixed-left row-name_last\">\r\n                                    <span></span>\r\n                                </div>\r\n\r\n\r\n                                {fibers.fibersList\r\n                                    .filter(fiber => fibers.showList.includes(fiber.id))\r\n                                    .map((fiber, i) => {\r\n                                    return (\r\n                                    <Fragment key={fiber.id}>\r\n                                        <div className={`cell col-name ${fiber.id === fibers.selected ? \"selected\" : \"\"}`} onClick={e => onCellClick(fiber.id, '')} >\r\n                                            <div className=\"img__container\">\r\n                                                <img src={fiber.imgs[0].url} alt={fiber.imgs[0].name[lang]} />\r\n                                                <span>{fiber.short.name[lang]}</span>\r\n                                            </div>\r\n                                            <NavLink \r\n                                                to={`../${fiber.id}`}\r\n                                                className='button_blue'\r\n                                                >\r\n                                                    {lang === 'en' ? 'Learn more' : 'Подробнее'}\r\n                                            </NavLink>\r\n                                        </div>\r\n                                        <div className={`cell cell_checkbox ${fiber.id === fibers.selected ? \"selected\" : \"\"}`}>\r\n                                            <label>\r\n                                                <input type=\"checkbox\" data-fiberselect={fiber.id} onChange={onCheckbox}/>\r\n                                                <span></span>\r\n                                            </label>\r\n                                        </div>\r\n                                        {propertiesList.map((property, i) => {\r\n                                            return (\r\n                                                <div className={`cell ${fiber.id === fibers.selected ? 'selected' : ''} ${selectedProperty === property ? 'selected' : ''}`} key={`${fiber.id}-${property}`}  onClick={e => onCellClick(fiber.id, property)}>\r\n                                                    {property === \"strength\" && <div className=\"rating__container\"><RatingLine colorValue='blue' min={0} max={180} value={fiber.params[property]} text={`${fiber.params[property]}`} measurment={lang === 'en' ? ' MPa' : ' МПа'}/></div>}\r\n                                                    {property === \"stiffnes\" && <div className=\"rating__container\"><RatingLine colorValue='red' min={0} max={10} value={fiber.params[property]} text={`${fiber.params[property]}`} measurment={' / 10'}/></div>}\r\n                                                    {property === \"durability\" && <div className=\"rating__container\"><RatingLine colorValue='green' min={0} max={10} value={fiber.params[property]} text={`${fiber.params[property]}`} measurment={' / 10'}/></div>}\r\n                                                    {property === \"resistantImpact\" && <div className=\"rating__container\"><RatingLine colorValue='lilac' min={0} max={10} value={fiber.params[property]} text={`${fiber.params[property]}`} measurment={' / 10'}/></div>}\r\n                                                    {(property === \"minTemp\" || property === \"maxTemp\" || property === \"thermalExpansion\" || property === \"density\") && <span>{fiber.params[property]} <span>{propertiesValues[property].unit[lang]}</span></span>}\r\n                                                    {(property === \"flexible\" \r\n                                                    || property === \"elastic\"\r\n                                                    || property === \"soft\"\r\n                                                    || property === \"composite\"\r\n                                                    || property === \"resistantUV\"\r\n                                                    || property === \"resistantWater\"\r\n                                                    || property === \"dissolvable\"\r\n                                                    || property === \"resistantHeat\"\r\n                                                    || property === \"resistantChemically\"\r\n                                                    || property === \"resistantFatigue\"\r\n                                                    || property === \"cutting\"\r\n                                                    || property === \"grinding\"\r\n                                                    ) && <SvgInserter type={fiber.params[property] === 2 ? 'plus' : fiber.params[property] === 0 ? 'minus' : 'con'}/>}\r\n                                                    {/*property === \"speed\" && <span>{fiber.params.speed}</span>*/}\r\n                                                    {property === \"price\" && <RatingMoney value={fiber.params.price} max={5} text={``} measurment={''} />}\r\n                                                    \r\n                                                </div>\r\n                                            )\r\n                                        })}\r\n                                        <div className={`cell col-name_last  ${fiber.id === fibers.selected ? \"selected\" : \"\"}`} onClick={e => onCellClick(fiber.id, '')}>\r\n                                            <span>{fiber.short.name[lang]}</span>\r\n                                        </div>\r\n\r\n                                    </Fragment>\r\n                                    )\r\n                                })}\r\n                            </div>\r\n                        :\r\n                            <Preloader />\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state: IFullState): IPropsState  => ({\r\n    lang: state.base.lang,\r\n    fibers: state.fibers,\r\n    colors: state.colors\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): IPropsActions => ({\r\n    setState: {\r\n\t\tfibers: bindActionCreators(actionsListFibers, dispatch),\r\n\t\tcolors: bindActionCreators(actionsListColors, dispatch)\r\n\t}\r\n})\r\n    \r\nexport default connect(mapStateToProps, mapDispatchToProps)(FibersCompare)"],"names":["propertiesList","propertiesValues","strength","name","en","ru","tip","unit","stiffnes","durability","minTemp","maxTemp","thermalExpansion","density","price","flexible","elastic","resistantImpact","soft","composite","resistantUV","resistantWater","dissolvable","resistantHeat","resistantChemically","resistantFatigue","cutting","grinding","_ref","icon","color","type","value","_jsx","className","xmlns","x","y","viewBox","enableBackground","xmlSpace","fill","children","d","version","_jsxs","width","height","_Fragment","colorValue","min","max","text","measurment","_rating","useRef","_value","useEffect","current","percent","style","ref","Array","map","item","i","stroke","strokeWidth","actionsListFibers","loadFibers","setShowListFibers","setSelectedFiber","actionsListColors","loadColors","connect","state","lang","base","fibers","colors","dispatch","setState","bindActionCreators","_colors$dataLoading","_fibers$dataLoading","loaded","setLoaded","useState","filtered","setFiltered","selectError","setSelectError","selectedMore","setSelectedMore","selectedProperty","setSelectedProperty","dataLoading","status","fibersList","fiber","id","clearCheckboxes","from","document","querySelectorAll","forEach","checked","setTimeout","onCheckbox","onCellClick","propertyName","onClick","clearSelected","compareSelected","selectedFibers","filter","input","dataset","fiberselect","length","property","NavLink","to","title","SvgInserter","showList","includes","Fragment","selected","e","src","imgs","url","alt","short","onChange","RatingLine","params","RatingMoney","Preloader"],"sourceRoot":""}