{"version":3,"file":"static/js/165.40e1ecf9.chunk.js","mappings":"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","sources":["assets/js/ImgWithPreloader.tsx","redux/mocks/categoriesList.ts","redux/actions/catalog.ts","components/Gallery/Gallery.tsx","components/Spliders/Single/SpliderSingle.tsx","components/CategoriesList/CategoriesList.tsx","components/CatalogIntro/CatalogIntro.tsx","pages/Catalog/Catalog.tsx","redux/actions/product.ts"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport Preloader from \"../../components/Preloaders/Preloader\";\r\n\r\ninterface IProps {\r\n\tsrc: string\r\n\talt: string\r\n\tid?: string\r\n}\r\n\r\n\r\nconst ImgWithPreloader: React.FC<IProps> = ({src, alt, id}: IProps):JSX.Element => {\r\n\r\n\tconst [loaded, setLoaded] = useState(false);\r\n\tconst img = useRef<HTMLImageElement>(null);\r\n\r\n\tconst hasLoaded = () => {\r\n\t\tsetLoaded(true)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{loaded || <Preloader />}\r\n\t\t\t<img ref={img} src={src} alt={alt} onLoad={hasLoaded} style={{display: loaded ? \"block\" : \"none\"}} id={id} />\r\n\t\t</>\r\n\t);\r\n};\r\n\r\n\r\nexport default ImgWithPreloader;","import { ICategoriesListItem } from \"src/interfaces\"\r\n\r\nconst mockCategoriesList = [\r\n    {\r\n        id: 'auto',\r\n        name: {\r\n            en: 'Auto/moto',\r\n            ru: 'Авто/мото'\r\n        },\r\n    },\r\n    {\r\n        id: 'c2',\r\n        name: {\r\n            en: 'Toys',\r\n            ru: 'Игрушки'\r\n        },\r\n    },\r\n    {\r\n        id: 'c3',\r\n        name: {\r\n            en: 'Test',\r\n            ru: 'Тест'\r\n        },\r\n    },\r\n    {\r\n        id: 'c4',\r\n        name: {\r\n            en: 'Decor',\r\n            ru: 'Декор'\r\n        },\r\n    }\r\n] satisfies ICategoriesListItem[]\r\n\r\n\r\n\r\nexport default mockCategoriesList","import { IAction, ICatalogState, ICategoriesListItem, ICategory, IDispatch, IProduct, TLangText } from \"src/interfaces\"\r\nimport mockProducts from '../mocks/catalogFull'\r\nimport mockFibers from '../mocks/fibers'\r\nimport { actionsListCatalog } from './actionsList'\r\nimport mockCategoriesList from \"../mocks/categoriesList\"\r\n\r\nexport const setLoadDataStatusCategoriesList = <T extends ICatalogState[\"categoriesListLoading\"]>(payload: T):IAction<T> => ({\r\n    type: actionsListCatalog.SET_LOAD_DATA_STATUS_CATEGORIES_LIST,\r\n    payload\r\n});\r\n\r\n\r\nexport const setSelectedCategory = <T extends ICatalogState[\"selectedCategory\"]>(payload: T):IAction<T> => ({\r\n    type: actionsListCatalog.SET_SELECTED_CATEGORY,\r\n    payload\r\n});\r\n\r\nexport const setSelectedProduct = <T extends ICatalogState[\"selectedProduct\"]>(payload: T):IAction<T> => ({\r\n    type: actionsListCatalog.SET_SELECTED_PRODUCT,\r\n    payload\r\n});\r\n\r\n\r\nexport const setCategoriesList = <T extends ICategoriesListItem[]>(payload: T):IAction<T> => ({\r\n    type: actionsListCatalog.SET_DATA_CATEGORIES_LIST,\r\n    payload\r\n});\r\n\r\n\r\nexport const loadCategoriesList = () => {\r\n    return async function(dispatch: IDispatch) {\r\n        dispatch(setLoadDataStatusCategoriesList({status: 'loading', message: `Loading categories list`}))\r\n        try {\r\n            new Promise((res, rej) => {\r\n                setTimeout(() => {\r\n                    const categoriesList: ICategoriesListItem[] = mockCategoriesList;\r\n                    if (categoriesList) {\r\n                        console.log('CategoriesList list loaded');\r\n                        res(categoriesList)\r\n                    } else (\r\n                        rej({mesasage: `CategoriesList not found`})\r\n                    )\r\n                }, 200)\r\n            }).then((data) => {\r\n                dispatch(setCategoriesList(data as ICategoriesListItem[]))\r\n                dispatch(setLoadDataStatusCategoriesList({status: 'success', message: `Categories list loaded`}))\r\n            }).catch(err => {\r\n                dispatch(setLoadDataStatusCategoriesList({status: 'error', message: `ERROR while loading categories list: ${err}`}))\r\n            })\r\n\r\n        } catch (e) {\r\n            dispatch(setLoadDataStatusCategoriesList({status: 'error', message: `ERROR while loading categories list: ${e}`}))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const setLoadDataStatusCategory = <T extends Pick<ICategory, \"dataLoading\" | \"id\">>(payload: T):IAction<T> => ({\r\n    type: actionsListCatalog.SET_LOAD_DATA_STATUS_CATEGORY,\r\n    payload\r\n});\r\n\r\n\r\nexport const setCategory = <T extends Omit<ICategory, \"dataLoading\">>(payload: T):IAction<T> => ({\r\n    type: actionsListCatalog.SET_DATA_CATEGORY,\r\n    payload\r\n});\r\n\r\n\r\nexport const loadCategory = (id: ICategory[\"id\"]) => {    \r\n    return async function(dispatch: IDispatch) {\r\n        dispatch(setLoadDataStatusCategory({ dataLoading: {status: 'loading', message: `Loading category id: ${id}`}, id: id}))\r\n        try{\r\n            const receivedProducts: Omit<IProduct, \"colors\">[] = await new Promise((res, rej) => {\r\n                setTimeout(() => {\r\n                    const products: Omit<IProduct, \"colors\">[] = mockProducts.filter(product => \r\n                        product.categoryId === id)\r\n                    if (products) {\r\n                        res(products)\r\n                    } else {\r\n                        rej(`Category ${id} is empty`)\r\n                    }\r\n                    console.log(`category ${id} loaded`);\r\n                }, 200)\r\n            })\r\n            \r\n            \r\n            //create array of unique colors\r\n            /*const productsWithColors = await receivedProducts.map(product => {\r\n                const currentColors: IColors[] = [] \r\n                product.fibers.forEach(fiber => {\r\n                    mockFibers.find(item => item.id === fiber)?.colors.forEach(color => {\r\n                        if (!currentColors.find(existedColor => existedColor.value === color.value)) {\r\n                            currentColors.push(color)\r\n                        }\r\n                    })\r\n                })\r\n                return {\r\n                    ...product,\r\n                    colors: currentColors\r\n                }\r\n            })*/\r\n            const categoryName: TLangText = mockCategoriesList.find(category => category.id === id)?.name || {en: 'Other', ru: 'Другое'}\r\n            const data: Omit<ICategory, \"dataLoading\"> = {\r\n                id,\r\n                name: categoryName,\r\n                products: receivedProducts,\r\n                page: 0,\r\n            }              \r\n            dispatch(setCategory(data))\r\n            dispatch(setLoadDataStatusCategory({ dataLoading: {status: 'success', message: `Loaded category id: ${id}`}, id: id}))\r\n\r\n        } catch(err) {\r\n            dispatch(setLoadDataStatusCategory({ dataLoading: {status: 'error', message: `ERROR while loading category id=${id}: error:${err}`}, id: id}))\r\n        }\r\n\r\n    }\r\n}\r\n\r\n/*\r\nexport const loadCategory = (id: ICategory[\"id\"]) => {    \r\n    return async function(dispatch: IDispatch) {\r\n        dispatch(setLoadDataStatusCategory({ dataLoading: {status: 'loading', message: `Loading category id: ${id}`}, id: id}))\r\n        try{\r\n            const receivedProducts: IProductShort[] = await new Promise((res, rej) => {\r\n                setTimeout(() => {\r\n                    const products: IProductShort[] = mockProducts\r\n                        .filter(product => product.categoryId === id)\r\n                        .map(product => {\r\n                            return {\r\n                                id: product.id,\r\n                                price: product.price,\r\n                                name: product.name,\r\n                                img: product.imgs[0]\r\n                            }\r\n                        })\r\n                    if (products) {\r\n                        res(products)\r\n                    } else {\r\n                        rej(`Category ${id} is empty`)\r\n                    }\r\n                    console.log(`category ${id} loaded`);\r\n                }, 200)\r\n            })\r\n            \r\n\r\n            const categoryName: TLangText = mockCategoriesList.find(category => category.id === id)?.name || {en: 'Other', ru: 'Другое'}\r\n            const data: Omit<ICategory, \"dataLoading\"> = {\r\n                id,\r\n                name: categoryName,\r\n                products: receivedProducts,\r\n                page: 0,\r\n            }              \r\n            dispatch(setCategory(data))\r\n            dispatch(setLoadDataStatusCategory({ dataLoading: {status: 'success', message: `Loaded category id: ${id}`}, id: id}))\r\n\r\n        } catch(err) {\r\n            dispatch(setLoadDataStatusCategory({ dataLoading: {status: 'error', message: `ERROR while loading category id=${id}: error:${err}`}, id: id}))\r\n        }\r\n\r\n    }\r\n}\r\n*/\r\n\r\n\r\nexport const setPage = <T extends ICategory[\"page\"]>(payload: T):IAction<T> => ({\r\n    type: actionsListCatalog.SET_PAGE,\r\n    payload\r\n});\r\n","import './gallery.scss'\r\nimport { AnyAction, bindActionCreators } from \"redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport Preloader from 'src/components/Preloaders/Preloader';\r\nimport { IFibersState, IFullState, IProduct, TLang } from \"src/interfaces\";\r\nimport { useEffect } from 'react';\r\nimport ImgWithPreloader from 'src/assets/js/ImgWithPreloader';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { setCategoriesList, setLoadDataStatusCategoriesList, setLoadDataStatusCategory, setSelectedCategory, setSelectedProduct, loadCategoriesList, loadCategory }  from \"src/redux/actions/catalog\"\r\nimport { setProduct, setLoadDataStatusProduct }  from \"src/redux/actions/product\"\r\n\r\nconst actionsListCatalog = { setCategoriesList, setLoadDataStatusCategoriesList, setLoadDataStatusCategory, setSelectedCategory, setSelectedProduct, loadCategoriesList, loadCategory  }\r\nconst actionsListProduct = { setProduct, setLoadDataStatusProduct  }\r\n\r\ninterface IPropsReceived {\r\n    products: IProduct[]\r\n}\r\n\r\ninterface IPropsState {\r\n\tlang: TLang\r\n}\r\n\r\ninterface IPropsActions {\r\n    setState: {\r\n        catalog: typeof actionsListCatalog,\r\n        product: typeof actionsListProduct\r\n    }\r\n}\r\n\r\ninterface IProps extends IPropsState, IPropsActions, IPropsReceived {}\r\n\r\n\r\nconst Gallery: React.FC<IProps> = ({lang, products, setState}):JSX.Element => {\r\n\r\n    const onClicked = (product: IProduct) => {\r\n        //setState.catalog.setSelectedProduct(product.id)\r\n        setState.product.setLoadDataStatusProduct({status: 'success', message: ''})\r\n        setState.product.setProduct(product)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"gallery__container\">\r\n            {products.map((product):JSX.Element => {\r\n                return (\r\n                    <NavLink\r\n                        to={product.id}\r\n                        key={product.id}\r\n                        onClick={() => onClicked(product)}\r\n                        >\r\n                        <div className='gallery__item' >\r\n                            <div className=\"img__container\">\r\n                                <ImgWithPreloader src={product.imgs[0].url} alt={product.imgs[0].name[lang]}/>\r\n                            </div>\r\n                            <div className=\"descr__container\">\r\n                                <span className='name'>{product.name[lang]}</span>\r\n                                <span className='price'>{lang === 'en' ? 'Price' : 'Цена'}: {product.price[lang]}</span>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </NavLink>\r\n                )\r\n            })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: IFullState): IPropsState => ({\r\n    lang: state.base.lang\r\n})\r\n\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): IPropsActions => ({\r\n    setState: {\r\n\t\tcatalog: bindActionCreators(actionsListCatalog, dispatch),\r\n\t\tproduct: bindActionCreators(actionsListProduct, dispatch),\r\n\t}\r\n})\r\n  \r\n  \r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Gallery);\r\n\r\n","import './splider-single.scss'\r\nimport { ICategories, ICategoriesListItem, IDataLoading, IFullState, IProduct, ISpliderOptions, TId, TLang,} from \"src/interfaces\";\r\nimport { AnyAction, bindActionCreators } from \"redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport React, { useRef, useEffect, useState, useMemo } from \"react\";\r\nimport Splide from \"@splidejs/splide\";\r\nimport { findBestSuitedImg } from \"src/assets/js/findBestSuitedImg\";\r\nimport { setCategoriesList, setLoadDataStatusCategoriesList, setLoadDataStatusCategory, setSelectedCategory, setSelectedProduct, loadCategoriesList, loadCategory, setPage, setCategory } from \"src/redux/actions/catalog\"\r\nimport Preloader from 'src/components/Preloaders/Preloader';\r\nimport Gallery from 'src/components/Gallery/Gallery';\r\n\r\nconst actionsList = { setCategoriesList, setLoadDataStatusCategoriesList, setLoadDataStatusCategory, setSelectedCategory, setSelectedProduct, loadCategoriesList, loadCategory, setPage, setCategory  }\r\n\r\ninterface IPropsState {\r\n    categoriesList: ICategoriesListItem[]\r\n\tselectedCategory: TId\r\n\tselectedProduct: TId\r\n\tlang: TLang\r\n\tloadingProducts: IDataLoading\r\n\tcategories: ICategories\r\n}\r\n\r\ninterface IPropsActions {\r\n    setState: {\r\n        catalog: typeof actionsList\r\n    }\r\n}\r\n\r\ninterface IProps extends IPropsState, IPropsActions {}\r\n\r\nconst SpliderSingle: React.FC<IProps> = ({lang, selectedCategory, setState, loadingProducts, categories}): JSX.Element => {\r\n\t\r\n\tconst spliderSingle = useRef<Splide>();\r\n\tconst _splideMain = useRef<HTMLDivElement>(null);\r\n\tconst [productSlides, setProductSlides] = useState<IProduct[][]>([[]])\r\n\tconst [productsPerSlide, setProductsPerSlide] = useState<number>(6)\r\n\r\n\tconst optionsMain: Partial<ISpliderOptions> = {\r\n\t\tlazyLoad: false,\r\n\t\tupdateOnMove: true,\r\n\t\tperPage: 1,\r\n\t\tfixedWidth: \"100%\",\r\n\t\tperMove: 1,\r\n\t\tpagination: true,\r\n\t\tarrows: true,\r\n\t\tdrag: false,\r\n\t\tspeed: 500,\r\n\t\twheel: false,\r\n\t\twheelSleep: 300,\r\n\t\tinterval: 0,\r\n\t\tpauseOnHover: true,\r\n\t\tbreakpoints: {\r\n\t\t\t768: {\r\n\t\t\t\twheel: false,\r\n\t\t\t}, \r\n\t\t},\r\n\t};\r\n\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\tif (selectedCategory && !categories[selectedCategory]) {\r\n\t\t\tsetState.catalog.loadCategory(selectedCategory)\r\n\t\t}\r\n\t},[selectedCategory]);\r\n\r\n\r\n\t\r\n\tuseEffect(() => {\r\n\t\tif (categories[selectedCategory]?.dataLoading?.status !== 'success') return\r\n\t\tconst result: IProduct[][] = []\r\n\t\tfor (let i = 0; i < categories[selectedCategory].products.length; i += productsPerSlide) {\r\n\t\t\tresult.push(categories[selectedCategory].products.slice(i, i + productsPerSlide))\r\n\t\t}\r\n\t\tsetProductSlides(result)\r\n\t\t\r\n\t},[categories[selectedCategory]?.dataLoading?.status, selectedCategory]);\r\n\t\r\n\t\r\n\t\r\n\t\r\n\r\n\t\r\n\t\r\n\tuseEffect(() => {\r\n\t\tif (!_splideMain.current) return\r\n\r\n\t\tif (document.body.offsetWidth < 993) {\r\n\t\t\tsetProductsPerSlide(4)\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tspliderSingle.current = new Splide(_splideMain.current, optionsMain);\r\n\t\t\r\n\t\tspliderSingle.current.on( 'pagination:updated', function (data, prev, upd) {\r\n\t\t\tdata.list.classList.add( 'splide__pagination--custom' );\r\n\t\t\tdata.items.forEach((item, i) => {\r\n\t\t\t\tif (i === 0 || i === data.items.length-1 || (i <= upd.page + 1 && i >= upd.page - 1)) {\r\n\t\t\t\t\titem.button.classList.remove('no-display')\r\n\t\t\t\t} else {\r\n\t\t\t\t\titem.button.classList.add('no-display')\r\n\t\t\t\t}\r\n\t\t\t\tif ((i === upd.page+2 && upd.page+2 < data.items.length-1) || (i === upd.page-2 && upd.page-2 > 0)) {\r\n\t\t\t\t\titem.button.textContent = ' ... ';\t\r\n\t\t\t\t\titem.button.classList.remove('no-display')\r\n\t\t\t\t} else {\r\n\t\t\t\t\titem.button.textContent = String(item.page + 1);\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\tspliderSingle.current.on(\"move\", () => {\r\n\t\t\tsetState.catalog.setPage(spliderSingle.current?.index as number)\r\n\t\t});\r\n\r\n\t\tspliderSingle.current.mount();\r\n\r\n\t\tspliderSingle.current?.go(categories[selectedCategory].page);\r\n\r\n\t\t\r\n\t\treturn () => {\r\n\t\t\tspliderSingle.current?.destroy();\r\n\t\t};\r\n\t}, [productSlides])\r\n\r\n\r\n\r\n\r\n\treturn (\r\n\t\t<div className=\"splider_single__container\">\r\n\t\t\t{loadingProducts?.status === 'success' ? \r\n\t\t\t\t<div className=\"splide splider_single\" ref={_splideMain} aria-label=\"\">\r\n\t\t\t\t\t<div className=\"splide__track\">\r\n\t\t\t\t\t\t<ul className=\"splide__list\">\r\n\t\t\t\t\t\t\t{productSlides.map((products, i): JSX.Element => {\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<li className=\"splide__slide\" key={i}>\r\n\t\t\t\t\t\t\t\t\t\t<Gallery products={products}/>\r\n\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t:\r\n\t\t\t\t<Preloader />}\r\n\t\t</div>\r\n\t)\r\n\r\n};\r\n\r\n\r\nconst mapStateToProps = (state: IFullState): IPropsState => ({\r\n    lang: state.base.lang,\r\n\tloadingProducts: state.catalog.categories[state.catalog.selectedCategory]?.dataLoading,\r\n\tcategoriesList: state.catalog.categoriesList,\r\n\tselectedCategory: state.catalog.selectedCategory,\r\n\tcategories: state.catalog.categories,\r\n\tselectedProduct: state.catalog.selectedProduct,\r\n})\r\n\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): IPropsActions => ({\r\n    setState: {\r\n\t\tcatalog: bindActionCreators(actionsList, dispatch)\r\n\t}\r\n})\r\n  \r\n  \r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SpliderSingle);\r\n","import \"./categories-list.scss\";\r\nimport { ICategoriesListItem, IDataLoading, IFullState, TId, TLang } from \"src/interfaces\";\r\nimport { AnyAction, bindActionCreators } from \"redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nimport { setCategoriesList, setLoadDataStatusCategoriesList, setLoadDataStatusCategory, setSelectedCategory, setSelectedProduct, loadCategoriesList }  from \"../../redux/actions/catalog\"\r\nimport Preloader from \"../Preloaders/Preloader\";\r\n\r\nconst actionsList = { setCategoriesList, setLoadDataStatusCategoriesList, setLoadDataStatusCategory, setSelectedCategory, setSelectedProduct, loadCategoriesList  }\r\n\r\n\r\ninterface IPropsState {\r\n    list: ICategoriesListItem[]\r\n\tselectedCategory: TId\r\n\tlang: TLang\r\n\tloading: IDataLoading\r\n}\r\n\r\ninterface IPropsActions {\r\n    setState: {\r\n        catalog: typeof actionsList\r\n    }\r\n}\r\n\r\ninterface IProps extends IPropsState, IPropsActions {}\r\n\r\n\r\nconst CatalogList: React.FC<IProps> = ({list, selectedCategory, loading, lang, setState}): JSX.Element => {\r\n\r\n\tconst selectCategory = (id: TId) => {\r\n\t\tsetState.catalog.setSelectedCategory(id)\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tif (loading.status !== 'success') {\r\n\t\t\tsetState.catalog.loadCategoriesList()\r\n\t\t} else {\r\n\t\t\t!selectedCategory && setState.catalog.setSelectedCategory(list[0]?.id)\r\n\t\t}\r\n\t}, [loading.status])\r\n\r\n\treturn(\r\n\t\t<div className=\"categories-list__container\">\r\n\t\t\t<div className=\"list\">\r\n\t\t\t\t{loading.status === 'success' ? \r\n\t\t\t\t<ul>\r\n\t\t\t\t\t{list.map((category: ICategoriesListItem, index: number): JSX.Element => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<li \r\n\t\t\t\t\t\t\t\tkey={category.id} \r\n\t\t\t\t\t\t\t\tclassName={category.id === selectedCategory ? \"selected\" : \"\"}\r\n\t\t\t\t\t\t\t\tonClick={():void => selectCategory(category.id)}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{category.name[lang]}\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</ul>\r\n\t\t\t\t:\r\n\t\t\t\t<Preloader />\r\n\t\t\t}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state: IFullState): IPropsState => ({\r\n    lang: state.base.lang,\r\n\tloading: state.catalog.categoriesListLoading,\r\n\tlist: state.catalog.categoriesList,\r\n\tselectedCategory: state.catalog.selectedCategory\r\n})\r\n\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): IPropsActions => ({\r\n    setState: {\r\n\t\tcatalog: bindActionCreators(actionsList, dispatch)\r\n\t}\r\n})\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CatalogList);","import { connect } from \"react-redux\";\r\nimport React from \"react\";\r\nimport { IFullState, TLang } from \"src/interfaces\";\r\nimport './catalog-intro.scss'\r\nimport catalogPhoto1 from 'src/assets/img/catalog/catalog_hero.webp'\r\nimport ImgWithPreloader from \"src/assets/js/ImgWithPreloader\";\r\n\r\n\r\n\r\n\r\ninterface IPropsState {\r\n    lang: TLang\r\n}\r\n\r\n\r\n\r\nconst CatalogIntro:React.FC<IPropsState> = ({lang}): JSX.Element => {\r\n    return (\r\n        <div className=\"catalog-intro\">\r\n            <h1>{lang === 'en' ? 'Our catalog' : 'Наш каталог'}</h1>\r\n            <div className=\"descr\">\r\n                <div className=\"img__container\">\r\n                    <ImgWithPreloader src={catalogPhoto1} alt={lang === 'en' ? 'Catalog image' : 'Фото каталога'}/>\r\n\r\n                </div>\r\n                <div className=\"descr__text\">\r\n                    <h2>{lang === 'en' ? 'Subheader' : 'Подзаголовок'}</h2>\r\n                    <ul>\r\n                    {lang === 'en' ? \r\n                        <>\r\n                            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quo tempore atque et nostrum qui vitae! Dolor necessitatibus ipsum consectetur optio.</p>\r\n                            <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Necessitatibus, eveniet odit veritatis totam exercitationem id perspiciatis dolores, ipsum quos reprehenderit, consectetur facere harum rerum libero tempore incidunt modi! Placeat cumque quidem velit porro amet quam possimus dolorum eaque exercitationem quod!</p>\r\n                            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quo tempore atque et nostrum qui vitae! Dolor necessitatibus ipsum consectetur optio.</p>\r\n                        </>\r\n                        :\r\n                        <>\r\n                            <p>ВАП в апва ып аволрп ывар лорвыа олывапрловы рпвыадлопрвы аплвоапр лвдаыпр влаорплв ыоарп лвдаырплваыодрплд ывраплва лоаврплвор влапрыдалопвырапл дрываплдывра</p>\r\n                            <p>ВАП в апва ып аволрп ывар лорвыа олывапрловы рпвыадлопрвы аплвоапр лвдаыпр влаорплв ыоарп лвдаырплваыодрплд ывраплва лоаврплвор влапрыдалопвырапл дрываплдывра</p>\r\n                        </> }\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: IFullState): IPropsState => ({\r\n    lang: state.base.lang,\r\n})\r\n\r\n\r\n\r\n\r\nexport default connect(mapStateToProps)(CatalogIntro);","import './catalog.scss'\r\nimport { IDataLoading, IFullState, TLang } from \"src/interfaces\";\r\nimport { AnyAction, bindActionCreators } from \"redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport SpliderSingle from 'src/components/Spliders/Single/SpliderSingle';\r\nimport \"@splidejs/react-splide/css\"; \r\n\r\nimport CategoriesList from 'src/components/CategoriesList/CategoriesList';\r\nimport CatalogIntro from 'src/components/CatalogIntro/CatalogIntro';\r\n\r\nimport { loadColors }  from \"../../redux/actions/colors\"\r\nimport { loadFibers }  from \"../../redux/actions/fibers\"\r\n\r\nconst actionsListColors = { loadColors }\r\nconst actionsListFibers = { loadFibers }\r\n\r\ninterface IPropsState {\r\n    colorsLoading: IDataLoading\r\n    fibersLoading: IDataLoading\r\n}\r\n\r\ninterface IPropsActions {\r\n    setState: {\r\n        colors: typeof actionsListColors,\r\n        fibers: typeof actionsListFibers,\r\n    }\r\n}\r\n\r\ninterface IProps extends IPropsState, IPropsActions {}\r\n\r\n\r\nconst Catalog:React.FC<IProps> = ({colorsLoading, fibersLoading, setState}): JSX.Element => {\r\n\r\n    useEffect(() => {\r\n        if (colorsLoading.status === 'idle') {\r\n            setState.colors.loadColors()\r\n        }\r\n        if (fibersLoading.status === 'idle') {\r\n            setState.fibers.loadFibers()\r\n        }\r\n    }, [])\r\n   \r\n\r\n\r\n    \r\n\r\n    return (\r\n        <div className=\"page page_catalog\">\r\n            <div className=\"container_page\">\r\n                <div className=\"container\">\r\n                    <CatalogIntro />\r\n                    <div className=\"splider_catalog__main\">\r\n                        <CategoriesList />\r\n                        <SpliderSingle />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: IFullState): IPropsState => ({\r\n    colorsLoading: state.colors.dataLoading,\r\n    fibersLoading: state.fibers.dataLoading\r\n})\r\n\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): IPropsActions => ({\r\n    setState: {\r\n\t\tcolors: bindActionCreators(actionsListColors, dispatch),\r\n\t\tfibers: bindActionCreators(actionsListFibers, dispatch),\r\n\t}\r\n})\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(Catalog)\r\n","import { IAction, IProductState, ICategoriesListItem, ICategory, ICategoryReceived, IDispatch, IProduct } from \"src/interfaces\"\r\nimport mockFibers from '../mocks/fibers'\r\nimport catalogFull from \"../mocks/catalogFull\";\r\nimport { actionsListProduct } from './actionsList'\r\nimport mockProducts from \"../mocks/catalogFull\";\r\n\r\n\r\nexport const setLoadDataStatusProduct = <T extends IProductState[\"dataLoading\"]>(payload: T):IAction<T> => ({\r\n    type: actionsListProduct.SET_LOAD_DATA_STATUS_PRODUCT,\r\n    payload\r\n});\r\n\r\n\r\nexport const setProduct = <T extends Omit<IProductState, \"dataLoading\">>(payload: T):IAction<T> => ({\r\n    type: actionsListProduct.SET_DATA_PRODUCT,\r\n    payload\r\n});\r\n/*\r\nexport const setSelectedImage = <T extends IProductState[\"selectedImage\"]>(payload: T):IAction<T> => ({\r\n    type: actionsListProduct.SET_SELECTED_IMAGE,\r\n    payload\r\n});\r\n*/\r\n\r\n\r\nexport const loadProduct = (id: IProduct[\"id\"]) => {\r\n    return async function(dispatch: IDispatch) {\r\n        dispatch(setLoadDataStatusProduct({status: 'loading', message: `Loading product ${id}`}))\r\n        try {\r\n            new Promise((res, rej) => {\r\n                setTimeout(() => {\r\n                    const product = mockProducts.find(product => product.id === id)\r\n                    if (product) {\r\n                        console.log(`product ${id} loaded`);\r\n                        res(product)\r\n                    } else (\r\n                        rej({mesasage: `product ${id} not found`})\r\n                    )\r\n                }, 1000)\r\n            }).then((data) => {\r\n                dispatch(setProduct(data as IProduct))\r\n                dispatch(setLoadDataStatusProduct({status: 'success', message: `Product id=${id} loaded`}))\r\n            }).catch(err => {\r\n                dispatch(setLoadDataStatusProduct({status: 'error', message: `ERROR while loading product id=${id}: ${err}`}))\r\n            })\r\n\r\n        } catch (e) {\r\n            dispatch(setLoadDataStatusProduct({status: 'error', message: `ERROR while loading product id=${id}: ${e}`}))\r\n        }\r\n    }\r\n}\r\n\r\n"],"names":["_ref","src","alt","id","loaded","setLoaded","useState","img","useRef","_jsxs","_Fragment","children","_jsx","Preloader","ref","onLoad","hasLoaded","style","display","name","en","ru","setLoadDataStatusCategoriesList","payload","type","actionsListCatalog","SET_LOAD_DATA_STATUS_CATEGORIES_LIST","setSelectedCategory","SET_SELECTED_CATEGORY","setSelectedProduct","SET_SELECTED_PRODUCT","setCategoriesList","SET_DATA_CATEGORIES_LIST","loadCategoriesList","async","dispatch","status","message","Promise","res","rej","setTimeout","categoriesList","mockCategoriesList","console","log","mesasage","then","data","catch","err","e","setLoadDataStatusCategory","SET_LOAD_DATA_STATUS_CATEGORY","setCategory","SET_DATA_CATEGORY","loadCategory","dataLoading","_mockCategoriesList$f","receivedProducts","products","mockProducts","filter","product","categoryId","categoryName","find","category","page","actionsListProduct","setProduct","setLoadDataStatusProduct","connect","state","lang","base","setState","catalog","bindActionCreators","className","map","NavLink","to","onClick","onClicked","ImgWithPreloader","imgs","url","price","actionsList","setPage","SET_PAGE","_state$catalog$catego","loadingProducts","categories","selectedCategory","selectedProduct","_categories$selectedC3","_categories$selectedC4","spliderSingle","_splideMain","productSlides","setProductSlides","productsPerSlide","setProductsPerSlide","optionsMain","lazyLoad","updateOnMove","perPage","fixedWidth","perMove","pagination","arrows","drag","speed","wheel","wheelSleep","interval","pauseOnHover","breakpoints","useEffect","_categories$selectedC","_categories$selectedC2","result","i","length","push","slice","_spliderSingle$curren2","current","document","body","offsetWidth","Splide","on","prev","upd","list","classList","add","items","forEach","item","button","remove","textContent","String","_spliderSingle$curren","index","mount","go","_spliderSingle$curren3","destroy","Gallery","loading","categoriesListLoading","_list$","selectCategory","catalogPhoto1","actionsListColors","loadColors","actionsListFibers","loadFibers","colorsLoading","colors","fibersLoading","fibers","CatalogIntro","CategoriesList","SpliderSingle","SET_LOAD_DATA_STATUS_PRODUCT","SET_DATA_PRODUCT","loadProduct"],"sourceRoot":""}