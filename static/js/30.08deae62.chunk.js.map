{"version":3,"file":"static/js/30.08deae62.chunk.js","mappings":"+LASA,MAAMA,EAAc,CAACC,UAAS,IAAEC,UAAS,MAgEvC,GAAeC,EAAAA,EAAAA,KAdQC,IAAiB,CACzCC,KAAMD,EAAME,KAAKD,KACdE,UAAWH,EAAME,KAAKC,cAIEC,IAA6B,CACrDC,SAAU,CACZH,MAAMI,EAAAA,EAAAA,IAAmBV,EAAaQ,OAMtC,EA/CoCG,IAA+C,IAA9C,KAACN,EAAI,UAAEE,EAAS,SAAEE,GAASE,EAqB9D,OALAC,EAAAA,EAAAA,YAAU,KACiD,OAAtDC,OAAOC,aAAaC,QAAQ,YAAiCN,EAASH,KAAKL,YAAcQ,EAASH,KAAKJ,WAAW,GACpH,KAICc,EAAAA,EAAAA,MAAA,OAAKC,UAAY,iBAAgBZ,KAAQE,GAAa,SAAUW,QApB1CC,IACT,OAATd,GACAQ,OAAOC,aAAaM,QAAQ,WAAY,MACxCX,EAASH,KAAKJ,YACdiB,EAAEE,cAAcC,UAAUC,IAAI,MAC9BJ,EAAEE,cAAcC,UAAUE,OAAO,QAEjCX,OAAOC,aAAaM,QAAQ,WAAY,MACxCX,EAASH,KAAKL,YACdkB,EAAEE,cAAcC,UAAUC,IAAI,MAC9BJ,EAAEE,cAAcC,UAAUE,OAAO,MACrC,EAS0FC,SAAA,EACtFC,EAAAA,EAAAA,KAAA,OAAKT,UAAU,8BAA8B,YAAU,KAAIQ,SAAC,QAC5DC,EAAAA,EAAAA,KAAA,OAAKT,UAAU,8BAA8B,YAAU,KAAIQ,SAAC,SAC1D,G,wHC/CP,MAAMxB,EAAYA,KAAA,CACrB0B,KAAMC,EAAAA,GAAgBC,cAGb3B,EAAYA,KAAA,CACrByB,KAAMC,EAAAA,GAAgBE,cAObC,EAAgBA,KAAA,CACzBJ,KAAMC,EAAAA,GAAgBI,kBAGbC,EAAeA,KAAA,CACxBN,KAAMC,EAAAA,GAAgBM,iBAGbC,EAAiBA,KAAA,CAC1BR,KAAMC,EAAAA,GAAgBQ,mBAMbC,EAAgBA,KAAA,CACzBV,KAAMC,EAAAA,GAAgBU,mBAGbC,EAAiBA,KAAA,CAC1BZ,KAAMC,EAAAA,GAAgBY,oBASbC,EAAeA,KAAA,CACxBd,KAAMC,EAAAA,GAAgBc,kBAGbC,EAAgBA,KAAA,CACzBhB,KAAMC,EAAAA,GAAgBgB,kB","sources":["components/LangSwitcher/LangSwitcher.tsx","redux/actions/base.ts"],"sourcesContent":["import \"./langSwitcher.scss\"\r\nimport { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { IFullState, TLang, TTheme } from \"src/interfaces\";\r\nimport { setLangEn, setLangRu }  from \"../../redux/actions/base\"\r\nimport { AnyAction, bindActionCreators } from \"redux\";\r\nimport { Dispatch } from \"redux\";\r\n\r\n\r\nconst actionsList = {setLangEn, setLangRu}\r\n\r\n\r\ninterface IPropsState {\r\n    lang: TLang\r\n\tmobOpened: boolean\r\n}\r\n\r\ninterface IPropsActions {\r\n\tsetState: {\r\n\t\tbase: typeof actionsList\r\n\t}\r\n}\r\n\r\ninterface IProps extends IPropsState, IPropsActions {}\r\n\r\n\r\nconst LangSwitcher:React.FC<IProps> = ({lang, mobOpened, setState}): JSX.Element => {\r\n\r\n    const handleChangeLang = (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (lang === 'en') {\r\n            window.localStorage.setItem('language', 'ru')\r\n            setState.base.setLangRu()\r\n            e.currentTarget.classList.add('ru')\r\n            e.currentTarget.classList.remove('en')\r\n        } else {\r\n            window.localStorage.setItem('language', 'en')\r\n            setState.base.setLangEn();\r\n            e.currentTarget.classList.add('en')\r\n            e.currentTarget.classList.remove('ru')\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        (window.localStorage.getItem('language') as TLang) === 'en' ? setState.base.setLangEn() : setState.base.setLangRu()\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className={`lang-switcher ${lang} ${mobOpened || \"hide\"}`} onClick={handleChangeLang}>\r\n            <div className=\"lang-switcher__text lang_ru\" data-lang='ru'>RU</div>\r\n            <div className=\"lang-switcher__text lang_en\" data-lang='en'>EN</div>\r\n        </div>\r\n\r\n        )   \r\n}\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state: IFullState): IPropsState => ({\r\n\tlang: state.base.lang,\r\n    mobOpened: state.base.mobOpened\r\n})\r\n  \r\n  \r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): IPropsActions => ({\r\n    setState: {\r\n\t\tbase: bindActionCreators(actionsList, dispatch)\r\n\t}\r\n\t\r\n})\r\n  \r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(LangSwitcher)","import { IAction } from \"src/interfaces\"\r\nimport { actionsListBase } from './actionsList'\r\n\r\n\r\nexport const setLangEn = <T>(): IAction<T> => ({\r\n    type: actionsListBase.SET_LANG_EN,\r\n})\r\n\r\nexport const setLangRu = <T>(): IAction<T> => ({\r\n    type: actionsListBase.SET_LANG_RU,\r\n})\r\n\r\n\r\n\r\n\r\n\r\nexport const setThemeLight = <T>(): IAction<T> => ({\r\n    type: actionsListBase.SET_THEME_LIGHT,\r\n})\r\n\r\nexport const setThemeDark = <T>(): IAction<T> => ({\r\n    type: actionsListBase.SET_THEME_DARK,\r\n})\r\n\r\nexport const setThemeToggle = <T>(): IAction<T> => ({\r\n    type: actionsListBase.SET_THEME_TOGGLE,\r\n})\r\n\r\n\r\n\r\n\r\nexport const setNavOpenMob = <T>():IAction<T> => ({\r\n    type: actionsListBase.SET_NAV_OPEN_MOB,\r\n});\r\n\r\nexport const setNavCloseMob = <T>():IAction<T> => ({\r\n    type: actionsListBase.SET_NAV_CLOSE_MOB,\r\n});\r\n/*\r\nexport const setNavToggleMob = <T>():IAction<T> => ({\r\n    type: SET_NAV_TOGGLE_MOB,\r\n});\r\n*/\r\n\r\n\r\nexport const setNavOpenDt = <T>():IAction<T> => ({\r\n    type: actionsListBase.SET_NAV_OPEN_DT,\r\n});\r\n\r\nexport const setNavCloseDt = <T>():IAction<T> => ({\r\n    type: actionsListBase.SET_NAV_CLOSE_DT,\r\n});\r\n/*\r\nexport const setNavToggleDt = <T>():IAction<T> => ({\r\n    type: SET_NAV_TOGGLE_DT});\r\n*/\r\n"],"names":["actionsList","setLangEn","setLangRu","connect","state","lang","base","mobOpened","dispatch","setState","bindActionCreators","_ref","useEffect","window","localStorage","getItem","_jsxs","className","onClick","e","setItem","currentTarget","classList","add","remove","children","_jsx","type","actionsListBase","SET_LANG_EN","SET_LANG_RU","setThemeLight","SET_THEME_LIGHT","setThemeDark","SET_THEME_DARK","setThemeToggle","SET_THEME_TOGGLE","setNavOpenMob","SET_NAV_OPEN_MOB","setNavCloseMob","SET_NAV_CLOSE_MOB","setNavOpenDt","SET_NAV_OPEN_DT","setNavCloseDt","SET_NAV_CLOSE_DT"],"sourceRoot":""}