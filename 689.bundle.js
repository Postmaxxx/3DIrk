"use strict";(self.webpackChunk_3dprint=self.webpackChunk_3dprint||[]).push([[689],{7705:(t,e,i)=>{i.r(e),i.d(e,{default:()=>d});var n=i(5893),r=i(7294),h=i(6113),a=i(4791),c=i.p+"assets/images/theme_day__cloud.svg",s=i.p+"assets/images/theme_nigth__star.svg",o=i(6990);const l={setThemeDark:o._Y,setThemeLight:o.Cb,setThemeToggle:o.oz};var d=(0,h.$j)((t=>({mobOpened:t.base.mobOpened,lang:t.base.lang})),(t=>({setState:{base:(0,a.DE)(l,t)}})))((({mobOpened:t,lang:e,setState:i})=>{const h=(0,r.useRef)(null),a=t=>{const e={width:70,height:40,circleSize:14,duration:2e3,theme:"light",numberOfStars:30,nodeForTheme:document.querySelector("body")||void 0,saveState:"",starsBlinkingDuration:[.9,1.2,1.4,1.6,1.8,2.1],starsBlinkingAnimation:"\n\t\t\t\t0% { opacity: .2 }\n\t\t\t\t50% { opacity: .8 }\n\t\t\t\t100% { opacity: .2 }",clouds:[{width:30,gap:15,top:0,speed:7,opacity:1},{width:25,gap:20,top:25,speed:4,opacity:.85},{width:20,gap:20,top:40,speed:5,opacity:.7}]},n={_themeSwitcherContainer:h.current,_themeSwitcher:void 0,_themeSwitcherInput:void 0,width:e.width,height:e.height,circleSize:e.circleSize,duration:e.duration,theme:e.theme,numberOfStars:e.numberOfStars,starsBlinkingDuration:e.starsBlinkingDuration,clouds:e.clouds,starsBlinkingAnimation:e.starsBlinkingAnimation,isChanging:!1,nodeForTheme:e.nodeForTheme,saveState:e.saveState},r=(t,e,i)=>new Promise((r=>{setTimeout((()=>{t&&n._contentSwitcher?.classList.remove(t),e&&n._contentSwitcher?.classList.add(e),r()}),i)})),a=t=>{n.isChanging||(n.saveState&&localStorage.setItem(n.saveState,n.theme),n.isChanging=!0,"light"===t?(i.base.setThemeLight(),n.nodeForTheme?.classList.remove("dark"),r("","theme_light_1",0).then((()=>r("theme_light_1","theme_light_2",(n.duration||1)/4))).then((()=>{r("theme_light_2","theme_light",30),n.isChanging=!1}))):(i.base.setThemeDark(),n.nodeForTheme?.classList.add("dark"),r("theme_light","theme_light_back_1",0).then((()=>r("theme_light_back_1","theme_light_back_2",(n.duration||1)/4))).then((()=>{r("theme_light_back_2","",30),n.isChanging=!1}))))},c=()=>{n.theme="light"===n.theme?"dark":"light",a(n.theme)};return{create:()=>{n._themeSwitcherContainer=t.themeSwitcherContainer,n.star=t.star,n.cloud=t.cloud,n.nodeForTheme=t.nodeForTheme?t.nodeForTheme:e.nodeForTheme,n.width=t.width?t.width:e.width,n.height=t.height?t.height:e.height,n.circleSize=t.circleSize?t.circleSize:e.circleSize,n.duration=t.duration?t.duration:e.duration,n.theme=t.theme?t.theme:e.theme,n.numberOfStars=t.numberOfStars?t.numberOfStars:e.numberOfStars,n.starsBlinkingDuration=t.starsBlinkingDuration?t.starsBlinkingDuration:e.starsBlinkingDuration,n.clouds=t.clouds?t.clouds:e.clouds,n.starsBlinkingAnimation=t.starsBlinkingAnimation?t.starsBlinkingAnimation:e.starsBlinkingAnimation,n.saveState=t.saveState?t.saveState:e.saveState,new Promise((t=>{(t=>{if(!n.width||!n.height||!n.starsBlinkingDuration?.length)return;const e=document.createElement("LABEL");n._themeSwitcherInput=document.createElement("INPUT"),n._themeSwitcherInput.setAttribute("type","checkbox"),n._themeSwitcherInput.setAttribute("aria-label","Change the site theme"),n._themeSwitcher=document.createElement("DIV"),n._themeSwitcher.classList.add("theme-switcher"),e.appendChild(n._themeSwitcherInput),e.appendChild(n._themeSwitcher),n._themeSwitcherContainer?.appendChild(e);const i=document.createElement("div");i.classList.add("content-switcher"),i.classList.add("dark"!==t?"theme_light":""),n._themeSwitcher.appendChild(i);const r=document.createElement("div"),h=document.createElement("div");r.classList.add("dark"),h.classList.add("light"),i.appendChild(r),i.appendChild(h),n._contentSwitcher=i})("light"),(()=>{if(!(n.width&&n.circleSize&&n.height&&n.duration))return;const t=n.width/2-n.circleSize,e=document.createElement("style");document.head.appendChild(e);const i=e.sheet;i.insertRule(`\n\t\t\t\t.theme-switcher > .content-switcher {\n\t\t\t\t\twidth: ${n.width}px;\n\t\t\t\t\theight: ${n.height}px;\n\t\t\t\t\tborder-radius: ${n.height/2}px;\n\t\t\t\t\tposition: relative;\n\t\t\t\t\toverflow: hidden;\n\t\t\t\t\tcursor: pointer;\n\t\t\t\t\t-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n\t\t\t\t}`),i.insertRule("\n\t\t\t\t.theme-switcher > .content-switcher > div {\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\theight: 100%;\n\t\t\t\t\twidth: 100%;\n\t\t\t\t}"),i.insertRule(`\n\t\t\t\t.theme-switcher > .content-switcher > div.light {\n\t\t\t\t\tbackground-color: rgb(100 181 245);\n\t\t\t\t\tclip-path: circle(${n.circleSize}px at ${t}px 50%);\n\t\t\t\t\ttransition: ${n.duration/4}ms cubic-bezier(0,1,0,1);\n\t\t\t\t}`),i.insertRule(`\n\t\t\t\t.theme-switcher > .content-switcher > div.dark {\n\t\t\t\t\ttransition: ${n.duration/4}ms cubic-bezier(0,1,0,1);\n\t\t\t\t\tbackground-color: #002E6E;\n\t\t\t\t}`),i.insertRule(`\n\t\t\t\t.theme-switcher > .content-switcher.theme_light_1 .light {\n\t\t\t\t\ttransition: ${n.duration/4}ms cubic-bezier(1,0,1,0);\n\t\t\t\t\tclip-path: circle(${10*n.width}px at ${t-10*n.width+n.circleSize}px 50%);\n\t\t\t\t}`),i.insertRule(`\n\t\t\t\t.theme-switcher > .content-switcher.theme_light_2 .light {\n\t\t\t\t\ttransition: ${n.duration/4}ms cubic-bezier(1,0,1,0);\n\t\t\t\t\tclip-path: circle(${10*n.width}px at ${t-10*n.width+n.circleSize}px 50%);\n\t\t\t\t}`),i.insertRule(`\n\t\t\t\t.theme-switcher > .content-switcher.theme_light_2 .dark {\n\t\t\t\t\ttransition: ${n.duration/4}ms cubic-bezier(1,0,1,0);\n\t\t\t\t\tclip-path: circle(${10*n.width}px at ${t+10*n.width+n.circleSize}px 50%);\n\t\t\t\t}`),i.insertRule(`\n\t\t\t\t.theme-switcher > .content-switcher.theme_light .light {\n\t\t\t\t\ttransition: ${n.duration/4}ms cubic-bezier(0,1,0,1);\n\t\t\t\t\tz-index: 900;\n\t\t\t\t\tclip-path: circle(${10*n.width}px at ${n.circleSize-9*n.width}px 50%);\n\t\t\t\t}`),i.insertRule(`\n\t\t\t\t.theme-switcher > .content-switcher.theme_light .dark {\n\t\t\t\t\ttransition: ${n.duration/4}ms cubic-bezier(0,1,0,1);\n\t\t\t\t\tz-index: 1000;\n\t\t\t\t\tclip-path: circle(${n.circleSize}px at ${t+2*n.circleSize}px 50%);\n\t\t\t\t}`),i.insertRule(`\n\t\t\t\t.theme-switcher > .content-switcher.theme_light_back_1 .light {\n\t\t\t\t\ttransition: 0ms;\n\t\t\t\t\tz-index: 900;\n\t\t\t\t\tclip-path: circle(${10*n.width}px at ${n.circleSize-9*n.width}px 50%);\n\t\t\n\t\t\t\t}`),i.insertRule(`\n\t\t\t\t.theme-switcher > .content-switcher.theme_light_back_1 .dark {\n\t\t\t\t\ttransition: ${n.duration/4}ms cubic-bezier(1,0,1,0);\n\t\t\t\t\tz-index: 1000;\n\t\t\t\t\tclip-path: circle(${10*n.width}px at ${t+n.circleSize+10*n.width}px 50%);\n\t\t\t\t}`),i.insertRule(`\n\t\t\t\t.theme-switcher > .content-switcher.theme_light_back_2 .light {\n\t\t\t\t\ttransition: 0ms;\n\t\t\t\t\tz-index: 1000;\n\t\t\t\t\tclip-path: circle(${10*n.width}px at ${t-10*n.width+n.circleSize}px 50%);\n\t\t\t\t}`),i.insertRule(`\n\t\t\t\t.theme-switcher > .content-switcher.theme_light_back_2 .dark {\n\t\t\t\t\ttransition: 0ms;\n\t\t\t\t\tz-index: 900;\n\t\t\t\t\tclip-path: circle(${10*n.width}px at ${t+n.circleSize+10*n.width}px 50%);\n\t\t\t\t}`),n.starsBlinkingDuration?.forEach(((t,e)=>{i.insertRule(`\n\t\t\t\t.theme-switcher > .content-switcher .dark .theme_dark__star-${e} {\n\t\t\t\t\tanimation: star-blink ${t}s linear infinite;\n\t\t\t\t}`)})),i.insertRule(`\n\t\t\t\t@keyframes star-blink {\n\t\t\t\t\t${n.starsBlinkingAnimation}\n\t\t\t\t}`),i.insertRule("\n\t\t\t\t.theme-switcher > .content-switcher .light > div {\n\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\theight: auto;\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\tleft: 0;\n\t\t\t\t}"),n.clouds?.forEach(((t,e)=>{i.insertRule(`\n\t\t\t\t.theme-switcher > .content-switcher .light .clouds-${e} {\n\t\t\t\t\twidth: ${6*t.width+5*t.gap}px;\n\t\t\t\t\ttop: ${t.top}%;\n\t\t\t\t\tanimation: theme-clouds-${e}  linear infinite;\n\t\t\t\t\tanimation-duration: ${t.speed}s;\n\t\t\t\t}`),i.insertRule(`\n\t\t\t\t.theme-switcher > .content-switcher .light .clouds-${e} .cloud {\n\t\t\t\t\twidth: ${t.width}px;\n\t\t\t\t\tmargin-right: ${t.gap}px;\n\t\t\t\t\topacity: ${t.opacity};\n\t\t\t\t}`),i.insertRule(`\n\t\t\t\t@keyframes theme-clouds-${e} {\n\t\t\t\t\t0% { transform: translateX(0); }\n\t\t\t\t\t100% { transform: translateX(${-(t.width+t.gap)}px); }\n\t\t\t\t}`)}))})(),(()=>{const t=n._themeSwitcher?.querySelector(".content-switcher .dark");new Array(n.numberOfStars).fill("").map((()=>{let t=Math.floor(20*Math.random()+1);return t=t>13?Math.floor(t/3):t,{x:Math.floor(Math.random()*n.width),y:Math.floor(Math.random()*n.height),size:t,blinkDuration:Math.floor(Math.random()*n.starsBlinkingDuration?.length)}})).forEach((e=>{const i=document.createElement("img");i.classList.add(`theme_dark__star-${e.blinkDuration}`),i.alt=".",i.style.position="absolute",i.style.left=`${e.x}px`,i.style.top=`${e.y}px`,i.style.width=`${e.size}px`,i.style.aspectRatio="1",i.src=String(n.star),t?.appendChild(i)}))})(),(()=>{if(n._themeSwitcher){const t=n._themeSwitcher.querySelector(".content-switcher .light");if(!n.clouds)return;const e=new Array(Math.ceil(n.width/(n.clouds[n.clouds.length-1].width+n.clouds[n.clouds.length-1].gap)+2)).fill("");n.clouds?.forEach(((i,r)=>{const h=document.createElement("div");h.classList.add(`clouds-${r}`),t?.appendChild(h),e.forEach((()=>{const t=document.createElement("img");t.classList.add("cloud"),t.alt=".",t.src=String(n.cloud),h.appendChild(t)}))}))}})(),t()})).then((()=>{"dark"==n.theme&&a("dark"),n._themeSwitcherInput?.addEventListener("change",c)}))},destroy:()=>{for(n._themeSwitcherInput?.removeEventListener("change",c);n._themeSwitcherContainer?.firstChild;)n._themeSwitcherContainer.removeChild(n._themeSwitcherContainer.firstChild)},changeTo:t=>{n.theme=t,a(t)},change:c}};return(0,r.useEffect)((()=>{"dark"===localStorage.getItem("theme")?i.base.setThemeDark():i.base.setThemeLight();const t={themeSwitcherContainer:h.current,star:s,cloud:c,width:h.current?.offsetWidth,height:h.current?.offsetHeight,circleSize:Math.round(h.current?.offsetHeight/3),duration:2e3,theme:localStorage.getItem("theme")||"light",numberOfStars:30,nodeForTheme:document.querySelector("body")||void 0,saveState:"theme"};a(t).create()}),[]),(0,n.jsx)("div",{className:t?"theme-switcher__container":"theme-switcher__container hide",ref:h})}))},6990:(t,e,i)=>{i.d(e,{Aj:()=>m,Cb:()=>a,L7:()=>o,OI:()=>d,Sh:()=>l,_8:()=>h,_Y:()=>c,h:()=>r,oz:()=>s});var n=i(9590);const r=()=>({type:n.Sp.SET_LANG_EN}),h=()=>({type:n.Sp.SET_LANG_RU}),a=()=>({type:n.Sp.SET_THEME_LIGHT}),c=()=>({type:n.Sp.SET_THEME_DARK}),s=()=>({type:n.Sp.SET_THEME_TOGGLE}),o=()=>({type:n.Sp.SET_NAV_OPEN_MOB}),l=()=>({type:n.Sp.SET_NAV_CLOSE_MOB}),d=()=>({type:n.Sp.SET_NAV_OPEN_DT}),m=()=>({type:n.Sp.SET_NAV_CLOSE_DT})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,