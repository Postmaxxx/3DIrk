/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e,t,n={9941:(e,t)=>{"use strict";function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}Object.defineProperty(t,"__esModule",{value:!0});var r="(prefers-reduced-motion: reduce)",a=4,i=5,s={CREATED:1,MOUNTED:2,IDLE:3,MOVING:a,SCROLLING:i,DRAGGING:6,DESTROYED:7};function o(e){e.length=0}function l(e,t,n){return Array.prototype.slice.call(e,t,n)}function u(e){return e.bind.apply(e,[null].concat(l(arguments,1)))}var c=setTimeout,d=function(){};function f(e){return requestAnimationFrame(e)}function p(e,t){return typeof t===e}function h(e){return!y(e)&&p("object",e)}var m=Array.isArray,g=u(p,"function"),v=u(p,"string"),b=u(p,"undefined");function y(e){return null===e}function _(e){try{return e instanceof(e.ownerDocument.defaultView||window).HTMLElement}catch(e){return!1}}function S(e){return m(e)?e:[e]}function w(e,t){S(e).forEach(t)}function x(e,t){return e.indexOf(t)>-1}function E(e,t){return e.push.apply(e,S(t)),e}function C(e,t,n){e&&w(t,(function(t){t&&e.classList[n?"add":"remove"](t)}))}function k(e,t){C(e,v(t)?t.split(" "):t,!0)}function L(e,t){w(t,e.appendChild.bind(e))}function j(e,t){w(e,(function(e){var n=(t||e).parentNode;n&&n.insertBefore(e,t)}))}function T(e,t){return _(e)&&(e.msMatchesSelector||e.matches).call(e,t)}function P(e,t){var n=e?l(e.children):[];return t?n.filter((function(e){return T(e,t)})):n}function N(e,t){return t?P(e,t)[0]:e.firstElementChild}var A=Object.keys;function D(e,t,n){return e&&(n?A(e).reverse():A(e)).forEach((function(n){"__proto__"!==n&&t(e[n],n)})),e}function O(e){return l(arguments,1).forEach((function(t){D(t,(function(n,r){e[r]=t[r]}))})),e}function R(e){return l(arguments,1).forEach((function(t){D(t,(function(t,n){m(t)?e[n]=t.slice():h(t)?e[n]=R({},h(e[n])?e[n]:{},t):e[n]=t}))})),e}function M(e,t){w(t||A(e),(function(t){delete e[t]}))}function I(e,t){w(e,(function(e){w(t,(function(t){e&&e.removeAttribute(t)}))}))}function F(e,t,n){h(t)?D(t,(function(t,n){F(e,n,t)})):w(e,(function(e){y(n)||""===n?I(e,t):e.setAttribute(t,String(n))}))}function z(e,t,n){var r=document.createElement(e);return t&&(v(t)?k(r,t):F(r,t)),n&&L(n,r),r}function U(e,t,n){if(b(n))return getComputedStyle(e)[t];y(n)||(e.style[t]=""+n)}function $(e,t){U(e,"display",t)}function B(e){e.setActive&&e.setActive()||e.focus({preventScroll:!0})}function V(e,t){return e.getAttribute(t)}function W(e,t){return e&&e.classList.contains(t)}function H(e){return e.getBoundingClientRect()}function q(e){w(e,(function(e){e&&e.parentNode&&e.parentNode.removeChild(e)}))}function G(e){return N((new DOMParser).parseFromString(e,"text/html").body)}function Q(e,t){e.preventDefault(),t&&(e.stopPropagation(),e.stopImmediatePropagation())}function Y(e,t){return e&&e.querySelector(t)}function K(e,t){return t?l(e.querySelectorAll(t)):[]}function X(e,t){C(e,t,!1)}function Z(e){return e.timeStamp}function J(e){return v(e)?e:e?e+"px":""}var ee="splide",te="data-"+ee;function ne(e,t){if(!e)throw new Error("["+ee+"] "+(t||""))}var re=Math.min,ae=Math.max,ie=Math.floor,se=Math.ceil,oe=Math.abs;function le(e,t,n){return oe(e-t)<n}function ue(e,t,n,r){var a=re(t,n),i=ae(t,n);return r?a<e&&e<i:a<=e&&e<=i}function ce(e,t,n){var r=re(t,n),a=ae(t,n);return re(ae(r,e),a)}function de(e){return+(e>0)-+(e<0)}function fe(e){return e.replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase()}function pe(e,t){return w(t,(function(t){e=e.replace("%s",""+t)})),e}function he(e){return e<10?"0"+e:""+e}var me={};function ge(e){return""+e+he(me[e]=(me[e]||0)+1)}function ve(){var e=[];function t(e,t,n){w(e,(function(e){e&&w(t,(function(t){t.split(" ").forEach((function(t){var r=t.split(".");n(e,r[0],r[1])}))}))}))}return{bind:function(n,r,a,i){t(n,r,(function(t,n,r){var s="addEventListener"in t,o=s?t.removeEventListener.bind(t,n,a,i):t.removeListener.bind(t,a);s?t.addEventListener(n,a,i):t.addListener(a),e.push([t,n,r,a,o])}))},unbind:function(n,r,a){t(n,r,(function(t,n,r){e=e.filter((function(e){return!!(e[0]!==t||e[1]!==n||e[2]!==r||a&&e[3]!==a)||(e[4](),!1)}))}))},dispatch:function(e,t,n){var r;return"function"==typeof CustomEvent?r=new CustomEvent(t,{bubbles:!0,detail:n}):(r=document.createEvent("CustomEvent")).initCustomEvent(t,!0,!1,n),e.dispatchEvent(r),r},destroy:function(){e.forEach((function(e){e[4]()})),o(e)}}}var be="mounted",ye="ready",_e="move",Se="moved",we="click",xe="active",Ee="inactive",Ce="visible",ke="hidden",Le="refresh",je="updated",Te="resize",Pe="resized",Ne="drag",Ae="dragging",De="dragged",Oe="scroll",Re="scrolled",Me="overflow",Ie="destroy",Fe="arrows:mounted",ze="arrows:updated",Ue="pagination:mounted",$e="pagination:updated",Be="navigation:mounted",Ve="autoplay:play",We="autoplay:playing",He="autoplay:pause",qe="lazyload:loaded",Ge="sk",Qe="sh",Ye="ei";function Ke(e){var t=e?e.event.bus:document.createDocumentFragment(),n=ve();return e&&e.event.on(Ie,n.destroy),O(n,{bus:t,on:function(e,r){n.bind(t,S(e).join(" "),(function(e){r.apply(r,m(e.detail)?e.detail:[])}))},off:u(n.unbind,t),emit:function(e){n.dispatch(t,e,l(arguments,1))}})}function Xe(e,t,n,r){var a,i,s=Date.now,o=0,l=!0,u=0;function c(){if(!l){if(o=e?re((s()-a)/e,1):1,n&&n(o),o>=1&&(t(),a=s(),r&&++u>=r))return d();i=f(c)}}function d(){l=!0}function p(){i&&cancelAnimationFrame(i),o=0,i=0,l=!0}return{start:function(t){t||p(),a=s()-(t?o*e:0),l=!1,i=f(c)},rewind:function(){a=s(),o=0,n&&n(o)},pause:d,cancel:p,set:function(t){e=t},isPaused:function(){return l}}}function Ze(e){var t=e;return{set:function(e){t=e},is:function(e){return x(S(e),t)}}}function Je(e,t){var n=Xe(t||0,e,null,1);return function(){n.isPaused()&&n.start()}}var et="Arrow",tt=et+"Left",nt=et+"Right",rt=et+"Up",at=et+"Down",it="rtl",st="ttb",ot={width:["height"],left:["top","right"],right:["bottom","left"],x:["y"],X:["Y"],Y:["X"],ArrowLeft:[rt,nt],ArrowRight:[at,tt]};function lt(e,t,n){return{resolve:function(e,t,r){var a=(r=r||n.direction)!==it||t?r===st?0:-1:1;return ot[e]&&ot[e][a]||e.replace(/width|left|right/i,(function(e,t){var n=ot[e.toLowerCase()][a]||e;return t>0?n.charAt(0).toUpperCase()+n.slice(1):n}))},orient:function(e){return e*(n.direction===it?1:-1)}}}var ut="role",ct="tabindex",dt="aria-",ft=dt+"controls",pt=dt+"current",ht=dt+"selected",mt=dt+"label",gt=dt+"labelledby",vt=dt+"hidden",bt=dt+"orientation",yt=dt+"roledescription",_t=dt+"live",St=dt+"busy",wt=dt+"atomic",xt=[ut,ct,"disabled",ft,pt,mt,gt,vt,bt,yt],Et=ee+"__",Ct="is-",kt=ee,Lt=Et+"track",jt=Et+"list",Tt=Et+"slide",Pt=Tt+"--clone",Nt=Tt+"__container",At=Et+"arrows",Dt=Et+"arrow",Ot=Dt+"--prev",Rt=Dt+"--next",Mt=Et+"pagination",It=Mt+"__page",Ft=Et+"progress",zt=Ft+"__bar",Ut=Et+"toggle",$t=Ut+"__play",Bt=Ut+"__pause",Vt=Et+"spinner",Wt=Et+"sr",Ht=Ct+"initialized",qt=Ct+"active",Gt=Ct+"prev",Qt=Ct+"next",Yt=Ct+"visible",Kt=Ct+"loading",Xt=Ct+"focus-in",Zt=Ct+"overflow",Jt=[qt,Yt,Gt,Qt,Kt,Xt,Zt],en={slide:Tt,clone:Pt,arrows:At,arrow:Dt,prev:Ot,next:Rt,pagination:Mt,page:It,spinner:Vt},tn="touchstart mousedown",nn="touchmove mousemove",rn="touchend touchcancel mouseup click",an="slide",sn="loop",on="fade";var ln="http://www.w3.org/2000/svg",un="m15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z",cn=te+"-interval",dn={passive:!1,capture:!0},fn={Spacebar:" ",Right:nt,Left:tt,Up:rt,Down:at};function pn(e){return e=v(e)?e:e.key,fn[e]||e}var hn="keydown",mn=te+"-lazy",gn=mn+"-srcset",vn="["+mn+"], ["+gn+"]",bn=[" ","Enter"],yn=Object.freeze({__proto__:null,Media:function(e,t,n){var a=e.state,i=n.breakpoints||{},s=n.reducedMotion||{},o=ve(),l=[];function u(e){e&&o.destroy()}function c(e,t){var n=matchMedia(t);o.bind(n,"change",d),l.push([e,n])}function d(){var t=a.is(7),r=n.direction,i=l.reduce((function(e,t){return R(e,t[1].matches?t[0]:{})}),{});M(n),f(i),n.destroy?e.destroy("completely"===n.destroy):t?(u(!0),e.mount()):r!==n.direction&&e.refresh()}function f(t,r,i){R(n,t),r&&R(Object.getPrototypeOf(n),t),!i&&a.is(1)||e.emit(je,n)}return{setup:function(){var e="min"===n.mediaQuery;A(i).sort((function(t,n){return e?+t-+n:+n-+t})).forEach((function(t){c(i[t],"("+(e?"min":"max")+"-width:"+t+"px)")})),c(s,r),d()},destroy:u,reduce:function(e){matchMedia(r).matches&&(e?R(n,s):M(n,A(s)))},set:f}},Direction:lt,Elements:function(e,t,n){var r,a,i,s=Ke(e),l=s.on,u=s.bind,c=e.root,d=n.i18n,f={},p=[],h=[],m=[];function v(){var e,t;r=_("."+Lt),a=N(r,"."+jt),ne(r&&a,"A track/list element is missing."),E(p,P(a,"."+Tt+":not(."+Pt+")")),D({arrows:At,pagination:Mt,prev:Ot,next:Rt,bar:zt,toggle:Ut},(function(e,t){f[t]=_("."+e)})),O(f,{root:c,track:r,list:a,slides:p}),e=c.id||ge(ee),t=n.role,c.id=e,r.id=r.id||e+"-track",a.id=a.id||e+"-list",!V(c,ut)&&"SECTION"!==c.tagName&&t&&F(c,ut,t),F(c,yt,d.carousel),F(a,ut,"presentation"),y()}function b(e){var t=xt.concat("style");o(p),X(c,h),X(r,m),I([r,a],t),I(c,e?t:["style",yt])}function y(){X(c,h),X(r,m),h=S(kt),m=S(Lt),k(c,h),k(r,m),F(c,mt,n.label),F(c,gt,n.labelledby)}function _(e){var t=Y(c,e);return t&&function(e,t){if(g(e.closest))return e.closest(t);for(var n=e;n&&1===n.nodeType&&!T(n,t);)n=n.parentElement;return n}(t,"."+kt)===c?t:void 0}function S(e){return[e+"--"+n.type,e+"--"+n.direction,n.drag&&e+"--draggable",n.isNavigation&&e+"--nav",e===kt&&qt]}return O(f,{setup:v,mount:function(){l(Le,b),l(Le,v),l(je,y),u(document,tn+" keydown",(function(e){i="keydown"===e.type}),{capture:!0}),u(c,"focusin",(function(){C(c,Xt,!!i)}))},destroy:b})},Slides:function(e,t,n){var r=Ke(e),s=r.on,l=r.emit,c=r.bind,d=t.Elements,f=d.slides,p=d.list,h=[];function m(){f.forEach((function(e,t){y(e,t,-1)}))}function b(){P((function(e){e.destroy()})),o(h)}function y(t,n,r){var s=function(e,t,n,r){var s,o=Ke(e),l=o.on,c=o.emit,d=o.bind,f=e.Components,p=e.root,h=e.options,m=h.isNavigation,g=h.updateOnMove,v=h.i18n,b=h.pagination,y=h.slideFocus,_=f.Direction.resolve,S=V(r,"style"),w=V(r,mt),x=n>-1,E=N(r,"."+Nt);function k(){var a=e.splides.map((function(e){var n=e.splide.Components.Slides.getAt(t);return n?n.slide.id:""})).join(" ");F(r,mt,pe(v.slideX,(x?n:t)+1)),F(r,ft,a),F(r,ut,y?"button":""),y&&I(r,yt)}function L(){s||j()}function j(){if(!s){var n=e.index;(o=T())!==W(r,qt)&&(C(r,qt,o),F(r,pt,m&&o||""),c(o?xe:Ee,P)),function(){var t=function(){if(e.is(on))return T();var t=H(f.Elements.track),n=H(r),a=_("left",!0),i=_("right",!0);return ie(t[a])<=se(n[a])&&ie(n[i])<=se(t[i])}(),n=!t&&(!T()||x);if(e.state.is([a,i])||F(r,vt,n||""),F(K(r,h.focusableNodes||""),ct,n?-1:""),y&&F(r,ct,n?-1:0),t!==W(r,Yt)&&(C(r,Yt,t),c(t?Ce:ke,P)),!t&&document.activeElement===r){var s=f.Slides.getAt(e.index);s&&B(s.slide)}}(),C(r,Gt,t===n-1),C(r,Qt,t===n+1)}var o}function T(){var r=e.index;return r===t||h.cloneStatus&&r===n}var P={index:t,slideIndex:n,slide:r,container:E,isClone:x,mount:function(){x||(r.id=p.id+"-slide"+he(t+1),F(r,ut,b?"tabpanel":"group"),F(r,yt,v.slide),F(r,mt,w||pe(v.slideLabel,[t+1,e.length]))),d(r,"click",u(c,we,P)),d(r,"keydown",u(c,Ge,P)),l([Se,Qe,Re],j),l(Be,k),g&&l(_e,L)},destroy:function(){s=!0,o.destroy(),X(r,Jt),I(r,xt),F(r,"style",S),F(r,mt,w||"")},update:j,style:function(e,t,n){U(n&&E||r,e,t)},isWithin:function(n,r){var a=oe(n-t);return x||!h.rewind&&!e.is(sn)||(a=re(a,e.length-a)),a<=r}};return P}(e,n,r,t);s.mount(),h.push(s),h.sort((function(e,t){return e.index-t.index}))}function E(e){return e?A((function(e){return!e.isClone})):h}function P(e,t){E(t).forEach(e)}function A(e){return h.filter(g(e)?e:function(t){return v(e)?T(t.slide,e):x(S(e),t.index)})}return{mount:function(){m(),s(Le,b),s(Le,m)},destroy:b,update:function(){P((function(e){e.update()}))},register:y,get:E,getIn:function(e){var r=t.Controller,a=r.toIndex(e),i=r.hasFocus()?1:n.perPage;return A((function(e){return ue(e.index,a,a+i-1)}))},getAt:function(e){return A(e)[0]},add:function(e,t){w(e,(function(e){if(v(e)&&(e=G(e)),_(e)){var r=f[t];r?j(e,r):L(p,e),k(e,n.classes.slide),a=e,i=u(l,Te),s=K(a,"img"),(o=s.length)?s.forEach((function(e){c(e,"load error",(function(){--o||i()}))})):i()}var a,i,s,o})),l(Le)},remove:function(e){q(A(e).map((function(e){return e.slide}))),l(Le)},forEach:P,filter:A,style:function(e,t,n){P((function(r){r.style(e,t,n)}))},getLength:function(e){return e?f.length:h.length},isEnough:function(){return h.length>n.perPage}}},Layout:function(e,t,n){var r,a,i,s=Ke(e),o=s.on,l=s.bind,c=s.emit,d=t.Slides,f=t.Direction.resolve,p=t.Elements,m=p.root,g=p.track,v=p.list,b=d.getAt,y=d.style;function _(){r=n.direction===st,U(m,"maxWidth",J(n.width)),U(g,f("paddingLeft"),w(!1)),U(g,f("paddingRight"),w(!0)),S(!0)}function S(e){var t,s=H(m);(e||a.width!==s.width||a.height!==s.height)&&(U(g,"height",(t="",r&&(ne(t=x(),"height or heightRatio is missing."),t="calc("+t+" - "+w(!1)+" - "+w(!0)+")"),t)),y(f("marginRight"),J(n.gap)),y("width",n.autoWidth?null:J(n.fixedWidth)||(r?"":E())),y("height",J(n.fixedHeight)||(r?n.autoHeight?null:E():x()),!0),a=s,c(Pe),i!==(i=N())&&(C(m,Zt,i),c(Me,i)))}function w(e){var t=n.padding,r=f(e?"right":"left");return t&&J(t[r]||(h(t)?0:t))||"0px"}function x(){return J(n.height||H(v).width*n.heightRatio)}function E(){var e=J(n.gap);return"calc((100%"+(e&&" + "+e)+")/"+(n.perPage||1)+(e&&" - "+e)+")"}function k(){return H(v)[f("width")]}function L(e,t){var n=b(e||0);return n?H(n.slide)[f("width")]+(t?0:P()):0}function j(e,t){var n=b(e);if(n){var r=H(n.slide)[f("right")],a=H(v)[f("left")];return oe(r-a)+(t?0:P())}return 0}function T(t){return j(e.length-1)-j(0)+L(0,t)}function P(){var e=b(0);return e&&parseFloat(U(e.slide,f("marginRight")))||0}function N(){return e.is(on)||T(!0)>k()}return{mount:function(){_(),l(window,"resize load",Je(u(c,Te))),o([je,Le],_),o(Te,S)},resize:S,listSize:k,slideSize:L,sliderSize:T,totalSize:j,getPadding:function(e){return parseFloat(U(g,f("padding"+(e?"Right":"Left"))))||0},isOverflow:N}},Clones:function(e,t,n){var r,a=Ke(e),i=a.on,s=t.Elements,l=t.Slides,u=t.Direction.resolve,c=[];function d(){i(Le,f),i([je,Te],h),(r=m())&&(function(t){var r=l.get().slice(),a=r.length;if(a){for(;r.length<t;)E(r,r);E(r.slice(-t),r.slice(0,t)).forEach((function(i,o){var u=o<t,d=function(t,r){var a=t.cloneNode(!0);return k(a,n.classes.clone),a.id=e.root.id+"-clone"+he(r+1),a}(i.slide,o);u?j(d,r[0].slide):L(s.list,d),E(c,d),l.register(d,o-t+(u?0:a),i.index)}))}}(r),t.Layout.resize(!0))}function f(){p(),d()}function p(){q(c),o(c),a.destroy()}function h(){var e=m();r!==e&&(r<e||!e)&&a.emit(Le)}function m(){var r=n.clones;if(e.is(sn)){if(b(r)){var a=n[u("fixedWidth")]&&t.Layout.slideSize(0);r=a&&se(H(s.track)[u("width")]/a)||n[u("autoWidth")]&&e.length||2*n.perPage}}else r=0;return r}return{mount:d,destroy:p}},Move:function(e,t,n){var r,i=Ke(e),s=i.on,o=i.emit,l=e.state.set,u=t.Layout,c=u.slideSize,d=u.getPadding,f=u.totalSize,p=u.listSize,h=u.sliderSize,m=t.Direction,g=m.resolve,v=m.orient,y=t.Elements,_=y.list,S=y.track;function w(){t.Controller.isBusy()||(t.Scroll.cancel(),x(e.index),t.Slides.update())}function x(e){E(j(e,!0))}function E(n,r){if(!e.is(on)){var a=r?n:function(n){if(e.is(sn)){var r=L(n),a=r>t.Controller.getEnd();(r<0||a)&&(n=C(n,a))}return n}(n);U(_,"transform","translate"+g("X")+"("+a+"px)"),n!==a&&o(Qe)}}function C(e,t){var n=e-P(t),r=h();return e-v(r*(se(oe(n)/r)||1))*(t?1:-1)}function k(){E(T(),!0),r.cancel()}function L(e){for(var n=t.Slides.get(),r=0,a=1/0,i=0;i<n.length;i++){var s=n[i].index,o=oe(j(s,!0)-e);if(!(o<=a))break;a=o,r=s}return r}function j(t,r){var a=v(f(t-1)-function(e){var t=n.focus;return"center"===t?(p()-c(e,!0))/2:+t*c(e)||0}(t));return r?function(t){return n.trimSpace&&e.is(an)&&(t=ce(t,0,v(h(!0)-p()))),t}(a):a}function T(){var e=g("left");return H(_)[e]-H(S)[e]+v(d(!1))}function P(e){return j(e?t.Controller.getEnd():0,!!n.trimSpace)}return{mount:function(){r=t.Transition,s([be,Pe,je,Le],w)},move:function(e,t,n,i){var s,u;e!==t&&(s=e>n,u=v(C(T(),s)),s?u>=0:u<=_[g("scrollWidth")]-H(S)[g("width")])&&(k(),E(C(T(),e>n),!0)),l(a),o(_e,t,n,e),r.start(t,(function(){l(3),o(Se,t,n,e),i&&i()}))},jump:x,translate:E,shift:C,cancel:k,toIndex:L,toPosition:j,getPosition:T,getLimit:P,exceededLimit:function(e,t){t=b(t)?T():t;var n=!0!==e&&v(t)<v(P(!1)),r=!1!==e&&v(t)>v(P(!0));return n||r},reposition:w}},Controller:function(e,t,n){var r,s,o,l,c=Ke(e),d=c.on,f=c.emit,p=t.Move,h=p.getPosition,m=p.getLimit,g=p.toPosition,y=t.Slides,_=y.isEnough,S=y.getLength,w=n.omitEnd,x=e.is(sn),E=e.is(an),C=u(N,!1),k=u(N,!0),L=n.start||0,j=L;function T(){s=S(!0),o=n.perMove,l=n.perPage,r=O();var e=ce(L,0,w?r:s-1);e!==L&&(L=e,p.reposition())}function P(){r!==O()&&f(Ye)}function N(e,t){var n=o||(F()?1:l),a=A(L+n*(e?-1:1),L,!(o||F()));return-1===a&&E&&!le(h(),m(!e),1)?e?0:r:t?a:D(a)}function A(t,a,i){if(_()||F()){var u=function(t){if(E&&"move"===n.trimSpace&&t!==L)for(var r=h();r===g(t,!0)&&ue(t,0,e.length-1,!n.rewind);)t<L?--t:++t;return t}(t);u!==t&&(a=t,t=u,i=!1),t<0||t>r?t=o||!ue(0,t,a,!0)&&!ue(r,a,t,!0)?x?i?t<0?-(s%l||l):s:t:n.rewind?t<0?r:0:-1:R(M(t)):i&&t!==a&&(t=R(M(a)+(t<a?-1:1)))}else t=-1;return t}function D(e){return x?(e+s)%s||0:e}function O(){for(var e=s-(F()||x&&o?1:l);w&&e-- >0;)if(g(s-1,!0)!==g(e,!0)){e++;break}return ce(e,0,s-1)}function R(e){return ce(F()?e:l*e,0,r)}function M(e){return F()?re(e,r):ie((e>=r?s-1:e)/l)}function I(e){e!==L&&(j=L,L=e)}function F(){return!b(n.focus)||n.isNavigation}function z(){return e.state.is([a,i])&&!!n.waitForTransition}return{mount:function(){T(),d([je,Le,Ye],T),d(Pe,P)},go:function(e,t,n){if(!z()){var a=function(e){var t=L;if(v(e)){var n=e.match(/([+\-<>])(\d+)?/)||[],a=n[1],i=n[2];"+"===a||"-"===a?t=A(L+ +(""+a+(+i||1)),L):">"===a?t=i?R(+i):C(!0):"<"===a&&(t=k(!0))}else t=x?e:ce(e,0,r);return t}(e),i=D(a);i>-1&&(t||i!==L)&&(I(i),p.move(a,i,j,n))}},scroll:function(e,n,a,i){t.Scroll.scroll(e,n,a,(function(){var e=D(p.toIndex(h()));I(w?re(e,r):e),i&&i()}))},getNext:C,getPrev:k,getAdjacent:N,getEnd:O,setIndex:I,getIndex:function(e){return e?j:L},toIndex:R,toPage:M,toDest:function(e){var t=p.toIndex(e);return E?ce(t,0,r):t},hasFocus:F,isBusy:z}},Arrows:function(e,t,n){var r,a,i=Ke(e),s=i.on,o=i.bind,l=i.emit,c=n.classes,d=n.i18n,f=t.Elements,p=t.Controller,h=f.arrows,m=f.track,g=h,v=f.prev,b=f.next,y={};function _(){var e;!(e=n.arrows)||v&&b||(g=h||z("div",c.arrows),v=E(!0),b=E(!1),r=!0,L(g,[v,b]),!h&&j(g,m)),v&&b&&(O(y,{prev:v,next:b}),$(g,e?"":"none"),k(g,a=At+"--"+n.direction),e&&(s([be,Se,Le,Re,Ye],C),o(b,"click",u(x,">")),o(v,"click",u(x,"<")),C(),F([v,b],ft,m.id),l(Fe,v,b))),s(je,S)}function S(){w(),_()}function w(){i.destroy(),X(g,a),r?(q(h?[v,b]:g),v=b=null):I([v,b],xt)}function x(e){p.go(e,!0)}function E(e){return G('<button class="'+c.arrow+" "+(e?c.prev:c.next)+'" type="button"><svg xmlns="'+ln+'" viewBox="0 0 '+"40 "+'40" width="'+'40" height="'+'40" focusable="false"><path d="'+(n.arrowPath||un)+'" />')}function C(){if(v&&b){var t=e.index,n=p.getPrev(),r=p.getNext(),a=n>-1&&t<n?d.last:d.prev,i=r>-1&&t>r?d.first:d.next;v.disabled=n<0,b.disabled=r<0,F(v,mt,a),F(b,mt,i),l(ze,v,b,n,r)}}return{arrows:y,mount:_,destroy:w,update:C}},Autoplay:function(e,t,n){var r,a,i=Ke(e),s=i.on,o=i.bind,l=i.emit,u=Xe(n.interval,e.go.bind(e,">"),(function(e){var t=d.bar;t&&U(t,"width",100*e+"%"),l(We,e)})),c=u.isPaused,d=t.Elements,f=t.Elements,p=f.root,h=f.toggle,m=n.autoplay,g="pause"===m;function v(){c()&&t.Slides.isEnough()&&(u.start(!n.resetProgress),a=r=g=!1,_(),l(Ve))}function b(e){void 0===e&&(e=!0),g=!!e,_(),c()||(u.pause(),l(He))}function y(){g||(r||a?b(!1):v())}function _(){h&&(C(h,qt,!g),F(h,mt,n.i18n[g?"play":"pause"]))}function S(e){var r=t.Slides.getAt(e);u.set(r&&+V(r.slide,cn)||n.interval)}return{mount:function(){m&&(n.pauseOnHover&&o(p,"mouseenter mouseleave",(function(e){r="mouseenter"===e.type,y()})),n.pauseOnFocus&&o(p,"focusin focusout",(function(e){a="focusin"===e.type,y()})),h&&o(h,"click",(function(){g?v():b(!0)})),s([_e,Oe,Le],u.rewind),s(_e,S),h&&F(h,ft,d.track.id),g||v(),_())},destroy:u.cancel,play:v,pause:b,isPaused:c}},Cover:function(e,t,n){var r=Ke(e).on;function a(e){t.Slides.forEach((function(t){var n=N(t.container||t.slide,"img");n&&n.src&&i(e,n,t)}))}function i(e,t,n){n.style("background",e?'center/cover no-repeat url("'+t.src+'")':"",!0),$(t,e?"none":"")}return{mount:function(){n.cover&&(r(qe,u(i,!0)),r([be,je,Le],u(a,!0)))},destroy:u(a,!1)}},Scroll:function(e,t,n){var r,a,s=Ke(e),o=s.on,l=s.emit,c=e.state.set,d=t.Move,f=d.getPosition,p=d.getLimit,h=d.exceededLimit,m=d.translate,g=e.is(an),v=1;function b(e,n,s,o,p){var m=f();if(S(),s&&(!g||!h())){var b=t.Layout.sliderSize(),w=de(e)*b*ie(oe(e)/b)||0;e=d.toPosition(t.Controller.toDest(e%b))+w}var x=le(m,e,1);v=1,n=x?0:n||ae(oe(e-m)/1.5,800),a=o,r=Xe(n,y,u(_,m,e,p),1),c(i),l(Oe),r.start()}function y(){c(3),a&&a(),l(Re)}function _(e,t,r,i){var s,o,l=f(),u=(e+(t-e)*(s=i,(o=n.easingFunc)?o(s):1-Math.pow(1-s,4))-l)*v;m(l+u),g&&!r&&h()&&(v*=.6,oe(u)<10&&b(p(h(!0)),600,!1,a,!0))}function S(){r&&r.cancel()}function w(){r&&!r.isPaused()&&(S(),y())}return{mount:function(){o(_e,S),o([je,Le],w)},destroy:S,scroll:b,cancel:w}},Drag:function(e,t,n){var r,s,o,l,u,c,f,p,m=Ke(e),g=m.on,v=m.emit,b=m.bind,y=m.unbind,_=e.state,S=t.Move,w=t.Scroll,x=t.Controller,E=t.Elements.track,C=t.Media.reduce,k=t.Direction,L=k.resolve,j=k.orient,P=S.getPosition,N=S.exceededLimit,A=!1;function D(){var e=n.drag;W(!e),l="free"===e}function O(e){if(c=!1,!f){var t=V(e);r=e.target,s=n.noDrag,T(r,"."+It+", ."+Dt)||s&&T(r,s)||!t&&e.button||(x.isBusy()?Q(e,!0):(p=t?E:window,u=_.is([a,i]),o=null,b(p,nn,R,dn),b(p,rn,M,dn),S.cancel(),w.cancel(),F(e)))}var r,s}function R(t){if(_.is(6)||(_.set(6),v(Ne)),t.cancelable)if(u){S.translate(r+z(t)/(A&&e.is(an)?5:1));var a=U(t)>200,i=A!==(A=N());(a||i)&&F(t),c=!0,v(Ae),Q(t)}else(function(e){return oe(z(e))>oe(z(e,!0))})(t)&&(u=function(e){var t=n.dragMinThreshold,r=h(t),a=r&&t.mouse||0,i=(r?t.touch:+t)||10;return oe(z(e))>(V(e)?i:a)}(t),Q(t))}function M(r){_.is(6)&&(_.set(3),v(De)),u&&(function(r){var a=function(t){if(e.is(sn)||!A){var n=U(t);if(n&&n<200)return z(t)/n}return 0}(r),i=function(e){return P()+de(e)*re(oe(e)*(n.flickPower||600),l?1/0:t.Layout.listSize()*(n.flickMaxPages||1))}(a),s=n.rewind&&n.rewindByDrag;C(!1),l?x.scroll(i,0,n.snap):e.is(on)?x.go(j(de(a))<0?s?"<":"-":s?">":"+"):e.is(an)&&A&&s?x.go(N(!0)?">":"<"):x.go(x.toDest(i),!0),C(!0)}(r),Q(r)),y(p,nn,R),y(p,rn,M),u=!1}function I(e){!f&&c&&Q(e,!0)}function F(e){o=s,s=e,r=P()}function z(e,t){return B(e,t)-B($(e),t)}function U(e){return Z(e)-Z($(e))}function $(e){return s===e&&o||s}function B(e,t){return(V(e)?e.changedTouches[0]:e)["page"+L(t?"Y":"X")]}function V(e){return"undefined"!=typeof TouchEvent&&e instanceof TouchEvent}function W(e){f=e}return{mount:function(){b(E,nn,d,dn),b(E,rn,d,dn),b(E,tn,O,dn),b(E,"click",I,{capture:!0}),b(E,"dragstart",Q),g([be,je],D)},disable:W,isDragging:function(){return u}}},Keyboard:function(e,t,n){var r,a,i=Ke(e),s=i.on,o=i.bind,l=i.unbind,u=e.root,d=t.Direction.resolve;function f(){var e=n.keyboard;e&&(r="global"===e?window:u,o(r,hn,m))}function p(){l(r,hn)}function h(){var e=a;a=!0,c((function(){a=e}))}function m(t){if(!a){var n=pn(t);n===d(tt)?e.go("<"):n===d(nt)&&e.go(">")}}return{mount:function(){f(),s(je,p),s(je,f),s(_e,h)},destroy:p,disable:function(e){a=e}}},LazyLoad:function(e,t,n){var r=Ke(e),a=r.on,i=r.off,s=r.bind,l=r.emit,c="sequential"===n.lazyLoad,d=[Se,Re],f=[];function p(){o(f),t.Slides.forEach((function(e){K(e.slide,vn).forEach((function(t){var r=V(t,mn),a=V(t,gn);if(r!==t.src||a!==t.srcset){var i=n.classes.spinner,s=t.parentElement,o=N(s,"."+i)||z("span",i,s);f.push([t,e,o]),t.src||$(t,"none")}}))})),c?v():(i(d),a(d,h),h())}function h(){(f=f.filter((function(t){var r=n.perPage*((n.preloadPages||1)+1)-1;return!t[1].isWithin(e.index,r)||m(t)}))).length||i(d)}function m(e){var t=e[0];k(e[1].slide,Kt),s(t,"load error",u(g,e)),F(t,"src",V(t,mn)),F(t,"srcset",V(t,gn)),I(t,mn),I(t,gn)}function g(e,t){var n=e[0],r=e[1];X(r.slide,Kt),"error"!==t.type&&(q(e[2]),$(n,""),l(qe,n,r),l(Te)),c&&v()}function v(){f.length&&m(f.shift())}return{mount:function(){n.lazyLoad&&(p(),a(Le,p))},destroy:u(o,f),check:h}},Pagination:function(e,t,n){var r,a,i=Ke(e),s=i.on,c=i.emit,d=i.bind,f=t.Slides,p=t.Elements,h=t.Controller,m=h.hasFocus,g=h.getIndex,v=h.go,b=t.Direction.resolve,y=p.pagination,_=[];function S(){r&&(q(y?l(r.children):r),X(r,a),o(_),r=null),i.destroy()}function w(e){v(">"+e,!0)}function x(e,t){var n=_.length,r=pn(t),a=E(),i=-1;r===b(nt,!1,a)?i=++e%n:r===b(tt,!1,a)?i=(--e+n)%n:"Home"===r?i=0:"End"===r&&(i=n-1);var s=_[i];s&&(B(s.button),v(">"+i),Q(t,!0))}function E(){return n.paginationDirection||n.direction}function C(e){return _[h.toPage(e)]}function L(){var e=C(g(!0)),t=C(g());if(e){var n=e.button;X(n,qt),I(n,ht),F(n,ct,-1)}if(t){var a=t.button;k(a,qt),F(a,ht,!0),F(a,ct,"")}c($e,{list:r,items:_},e,t)}return{items:_,mount:function t(){S(),s([je,Le,Ye],t);var i=n.pagination;y&&$(y,i?"":"none"),i&&(s([_e,Oe,Re],L),function(){var t=e.length,i=n.classes,s=n.i18n,o=n.perPage,l=m()?h.getEnd()+1:se(t/o);k(r=y||z("ul",i.pagination,p.track.parentElement),a=Mt+"--"+E()),F(r,ut,"tablist"),F(r,mt,s.select),F(r,bt,E()===st?"vertical":"");for(var c=0;c<l;c++){var g=z("li",null,r),v=z("button",{class:i.page,type:"button"},g),b=f.getIn(c).map((function(e){return e.slide.id})),S=!m()&&o>1?s.pageX:s.slideX;d(v,"click",u(w,c)),n.paginationKeyboard&&d(v,"keydown",u(x,c)),F(g,ut,"presentation"),F(v,ut,"tab"),F(v,ft,b.join(" ")),F(v,mt,pe(S,c+1)),F(v,ct,-1),_.push({li:g,button:v,page:c})}}(),L(),c(Ue,{list:r,items:_},C(e.index)))},destroy:S,getAt:C,update:L}},Sync:function(e,t,n){var r=n.isNavigation,a=n.slideFocus,i=[];function s(){var t,n;e.splides.forEach((function(t){t.isParent||(c(e,t.splide),c(t.splide,e))})),r&&((n=(t=Ke(e)).on)(we,f),n(Ge,p),n([be,je],d),i.push(t),t.emit(Be,e.splides))}function l(){i.forEach((function(e){e.destroy()})),o(i)}function c(e,t){var n=Ke(e);n.on(_e,(function(e,n,r){t.go(t.is(sn)?r:e)})),i.push(n)}function d(){F(t.Elements.list,bt,n.direction===st?"vertical":"")}function f(t){e.go(t.index)}function p(e,t){x(bn,pn(t))&&(f(e),Q(t))}return{setup:u(t.Media.set,{slideFocus:b(a)?r:a},!0),mount:s,destroy:l,remount:function(){l(),s()}}},Wheel:function(e,t,n){var r=Ke(e).bind,i=0;function s(r){if(r.cancelable){var s=r.deltaY,o=s<0,l=Z(r),u=n.wheelMinThreshold||0,c=n.wheelSleep||0;oe(s)>u&&l-i>c&&(e.go(o?"<":">"),i=l),function(r){return!n.releaseWheel||e.state.is(a)||-1!==t.Controller.getAdjacent(r)}(o)&&Q(r)}}return{mount:function(){n.wheel&&r(t.Elements.track,"wheel",s,dn)}}},Live:function(e,t,n){var r=Ke(e).on,a=t.Elements.track,i=n.live&&!n.isNavigation,s=z("span",Wt),o=Xe(90,u(l,!1));function l(e){F(a,St,e),e?(L(a,s),o.start()):(q(s),o.cancel())}function c(e){i&&F(a,_t,e?"off":"polite")}return{mount:function(){i&&(c(!t.Autoplay.isPaused()),F(a,wt,!0),s.textContent="…",r(Ve,u(c,!0)),r(He,u(c,!1)),r([Se,Re],u(l,!0)))},disable:c,destroy:function(){I(a,[_t,wt,St]),q(s)}}}}),_n={type:"slide",role:"region",speed:400,perPage:1,cloneStatus:!0,arrows:!0,pagination:!0,paginationKeyboard:!0,interval:5e3,pauseOnHover:!0,pauseOnFocus:!0,resetProgress:!0,easing:"cubic-bezier(0.25, 1, 0.5, 1)",drag:!0,direction:"ltr",trimSpace:!0,focusableNodes:"a, button, textarea, input, select, iframe",live:!0,classes:en,i18n:{prev:"Previous slide",next:"Next slide",first:"Go to first slide",last:"Go to last slide",slideX:"Go to slide %s",pageX:"Go to page %s",play:"Start autoplay",pause:"Pause autoplay",carousel:"carousel",slide:"slide",select:"Select a slide to show",slideLabel:"%s of %s"},reducedMotion:{speed:0,rewindSpeed:0,autoplay:"pause"}};function Sn(e,t,n){var r=t.Slides;function a(){r.forEach((function(e){e.style("transform","translateX(-"+100*e.index+"%)")}))}return{mount:function(){Ke(e).on([be,Le],a)},start:function(e,t){r.style("transition","opacity "+n.speed+"ms "+n.easing),c(t)},cancel:d}}function wn(e,t,n){var r,a=t.Move,i=t.Controller,s=t.Scroll,o=t.Elements.list,l=u(U,o,"transition");function c(){l(""),s.cancel()}return{mount:function(){Ke(e).bind(o,"transitionend",(function(e){e.target===o&&r&&(c(),r())}))},start:function(t,o){var u=a.toPosition(t,!0),c=a.getPosition(),d=function(t){var r=n.rewindSpeed;if(e.is(an)&&r){var a=i.getIndex(!0),s=i.getEnd();if(0===a&&t>=s||a>=s&&0===t)return r}return n.speed}(t);oe(u-c)>=1&&d>=1?n.useScroll?s.scroll(u,d,!1,o):(l("transform "+d+"ms "+n.easing),a.translate(u,!0),r=o):(a.jump(t),o())},cancel:c}}var xn=function(){function e(t,n){this.event=Ke(),this.Components={},this.state=Ze(1),this.splides=[],this._o={},this._E={};var r=v(t)?Y(document,t):t;ne(r,r+" is invalid."),this.root=r,n=R({label:V(r,mt)||"",labelledby:V(r,gt)||""},_n,e.defaults,n||{});try{R(n,JSON.parse(V(r,te)))}catch(e){ne(!1,"Invalid JSON")}this._o=Object.create(R({},n))}var t,r,a=e.prototype;return a.mount=function(e,t){var n=this,r=this.state,a=this.Components;return ne(r.is([1,7]),"Already mounted!"),r.set(1),this._C=a,this._T=t||this._T||(this.is(on)?Sn:wn),this._E=e||this._E,D(O({},yn,this._E,{Transition:this._T}),(function(e,t){var r=e(n,a,n._o);a[t]=r,r.setup&&r.setup()})),D(a,(function(e){e.mount&&e.mount()})),this.emit(be),k(this.root,Ht),r.set(3),this.emit(ye),this},a.sync=function(e){return this.splides.push({splide:e}),e.splides.push({splide:this,isParent:!0}),this.state.is(3)&&(this._C.Sync.remount(),e.Components.Sync.remount()),this},a.go=function(e){return this._C.Controller.go(e),this},a.on=function(e,t){return this.event.on(e,t),this},a.off=function(e){return this.event.off(e),this},a.emit=function(e){var t;return(t=this.event).emit.apply(t,[e].concat(l(arguments,1))),this},a.add=function(e,t){return this._C.Slides.add(e,t),this},a.remove=function(e){return this._C.Slides.remove(e),this},a.is=function(e){return this._o.type===e},a.refresh=function(){return this.emit(Le),this},a.destroy=function(e){void 0===e&&(e=!0);var t=this.event,n=this.state;return n.is(1)?Ke(this).on(ye,this.destroy.bind(this,e)):(D(this._C,(function(t){t.destroy&&t.destroy(e)}),!0),t.emit(Ie),t.destroy(),e&&o(this.splides),n.set(7)),this},t=e,(r=[{key:"options",get:function(){return this._o},set:function(e){this._C.Media.set(e,!0,!0)}},{key:"length",get:function(){return this._C.Slides.getLength(!0)}},{key:"index",get:function(){return this._C.Controller.getIndex()}}])&&n(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();xn.defaults={},xn.STATES=s;var En={listTag:"ul",slideTag:"li"},Cn=function(){function e(e,t){this.styles={},this.id=e,this.options=t}var t=e.prototype;return t.rule=function(e,t,n,r){r=r||"default";var a=this.styles[r]=this.styles[r]||{};(a[e]=a[e]||{})[t]=n},t.build=function(){var e=this,t="";return this.styles.default&&(t+=this.buildSelectors(this.styles.default)),Object.keys(this.styles).sort((function(t,n){return"min"===e.options.mediaQuery?+t-+n:+n-+t})).forEach((function(n){"default"!==n&&(t+="@media screen and (max-width: "+n+"px) {",t+=e.buildSelectors(e.styles[n]),t+="}")})),t},t.buildSelectors=function(e){var t=this,n="";return D(e,(function(e,r){r=("#"+t.id+" "+r).trim(),n+=r+" {",D(e,(function(e,t){(e||0===e)&&(n+=t+": "+e+";")})),n+="}"})),n},e}(),kn=function(){function e(e,t,n,r){this.slides=[],this.options={},this.breakpoints=[],R(_n,r||{}),R(R(this.options,_n),t||{}),this.contents=e,this.config=O({},En,n||{}),this.id=this.config.id||ge("splide"),this.Style=new Cn(this.id,this.options),this.Direction=lt(0,0,this.options),ne(this.contents.length,"Provide at least 1 content."),this.init()}e.clean=function(e){var t=Ke(e).on,n=e.root,r=K(n,"."+Pt);t(be,(function(){q(N(n,"style"))})),q(r)};var t=e.prototype;return t.init=function(){this.parseBreakpoints(),this.initSlides(),this.registerRootStyles(),this.registerTrackStyles(),this.registerSlideStyles(),this.registerListStyles()},t.initSlides=function(){var e=this;E(this.slides,this.contents.map((function(t,n){(t=v(t)?{html:t}:t).styles=t.styles||{},t.attrs=t.attrs||{},e.cover(t);var r=e.options.classes.slide+" "+(0===n?qt:"");return O(t.attrs,{class:(r+" "+(t.attrs.class||"")).trim(),style:e.buildStyles(t.styles)}),t}))),this.isLoop()&&this.generateClones(this.slides)},t.registerRootStyles=function(){var e=this;this.breakpoints.forEach((function(t){var n=t[0],r=t[1];e.Style.rule(" ","max-width",J(r.width),n)}))},t.registerTrackStyles=function(){var e=this,t=this.Style,n="."+Lt;this.breakpoints.forEach((function(r){var a=r[0],i=r[1];t.rule(n,e.resolve("paddingLeft"),e.cssPadding(i,!1),a),t.rule(n,e.resolve("paddingRight"),e.cssPadding(i,!0),a),t.rule(n,"height",e.cssTrackHeight(i),a)}))},t.registerListStyles=function(){var e=this,t=this.Style,n="."+jt;this.breakpoints.forEach((function(r){var a=r[0],i=r[1];t.rule(n,"transform",e.buildTranslate(i),a),e.cssSlideHeight(i)||t.rule(n,"aspect-ratio",e.cssAspectRatio(i),a)}))},t.registerSlideStyles=function(){var e=this,t=this.Style,n="."+Tt;this.breakpoints.forEach((function(r){var a=r[0],i=r[1];t.rule(n,"width",e.cssSlideWidth(i),a),t.rule(n,"height",e.cssSlideHeight(i)||"100%",a),t.rule(n,e.resolve("marginRight"),J(i.gap)||"0px",a),t.rule(n+" > img","display",i.cover?"none":"inline",a)}))},t.buildTranslate=function(e){var t=this.Direction,n=t.resolve,r=t.orient,a=[];return a.push(this.cssOffsetClones(e)),a.push(this.cssOffsetGaps(e)),this.isCenter(e)&&(a.push(this.buildCssValue(r(-50),"%")),a.push.apply(a,this.cssOffsetCenter(e))),a.filter(Boolean).map((function(e){return"translate"+n("X")+"("+e+")"})).join(" ")},t.cssOffsetClones=function(e){var t=this.Direction,n=t.resolve,r=t.orient,a=this.getCloneCount();if(this.isFixedWidth(e)){var i=this.parseCssValue(e[n("fixedWidth")]),s=i.value,o=i.unit;return this.buildCssValue(r(s)*a,o)}return r(100*a/e.perPage)+"%"},t.cssOffsetCenter=function(e){var t=this.Direction,n=t.resolve,r=t.orient;if(this.isFixedWidth(e)){var a=this.parseCssValue(e[n("fixedWidth")]),i=a.value,s=a.unit;return[this.buildCssValue(r(i/2),s)]}var o=[],l=e.perPage,u=e.gap;if(o.push(r(50/l)+"%"),u){var c=this.parseCssValue(u),d=c.value,f=c.unit,p=(d/l-d)/2;o.push(this.buildCssValue(r(p),f))}return o},t.cssOffsetGaps=function(e){var t=this.getCloneCount();if(t&&e.gap){var n=this.Direction.orient,r=this.parseCssValue(e.gap),a=r.value,i=r.unit;if(this.isFixedWidth(e))return this.buildCssValue(n(a*t),i);var s=t/e.perPage;return this.buildCssValue(n(s*a),i)}return""},t.resolve=function(e){return fe(this.Direction.resolve(e))},t.cssPadding=function(e,t){var n=e.padding,r=this.Direction.resolve(t?"right":"left",!0);return n&&J(n[r]||(h(n)?0:n))||"0px"},t.cssTrackHeight=function(e){var t="";return this.isVertical()&&(ne(t=this.cssHeight(e),'"height" is missing.'),t="calc("+t+" - "+this.cssPadding(e,!1)+" - "+this.cssPadding(e,!0)+")"),t},t.cssHeight=function(e){return J(e.height)},t.cssSlideWidth=function(e){return e.autoWidth?"":J(e.fixedWidth)||(this.isVertical()?"":this.cssSlideSize(e))},t.cssSlideHeight=function(e){return J(e.fixedHeight)||(this.isVertical()?e.autoHeight?"":this.cssSlideSize(e):this.cssHeight(e))},t.cssSlideSize=function(e){var t=J(e.gap);return"calc((100%"+(t&&" + "+t)+")/"+(e.perPage||1)+(t&&" - "+t)+")"},t.cssAspectRatio=function(e){var t=e.heightRatio;return t?""+1/t:""},t.buildCssValue=function(e,t){return""+e+t},t.parseCssValue=function(e){return v(e)?{value:parseFloat(e)||0,unit:e.replace(/\d*(\.\d*)?/,"")||"px"}:{value:e,unit:"px"}},t.parseBreakpoints=function(){var e=this,t=this.options.breakpoints;this.breakpoints.push(["default",this.options]),t&&D(t,(function(t,n){e.breakpoints.push([n,R(R({},e.options),t)])}))},t.isFixedWidth=function(e){return!!e[this.Direction.resolve("fixedWidth")]},t.isLoop=function(){return this.options.type===sn},t.isCenter=function(e){if("center"===e.focus){if(this.isLoop())return!0;if(this.options.type===an)return!this.options.trimSpace}return!1},t.isVertical=function(){return this.options.direction===st},t.buildClasses=function(){var e=this.options;return[kt,kt+"--"+e.type,kt+"--"+e.direction,e.drag&&kt+"--draggable",e.isNavigation&&kt+"--nav",qt,!this.config.hidden&&"is-rendered"].filter(Boolean).join(" ")},t.buildAttrs=function(e){var t="";return D(e,(function(e,n){t+=e?" "+fe(n)+'="'+e+'"':""})),t.trim()},t.buildStyles=function(e){var t="";return D(e,(function(e,n){t+=" "+fe(n)+":"+e+";"})),t.trim()},t.renderSlides=function(){var e=this,t=this.config.slideTag;return this.slides.map((function(n){return"<"+t+" "+e.buildAttrs(n.attrs)+">"+(n.html||"")+"</"+t+">"})).join("")},t.cover=function(e){var t=e.styles,n=e.html,r=void 0===n?"":n;if(this.options.cover&&!this.options.lazyLoad){var a=r.match(/<img.*?src\s*=\s*(['"])(.+?)\1.*?>/);a&&a[2]&&(t.background="center/cover no-repeat url('"+a[2]+"')")}},t.generateClones=function(e){for(var t=this.options.classes,n=this.getCloneCount(),r=e.slice();r.length<n;)E(r,r);E(r.slice(-n).reverse(),r.slice(0,n)).forEach((function(r,a){var i=O({},r.attrs,{class:r.attrs.class+" "+t.clone}),s=O({},r,{attrs:i});a<n?e.unshift(s):e.push(s)}))},t.getCloneCount=function(){if(this.isLoop()){var e=this.options;return e.clones?e.clones:ae.apply(void 0,this.breakpoints.map((function(e){return e[1].perPage})))*((e.flickMaxPages||1)+1)}return 0},t.renderArrows=function(){var e="";return e+='<div class="'+this.options.classes.arrows+'">',e+=this.renderArrow(!0),(e+=this.renderArrow(!1))+"</div>"},t.renderArrow=function(e){var t=this.options,n=t.classes,r=t.i18n,a={class:n.arrow+" "+(e?n.prev:n.next),type:"button",ariaLabel:e?r.prev:r.next};return"<button "+this.buildAttrs(a)+'><svg xmlns="'+ln+'" viewBox="0 0 '+"40 "+'40" width="'+'40" height="'+'40"><path d="'+(this.options.arrowPath||un)+'" /></svg></button>'},t.html=function(){var e=this.config,t=e.rootClass,n=e.listTag,r=e.arrows,a=e.beforeTrack,i=e.afterTrack,s=e.slider,o=e.beforeSlider,l=e.afterSlider,u="";return u+='<div id="'+this.id+'" class="'+this.buildClasses()+" "+(t||"")+'">',u+="<style>"+this.Style.build()+"</style>",s&&(u+=o||"",u+='<div class="splide__slider">'),u+=a||"",r&&(u+=this.renderArrows()),u+='<div class="splide__track">',u+="<"+n+' class="splide__list">',u+=this.renderSlides(),u+="</"+n+">",u+="</div>",u+=i||"",s&&(u+="</div>",u+=l||""),u+="</div>"},e}();t.CLASSES=en,t.CLASS_ACTIVE=qt,t.CLASS_ARROW=Dt,t.CLASS_ARROWS=At,t.CLASS_ARROW_NEXT=Rt,t.CLASS_ARROW_PREV=Ot,t.CLASS_CLONE=Pt,t.CLASS_CONTAINER=Nt,t.CLASS_FOCUS_IN=Xt,t.CLASS_INITIALIZED=Ht,t.CLASS_LIST=jt,t.CLASS_LOADING=Kt,t.CLASS_NEXT=Qt,t.CLASS_OVERFLOW=Zt,t.CLASS_PAGINATION=Mt,t.CLASS_PAGINATION_PAGE=It,t.CLASS_PREV=Gt,t.CLASS_PROGRESS=Ft,t.CLASS_PROGRESS_BAR=zt,t.CLASS_ROOT=kt,t.CLASS_SLIDE=Tt,t.CLASS_SPINNER=Vt,t.CLASS_SR=Wt,t.CLASS_TOGGLE=Ut,t.CLASS_TOGGLE_PAUSE=Bt,t.CLASS_TOGGLE_PLAY=$t,t.CLASS_TRACK=Lt,t.CLASS_VISIBLE=Yt,t.DEFAULTS=_n,t.EVENT_ACTIVE=xe,t.EVENT_ARROWS_MOUNTED=Fe,t.EVENT_ARROWS_UPDATED=ze,t.EVENT_AUTOPLAY_PAUSE=He,t.EVENT_AUTOPLAY_PLAY=Ve,t.EVENT_AUTOPLAY_PLAYING=We,t.EVENT_CLICK=we,t.EVENT_DESTROY=Ie,t.EVENT_DRAG=Ne,t.EVENT_DRAGGED=De,t.EVENT_DRAGGING=Ae,t.EVENT_END_INDEX_CHANGED=Ye,t.EVENT_HIDDEN=ke,t.EVENT_INACTIVE=Ee,t.EVENT_LAZYLOAD_LOADED=qe,t.EVENT_MOUNTED=be,t.EVENT_MOVE=_e,t.EVENT_MOVED=Se,t.EVENT_NAVIGATION_MOUNTED=Be,t.EVENT_OVERFLOW=Me,t.EVENT_PAGINATION_MOUNTED=Ue,t.EVENT_PAGINATION_UPDATED=$e,t.EVENT_READY=ye,t.EVENT_REFRESH=Le,t.EVENT_RESIZE=Te,t.EVENT_RESIZED=Pe,t.EVENT_SCROLL=Oe,t.EVENT_SCROLLED=Re,t.EVENT_SHIFTED=Qe,t.EVENT_SLIDE_KEYDOWN=Ge,t.EVENT_UPDATED=je,t.EVENT_VISIBLE=Ce,t.EventBinder=ve,t.EventInterface=Ke,t.FADE=on,t.LOOP=sn,t.LTR="ltr",t.RTL=it,t.RequestInterval=Xe,t.SLIDE=an,t.STATUS_CLASSES=Jt,t.Splide=xn,t.SplideRenderer=kn,t.State=Ze,t.TTB=st,t.Throttle=Je,t.default=xn},8679:(e,t,n)=>{"use strict";var r=n(1296),a={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},s={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},o={};function l(e){return r.isMemo(e)?s:o[e.$$typeof]||a}o[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},o[r.Memo]=s;var u=Object.defineProperty,c=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,f=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var a=p(n);a&&a!==h&&e(t,a,r)}var s=c(n);d&&(s=s.concat(d(n)));for(var o=l(t),m=l(n),g=0;g<s.length;++g){var v=s[g];if(!(i[v]||r&&r[v]||m&&m[v]||o&&o[v])){var b=f(n,v);try{u(t,v,b)}catch(e){}}}}return t}},6103:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,a=n?Symbol.for("react.portal"):60106,i=n?Symbol.for("react.fragment"):60107,s=n?Symbol.for("react.strict_mode"):60108,o=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,u=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,f=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,g=n?Symbol.for("react.lazy"):60116,v=n?Symbol.for("react.block"):60121,b=n?Symbol.for("react.fundamental"):60117,y=n?Symbol.for("react.responder"):60118,_=n?Symbol.for("react.scope"):60119;function S(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case d:case i:case o:case s:case p:return e;default:switch(e=e&&e.$$typeof){case u:case f:case g:case m:case l:return e;default:return t}}case a:return t}}}function w(e){return S(e)===d}t.AsyncMode=c,t.ConcurrentMode=d,t.ContextConsumer=u,t.ContextProvider=l,t.Element=r,t.ForwardRef=f,t.Fragment=i,t.Lazy=g,t.Memo=m,t.Portal=a,t.Profiler=o,t.StrictMode=s,t.Suspense=p,t.isAsyncMode=function(e){return w(e)||S(e)===c},t.isConcurrentMode=w,t.isContextConsumer=function(e){return S(e)===u},t.isContextProvider=function(e){return S(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return S(e)===f},t.isFragment=function(e){return S(e)===i},t.isLazy=function(e){return S(e)===g},t.isMemo=function(e){return S(e)===m},t.isPortal=function(e){return S(e)===a},t.isProfiler=function(e){return S(e)===o},t.isStrictMode=function(e){return S(e)===s},t.isSuspense=function(e){return S(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===d||e===o||e===s||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===m||e.$$typeof===l||e.$$typeof===u||e.$$typeof===f||e.$$typeof===b||e.$$typeof===y||e.$$typeof===_||e.$$typeof===v)},t.typeOf=S},1296:(e,t,n)=>{"use strict";e.exports=n(6103)},4602:(e,t,n)=>{"use strict";n.r(t)},2661:(e,t,n)=>{"use strict";n.r(t)},9692:(e,t,n)=>{"use strict";n.r(t)},9721:(e,t,n)=>{"use strict";n.r(t)},9599:(e,t,n)=>{"use strict";n.r(t)},6236:(e,t,n)=>{"use strict";n.r(t)},5549:(e,t,n)=>{"use strict";n.r(t)},3562:(e,t,n)=>{"use strict";n.r(t)},7823:(e,t,n)=>{"use strict";n.r(t)},3448:(e,t,n)=>{"use strict";n.r(t)},1557:(e,t,n)=>{"use strict";n.r(t)},1515:(e,t,n)=>{"use strict";n.r(t)},6497:(e,t,n)=>{"use strict";n.r(t)},7028:(e,t,n)=>{"use strict";n.r(t)},3915:(e,t,n)=>{"use strict";n.r(t)},1273:(e,t,n)=>{"use strict";n.r(t)},3831:(e,t,n)=>{"use strict";n.r(t)},5890:(e,t,n)=>{"use strict";n.r(t)},99:(e,t,n)=>{"use strict";n.r(t)},596:(e,t,n)=>{"use strict";n.r(t)},8405:(e,t,n)=>{"use strict";n.r(t)},8478:(e,t,n)=>{"use strict";n.r(t)},3024:(e,t,n)=>{"use strict";n.r(t)},8464:(e,t,n)=>{"use strict";n.r(t)},5353:(e,t,n)=>{"use strict";n.r(t)},9532:(e,t,n)=>{"use strict";n.r(t)},6989:(e,t,n)=>{"use strict";n.r(t)},247:(e,t,n)=>{"use strict";n.r(t)},3853:(e,t,n)=>{"use strict";n.r(t)},7815:(e,t,n)=>{"use strict";n.r(t)},6139:(e,t,n)=>{"use strict";n.r(t)},8876:(e,t,n)=>{"use strict";n.r(t)},1112:(e,t,n)=>{"use strict";n.r(t)},1443:(e,t,n)=>{"use strict";n.r(t)},4189:(e,t,n)=>{"use strict";n.r(t)},5776:(e,t,n)=>{"use strict";n.r(t)},6e3:(e,t,n)=>{"use strict";n.r(t)},6559:(e,t,n)=>{"use strict";n.r(t)},2727:(e,t,n)=>{"use strict";n.r(t)},5612:(e,t,n)=>{"use strict";n.r(t)},3486:(e,t,n)=>{"use strict";n.r(t)},9510:(e,t,n)=>{"use strict";n.r(t)},8523:(e,t,n)=>{"use strict";n.r(t)},350:(e,t,n)=>{"use strict";n.r(t)},9702:(e,t,n)=>{"use strict";n.r(t)},7439:(e,t,n)=>{"use strict";n.r(t)},2845:(e,t,n)=>{"use strict";n.r(t)},4448:(e,t,n)=>{"use strict";var r=n(7294),a=n(3840);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var s=new Set,o={};function l(e,t){u(e,t),u(e+"Capture",t)}function u(e,t){for(o[e]=t,e=0;e<t.length;e++)s.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,a,i,s){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=s}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var v=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function y(e,t,n,r){var a=g.hasOwnProperty(t)?g[t]:null;(null!==a?0!==a.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!d.call(h,e)||!d.call(p,e)&&(f.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(v,b);g[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(v,b);g[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(v,b);g[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var _=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,S=Symbol.for("react.element"),w=Symbol.for("react.portal"),x=Symbol.for("react.fragment"),E=Symbol.for("react.strict_mode"),C=Symbol.for("react.profiler"),k=Symbol.for("react.provider"),L=Symbol.for("react.context"),j=Symbol.for("react.forward_ref"),T=Symbol.for("react.suspense"),P=Symbol.for("react.suspense_list"),N=Symbol.for("react.memo"),A=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var D=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var O=Symbol.iterator;function R(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=O&&e[O]||e["@@iterator"])?e:null}var M,I=Object.assign;function F(e){if(void 0===M)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);M=t&&t[1]||""}return"\n"+M+e}var z=!1;function U(e,t){if(!e||z)return"";z=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var a=t.stack.split("\n"),i=r.stack.split("\n"),s=a.length-1,o=i.length-1;1<=s&&0<=o&&a[s]!==i[o];)o--;for(;1<=s&&0<=o;s--,o--)if(a[s]!==i[o]){if(1!==s||1!==o)do{if(s--,0>--o||a[s]!==i[o]){var l="\n"+a[s].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}}while(1<=s&&0<=o);break}}}finally{z=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?F(e):""}function $(e){switch(e.tag){case 5:return F(e.type);case 16:return F("Lazy");case 13:return F("Suspense");case 19:return F("SuspenseList");case 0:case 2:case 15:return U(e.type,!1);case 11:return U(e.type.render,!1);case 1:return U(e.type,!0);default:return""}}function B(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case x:return"Fragment";case w:return"Portal";case C:return"Profiler";case E:return"StrictMode";case T:return"Suspense";case P:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case L:return(e.displayName||"Context")+".Consumer";case k:return(e._context.displayName||"Context")+".Provider";case j:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case N:return null!==(t=e.displayName||null)?t:B(e.type)||"Memo";case A:t=e._payload,e=e._init;try{return B(e(t))}catch(e){}}return null}function V(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return B(t);case 8:return t===E?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function W(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function H(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function q(e){e._valueTracker||(e._valueTracker=function(e){var t=H(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function G(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=H(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Y(e,t){var n=t.checked;return I({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function K(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=W(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&y(e,"checked",t,!1)}function Z(e,t){X(e,t);var n=W(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,W(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&Q(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+W(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return I({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(te(n)){if(1<n.length)throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:W(n)}}function ie(e,t){var n=W(t.value),r=W(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function se(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function oe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?oe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ue,ce,de=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ue=ue||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ue.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function fe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ge(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ve=I({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function be(e,t){if(t){if(ve[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function ye(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var _e=null;function Se(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var we=null,xe=null,Ee=null;function Ce(e){if(e=ya(e)){if("function"!=typeof we)throw Error(i(280));var t=e.stateNode;t&&(t=Sa(t),we(e.stateNode,e.type,t))}}function ke(e){xe?Ee?Ee.push(e):Ee=[e]:xe=e}function Le(){if(xe){var e=xe,t=Ee;if(Ee=xe=null,Ce(e),t)for(e=0;e<t.length;e++)Ce(t[e])}}function je(e,t){return e(t)}function Te(){}var Pe=!1;function Ne(e,t,n){if(Pe)return e(t,n);Pe=!0;try{return je(e,t,n)}finally{Pe=!1,(null!==xe||null!==Ee)&&(Te(),Le())}}function Ae(e,t){var n=e.stateNode;if(null===n)return null;var r=Sa(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var De=!1;if(c)try{var Oe={};Object.defineProperty(Oe,"passive",{get:function(){De=!0}}),window.addEventListener("test",Oe,Oe),window.removeEventListener("test",Oe,Oe)}catch(ce){De=!1}function Re(e,t,n,r,a,i,s,o,l){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var Me=!1,Ie=null,Fe=!1,ze=null,Ue={onError:function(e){Me=!0,Ie=e}};function $e(e,t,n,r,a,i,s,o,l){Me=!1,Ie=null,Re.apply(Ue,arguments)}function Be(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ve(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function We(e){if(Be(e)!==e)throw Error(i(188))}function He(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Be(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var s=a.alternate;if(null===s){if(null!==(r=a.return)){n=r;continue}break}if(a.child===s.child){for(s=a.child;s;){if(s===n)return We(a),e;if(s===r)return We(a),t;s=s.sibling}throw Error(i(188))}if(n.return!==r.return)n=a,r=s;else{for(var o=!1,l=a.child;l;){if(l===n){o=!0,n=a,r=s;break}if(l===r){o=!0,r=a,n=s;break}l=l.sibling}if(!o){for(l=s.child;l;){if(l===n){o=!0,n=s,r=a;break}if(l===r){o=!0,r=s,n=a;break}l=l.sibling}if(!o)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e))?qe(e):null}function qe(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=qe(e);if(null!==t)return t;e=e.sibling}return null}var Ge=a.unstable_scheduleCallback,Qe=a.unstable_cancelCallback,Ye=a.unstable_shouldYield,Ke=a.unstable_requestPaint,Xe=a.unstable_now,Ze=a.unstable_getCurrentPriorityLevel,Je=a.unstable_ImmediatePriority,et=a.unstable_UserBlockingPriority,tt=a.unstable_NormalPriority,nt=a.unstable_LowPriority,rt=a.unstable_IdlePriority,at=null,it=null,st=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(ot(e)/lt|0)|0},ot=Math.log,lt=Math.LN2,ut=64,ct=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ft(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,i=e.pingedLanes,s=268435455&n;if(0!==s){var o=s&~a;0!==o?r=dt(o):0!=(i&=s)&&(r=dt(i))}else 0!=(s=n&~a)?r=dt(s):0!==i&&(r=dt(i));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&a)&&((a=r&-r)>=(i=t&-t)||16===a&&0!=(4194240&i)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-st(t)),r|=e[n],t&=~a;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=ut;return 0==(4194240&(ut<<=1))&&(ut=64),e}function gt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function vt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-st(t)]=n}function bt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-st(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}var yt=0;function _t(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var St,wt,xt,Et,Ct,kt=!1,Lt=[],jt=null,Tt=null,Pt=null,Nt=new Map,At=new Map,Dt=[],Ot="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Rt(e,t){switch(e){case"focusin":case"focusout":jt=null;break;case"dragenter":case"dragleave":Tt=null;break;case"mouseover":case"mouseout":Pt=null;break;case"pointerover":case"pointerout":Nt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":At.delete(t.pointerId)}}function Mt(e,t,n,r,a,i){return null===e||e.nativeEvent!==i?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:i,targetContainers:[a]},null!==t&&null!==(t=ya(t))&&wt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function It(e){var t=ba(e.target);if(null!==t){var n=Be(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ve(n)))return e.blockedOn=t,void Ct(e.priority,(function(){xt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Ft(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Yt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=ya(n))&&wt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);_e=r,n.target.dispatchEvent(r),_e=null,t.shift()}return!0}function zt(e,t,n){Ft(e)&&n.delete(t)}function Ut(){kt=!1,null!==jt&&Ft(jt)&&(jt=null),null!==Tt&&Ft(Tt)&&(Tt=null),null!==Pt&&Ft(Pt)&&(Pt=null),Nt.forEach(zt),At.forEach(zt)}function $t(e,t){e.blockedOn===t&&(e.blockedOn=null,kt||(kt=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,Ut)))}function Bt(e){function t(t){return $t(t,e)}if(0<Lt.length){$t(Lt[0],e);for(var n=1;n<Lt.length;n++){var r=Lt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==jt&&$t(jt,e),null!==Tt&&$t(Tt,e),null!==Pt&&$t(Pt,e),Nt.forEach(t),At.forEach(t),n=0;n<Dt.length;n++)(r=Dt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Dt.length&&null===(n=Dt[0]).blockedOn;)It(n),null===n.blockedOn&&Dt.shift()}var Vt=_.ReactCurrentBatchConfig,Wt=!0;function Ht(e,t,n,r){var a=yt,i=Vt.transition;Vt.transition=null;try{yt=1,Gt(e,t,n,r)}finally{yt=a,Vt.transition=i}}function qt(e,t,n,r){var a=yt,i=Vt.transition;Vt.transition=null;try{yt=4,Gt(e,t,n,r)}finally{yt=a,Vt.transition=i}}function Gt(e,t,n,r){if(Wt){var a=Yt(e,t,n,r);if(null===a)Wr(e,t,r,Qt,n),Rt(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return jt=Mt(jt,e,t,n,r,a),!0;case"dragenter":return Tt=Mt(Tt,e,t,n,r,a),!0;case"mouseover":return Pt=Mt(Pt,e,t,n,r,a),!0;case"pointerover":var i=a.pointerId;return Nt.set(i,Mt(Nt.get(i)||null,e,t,n,r,a)),!0;case"gotpointercapture":return i=a.pointerId,At.set(i,Mt(At.get(i)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(Rt(e,r),4&t&&-1<Ot.indexOf(e)){for(;null!==a;){var i=ya(a);if(null!==i&&St(i),null===(i=Yt(e,t,n,r))&&Wr(e,t,r,Qt,n),i===a)break;a=i}null!==a&&r.stopPropagation()}else Wr(e,t,r,null,n)}}var Qt=null;function Yt(e,t,n,r){if(Qt=null,null!==(e=ba(e=Se(r))))if(null===(t=Be(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=Ve(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Qt=e,null}function Kt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ze()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Xt=null,Zt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Zt,r=n.length,a="value"in Xt?Xt.value:Xt.textContent,i=a.length;for(e=0;e<r&&n[e]===a[e];e++);var s=r-e;for(t=1;t<=s&&n[r-t]===a[i-t];t++);return Jt=a.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function an(e){function t(t,n,r,a,i){for(var s in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(s)&&(t=e[s],this[s]=t?t(a):a[s]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return I(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var sn,on,ln,un={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=an(un),dn=I({},un,{view:0,detail:0}),fn=an(dn),pn=I({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Cn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ln&&(ln&&"mousemove"===e.type?(sn=e.screenX-ln.screenX,on=e.screenY-ln.screenY):on=sn=0,ln=e),sn)},movementY:function(e){return"movementY"in e?e.movementY:on}}),hn=an(pn),mn=an(I({},pn,{dataTransfer:0})),gn=an(I({},dn,{relatedTarget:0})),vn=an(I({},un,{animationName:0,elapsedTime:0,pseudoElement:0})),bn=I({},un,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),yn=an(bn),_n=an(I({},un,{data:0})),Sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},wn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},xn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function En(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=xn[e])&&!!t[e]}function Cn(){return En}var kn=I({},dn,{key:function(e){if(e.key){var t=Sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?wn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Cn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Ln=an(kn),jn=an(I({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Tn=an(I({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Cn})),Pn=an(I({},un,{propertyName:0,elapsedTime:0,pseudoElement:0})),Nn=I({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),An=an(Nn),Dn=[9,13,27,32],On=c&&"CompositionEvent"in window,Rn=null;c&&"documentMode"in document&&(Rn=document.documentMode);var Mn=c&&"TextEvent"in window&&!Rn,In=c&&(!On||Rn&&8<Rn&&11>=Rn),Fn=String.fromCharCode(32),zn=!1;function Un(e,t){switch(e){case"keyup":return-1!==Dn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function $n(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Bn=!1,Vn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Wn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Vn[e.type]:"textarea"===t}function Hn(e,t,n,r){ke(r),0<(t=qr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var qn=null,Gn=null;function Qn(e){Fr(e,0)}function Yn(e){if(G(_a(e)))return e}function Kn(e,t){if("change"===e)return t}var Xn=!1;if(c){var Zn;if(c){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}Zn=Jn}else Zn=!1;Xn=Zn&&(!document.documentMode||9<document.documentMode)}function tr(){qn&&(qn.detachEvent("onpropertychange",nr),Gn=qn=null)}function nr(e){if("value"===e.propertyName&&Yn(Gn)){var t=[];Hn(t,Gn,e,Se(e)),Ne(Qn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Gn=n,(qn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Yn(Gn)}function ir(e,t){if("click"===e)return Yn(t)}function sr(e,t){if("input"===e||"change"===e)return Yn(t)}var or="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function lr(e,t){if(or(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!d.call(t,a)||!or(e[a],t[a]))return!1}return!0}function ur(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=ur(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ur(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fr(){for(var e=window,t=Q();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Q((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=fr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&dr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=n.textContent.length,i=Math.min(r.start,a);r=void 0===r.end?i:Math.min(r.end,a),!e.extend&&i>r&&(a=r,r=i,i=a),a=cr(n,i);var s=cr(n,r);a&&s&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==s.node||e.focusOffset!==s.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),i>r?(e.addRange(t),e.extend(s.node,s.offset)):(t.setEnd(s.node,s.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=c&&"documentMode"in document&&11>=document.documentMode,gr=null,vr=null,br=null,yr=!1;function _r(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;yr||null==gr||gr!==Q(r)||(r="selectionStart"in(r=gr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},br&&lr(br,r)||(br=r,0<(r=qr(vr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=gr)))}function Sr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var wr={animationend:Sr("Animation","AnimationEnd"),animationiteration:Sr("Animation","AnimationIteration"),animationstart:Sr("Animation","AnimationStart"),transitionend:Sr("Transition","TransitionEnd")},xr={},Er={};function Cr(e){if(xr[e])return xr[e];if(!wr[e])return e;var t,n=wr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Er)return xr[e]=n[t];return e}c&&(Er=document.createElement("div").style,"AnimationEvent"in window||(delete wr.animationend.animation,delete wr.animationiteration.animation,delete wr.animationstart.animation),"TransitionEvent"in window||delete wr.transitionend.transition);var kr=Cr("animationend"),Lr=Cr("animationiteration"),jr=Cr("animationstart"),Tr=Cr("transitionend"),Pr=new Map,Nr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Ar(e,t){Pr.set(e,t),l(t,[e])}for(var Dr=0;Dr<Nr.length;Dr++){var Or=Nr[Dr];Ar(Or.toLowerCase(),"on"+(Or[0].toUpperCase()+Or.slice(1)))}Ar(kr,"onAnimationEnd"),Ar(Lr,"onAnimationIteration"),Ar(jr,"onAnimationStart"),Ar("dblclick","onDoubleClick"),Ar("focusin","onFocus"),Ar("focusout","onBlur"),Ar(Tr,"onTransitionEnd"),u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Rr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Mr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Rr));function Ir(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,s,o,l,u){if($e.apply(this,arguments),Me){if(!Me)throw Error(i(198));var c=Ie;Me=!1,Ie=null,Fe||(Fe=!0,ze=c)}}(r,t,void 0,e),e.currentTarget=null}function Fr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var s=r.length-1;0<=s;s--){var o=r[s],l=o.instance,u=o.currentTarget;if(o=o.listener,l!==i&&a.isPropagationStopped())break e;Ir(a,o,u),i=l}else for(s=0;s<r.length;s++){if(l=(o=r[s]).instance,u=o.currentTarget,o=o.listener,l!==i&&a.isPropagationStopped())break e;Ir(a,o,u),i=l}}}if(Fe)throw e=ze,Fe=!1,ze=null,e}function zr(e,t){var n=t[ma];void 0===n&&(n=t[ma]=new Set);var r=e+"__bubble";n.has(r)||(Vr(t,e,2,!1),n.add(r))}function Ur(e,t,n){var r=0;t&&(r|=4),Vr(n,e,r,t)}var $r="_reactListening"+Math.random().toString(36).slice(2);function Br(e){if(!e[$r]){e[$r]=!0,s.forEach((function(t){"selectionchange"!==t&&(Mr.has(t)||Ur(t,!1,e),Ur(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[$r]||(t[$r]=!0,Ur("selectionchange",!1,t))}}function Vr(e,t,n,r){switch(Kt(t)){case 1:var a=Ht;break;case 4:a=qt;break;default:a=Gt}n=a.bind(null,t,n,e),a=void 0,!De||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Wr(e,t,n,r,a){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var s=r.tag;if(3===s||4===s){var o=r.stateNode.containerInfo;if(o===a||8===o.nodeType&&o.parentNode===a)break;if(4===s)for(s=r.return;null!==s;){var l=s.tag;if((3===l||4===l)&&((l=s.stateNode.containerInfo)===a||8===l.nodeType&&l.parentNode===a))return;s=s.return}for(;null!==o;){if(null===(s=ba(o)))return;if(5===(l=s.tag)||6===l){r=i=s;continue e}o=o.parentNode}}r=r.return}Ne((function(){var r=i,a=Se(n),s=[];e:{var o=Pr.get(e);if(void 0!==o){var l=cn,u=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":l=Ln;break;case"focusin":u="focus",l=gn;break;case"focusout":u="blur",l=gn;break;case"beforeblur":case"afterblur":l=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Tn;break;case kr:case Lr:case jr:l=vn;break;case Tr:l=Pn;break;case"scroll":l=fn;break;case"wheel":l=An;break;case"copy":case"cut":case"paste":l=yn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=jn}var c=0!=(4&t),d=!c&&"scroll"===e,f=c?null!==o?o+"Capture":null:o;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==f&&null!=(m=Ae(h,f))&&c.push(Hr(h,m,p))),d)break;h=h.return}0<c.length&&(o=new l(o,u,null,n,a),s.push({event:o,listeners:c}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(o="mouseover"===e||"pointerover"===e)||n===_e||!(u=n.relatedTarget||n.fromElement)||!ba(u)&&!u[ha])&&(l||o)&&(o=a.window===a?a:(o=a.ownerDocument)?o.defaultView||o.parentWindow:window,l?(l=r,null!==(u=(u=n.relatedTarget||n.toElement)?ba(u):null)&&(u!==(d=Be(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(l=null,u=r),l!==u)){if(c=hn,m="onMouseLeave",f="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=jn,m="onPointerLeave",f="onPointerEnter",h="pointer"),d=null==l?o:_a(l),p=null==u?o:_a(u),(o=new c(m,h+"leave",l,n,a)).target=d,o.relatedTarget=p,m=null,ba(a)===r&&((c=new c(f,h+"enter",u,n,a)).target=p,c.relatedTarget=d,m=c),d=m,l&&u)e:{for(f=u,h=0,p=c=l;p;p=Gr(p))h++;for(p=0,m=f;m;m=Gr(m))p++;for(;0<h-p;)c=Gr(c),h--;for(;0<p-h;)f=Gr(f),p--;for(;h--;){if(c===f||null!==f&&c===f.alternate)break e;c=Gr(c),f=Gr(f)}c=null}else c=null;null!==l&&Qr(s,o,l,c,!1),null!==u&&null!==d&&Qr(s,d,u,c,!0)}if("select"===(l=(o=r?_a(r):window).nodeName&&o.nodeName.toLowerCase())||"input"===l&&"file"===o.type)var g=Kn;else if(Wn(o))if(Xn)g=sr;else{g=ar;var v=rr}else(l=o.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(g=ir);switch(g&&(g=g(e,r))?Hn(s,g,n,a):(v&&v(e,o,r),"focusout"===e&&(v=o._wrapperState)&&v.controlled&&"number"===o.type&&ee(o,"number",o.value)),v=r?_a(r):window,e){case"focusin":(Wn(v)||"true"===v.contentEditable)&&(gr=v,vr=r,br=null);break;case"focusout":br=vr=gr=null;break;case"mousedown":yr=!0;break;case"contextmenu":case"mouseup":case"dragend":yr=!1,_r(s,n,a);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":_r(s,n,a)}var b;if(On)e:{switch(e){case"compositionstart":var y="onCompositionStart";break e;case"compositionend":y="onCompositionEnd";break e;case"compositionupdate":y="onCompositionUpdate";break e}y=void 0}else Bn?Un(e,n)&&(y="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(y="onCompositionStart");y&&(In&&"ko"!==n.locale&&(Bn||"onCompositionStart"!==y?"onCompositionEnd"===y&&Bn&&(b=en()):(Zt="value"in(Xt=a)?Xt.value:Xt.textContent,Bn=!0)),0<(v=qr(r,y)).length&&(y=new _n(y,e,null,n,a),s.push({event:y,listeners:v}),(b||null!==(b=$n(n)))&&(y.data=b))),(b=Mn?function(e,t){switch(e){case"compositionend":return $n(t);case"keypress":return 32!==t.which?null:(zn=!0,Fn);case"textInput":return(e=t.data)===Fn&&zn?null:e;default:return null}}(e,n):function(e,t){if(Bn)return"compositionend"===e||!On&&Un(e,t)?(e=en(),Jt=Zt=Xt=null,Bn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return In&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=qr(r,"onBeforeInput")).length&&(a=new _n("onBeforeInput","beforeinput",null,n,a),s.push({event:a,listeners:r}),a.data=b)}Fr(s,t)}))}function Hr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function qr(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,i=a.stateNode;5===a.tag&&null!==i&&(a=i,null!=(i=Ae(e,n))&&r.unshift(Hr(e,i,a)),null!=(i=Ae(e,t))&&r.push(Hr(e,i,a))),e=e.return}return r}function Gr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Qr(e,t,n,r,a){for(var i=t._reactName,s=[];null!==n&&n!==r;){var o=n,l=o.alternate,u=o.stateNode;if(null!==l&&l===r)break;5===o.tag&&null!==u&&(o=u,a?null!=(l=Ae(n,i))&&s.unshift(Hr(n,l,o)):a||null!=(l=Ae(n,i))&&s.push(Hr(n,l,o))),n=n.return}0!==s.length&&e.push({event:t,listeners:s})}var Yr=/\r\n?/g,Kr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(Yr,"\n").replace(Kr,"")}function Zr(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(i(425))}function Jr(){}var ea=null,ta=null;function na(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ra="function"==typeof setTimeout?setTimeout:void 0,aa="function"==typeof clearTimeout?clearTimeout:void 0,ia="function"==typeof Promise?Promise:void 0,sa="function"==typeof queueMicrotask?queueMicrotask:void 0!==ia?function(e){return ia.resolve(null).then(e).catch(oa)}:ra;function oa(e){setTimeout((function(){throw e}))}function la(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void Bt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);Bt(t)}function ua(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ca(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var da=Math.random().toString(36).slice(2),fa="__reactFiber$"+da,pa="__reactProps$"+da,ha="__reactContainer$"+da,ma="__reactEvents$"+da,ga="__reactListeners$"+da,va="__reactHandles$"+da;function ba(e){var t=e[fa];if(t)return t;for(var n=e.parentNode;n;){if(t=n[ha]||n[fa]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ca(e);null!==e;){if(n=e[fa])return n;e=ca(e)}return t}n=(e=n).parentNode}return null}function ya(e){return!(e=e[fa]||e[ha])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function _a(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function Sa(e){return e[pa]||null}var wa=[],xa=-1;function Ea(e){return{current:e}}function Ca(e){0>xa||(e.current=wa[xa],wa[xa]=null,xa--)}function ka(e,t){xa++,wa[xa]=e.current,e.current=t}var La={},ja=Ea(La),Ta=Ea(!1),Pa=La;function Na(e,t){var n=e.type.contextTypes;if(!n)return La;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,i={};for(a in n)i[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function Aa(e){return null!=e.childContextTypes}function Da(){Ca(Ta),Ca(ja)}function Oa(e,t,n){if(ja.current!==La)throw Error(i(168));ka(ja,t),ka(Ta,n)}function Ra(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in t))throw Error(i(108,V(e)||"Unknown",a));return I({},n,r)}function Ma(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||La,Pa=ja.current,ka(ja,e),ka(Ta,Ta.current),!0}function Ia(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=Ra(e,t,Pa),r.__reactInternalMemoizedMergedChildContext=e,Ca(Ta),Ca(ja),ka(ja,e)):Ca(Ta),ka(Ta,n)}var Fa=null,za=!1,Ua=!1;function $a(e){null===Fa?Fa=[e]:Fa.push(e)}function Ba(){if(!Ua&&null!==Fa){Ua=!0;var e=0,t=yt;try{var n=Fa;for(yt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Fa=null,za=!1}catch(t){throw null!==Fa&&(Fa=Fa.slice(e+1)),Ge(Je,Ba),t}finally{yt=t,Ua=!1}}return null}var Va=[],Wa=0,Ha=null,qa=0,Ga=[],Qa=0,Ya=null,Ka=1,Xa="";function Za(e,t){Va[Wa++]=qa,Va[Wa++]=Ha,Ha=e,qa=t}function Ja(e,t,n){Ga[Qa++]=Ka,Ga[Qa++]=Xa,Ga[Qa++]=Ya,Ya=e;var r=Ka;e=Xa;var a=32-st(r)-1;r&=~(1<<a),n+=1;var i=32-st(t)+a;if(30<i){var s=a-a%5;i=(r&(1<<s)-1).toString(32),r>>=s,a-=s,Ka=1<<32-st(t)+a|n<<a|r,Xa=i+e}else Ka=1<<i|n<<a|r,Xa=e}function ei(e){null!==e.return&&(Za(e,1),Ja(e,1,0))}function ti(e){for(;e===Ha;)Ha=Va[--Wa],Va[Wa]=null,qa=Va[--Wa],Va[Wa]=null;for(;e===Ya;)Ya=Ga[--Qa],Ga[Qa]=null,Xa=Ga[--Qa],Ga[Qa]=null,Ka=Ga[--Qa],Ga[Qa]=null}var ni=null,ri=null,ai=!1,ii=null;function si(e,t){var n=Au(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function oi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ni=e,ri=ua(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ni=e,ri=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Ya?{id:Ka,overflow:Xa}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Au(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ni=e,ri=null,!0);default:return!1}}function li(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function ui(e){if(ai){var t=ri;if(t){var n=t;if(!oi(e,t)){if(li(e))throw Error(i(418));t=ua(n.nextSibling);var r=ni;t&&oi(e,t)?si(r,n):(e.flags=-4097&e.flags|2,ai=!1,ni=e)}}else{if(li(e))throw Error(i(418));e.flags=-4097&e.flags|2,ai=!1,ni=e}}}function ci(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ni=e}function di(e){if(e!==ni)return!1;if(!ai)return ci(e),ai=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!na(e.type,e.memoizedProps)),t&&(t=ri)){if(li(e))throw fi(),Error(i(418));for(;t;)si(e,t),t=ua(t.nextSibling)}if(ci(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ri=ua(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ri=null}}else ri=ni?ua(e.stateNode.nextSibling):null;return!0}function fi(){for(var e=ri;e;)e=ua(e.nextSibling)}function pi(){ri=ni=null,ai=!1}function hi(e){null===ii?ii=[e]:ii.push(e)}var mi=_.ReactCurrentBatchConfig;function gi(e,t){if(e&&e.defaultProps){for(var n in t=I({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var vi=Ea(null),bi=null,yi=null,_i=null;function Si(){_i=yi=bi=null}function wi(e){var t=vi.current;Ca(vi),e._currentValue=t}function xi(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Ei(e,t){bi=e,_i=yi=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(_o=!0),e.firstContext=null)}function Ci(e){var t=e._currentValue;if(_i!==e)if(e={context:e,memoizedValue:t,next:null},null===yi){if(null===bi)throw Error(i(308));yi=e,bi.dependencies={lanes:0,firstContext:e}}else yi=yi.next=e;return t}var ki=null;function Li(e){null===ki?ki=[e]:ki.push(e)}function ji(e,t,n,r){var a=t.interleaved;return null===a?(n.next=n,Li(t)):(n.next=a.next,a.next=n),t.interleaved=n,Ti(e,r)}function Ti(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Pi=!1;function Ni(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ai(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Di(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Oi(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Tl)){var a=r.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),r.pending=t,Ti(e,n)}return null===(a=r.interleaved)?(t.next=t,Li(r)):(t.next=a.next,a.next=t),r.interleaved=t,Ti(e,n)}function Ri(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,bt(e,n)}}function Mi(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var s={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?a=i=s:i=i.next=s,n=n.next}while(null!==n);null===i?a=i=t:i=i.next=t}else a=i=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Ii(e,t,n,r){var a=e.updateQueue;Pi=!1;var i=a.firstBaseUpdate,s=a.lastBaseUpdate,o=a.shared.pending;if(null!==o){a.shared.pending=null;var l=o,u=l.next;l.next=null,null===s?i=u:s.next=u,s=l;var c=e.alternate;null!==c&&(o=(c=c.updateQueue).lastBaseUpdate)!==s&&(null===o?c.firstBaseUpdate=u:o.next=u,c.lastBaseUpdate=l)}if(null!==i){var d=a.baseState;for(s=0,c=u=l=null,o=i;;){var f=o.lane,p=o.eventTime;if((r&f)===f){null!==c&&(c=c.next={eventTime:p,lane:0,tag:o.tag,payload:o.payload,callback:o.callback,next:null});e:{var h=e,m=o;switch(f=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,f);break e}d=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(f="function"==typeof(h=m.payload)?h.call(p,d,f):h))break e;d=I({},d,f);break e;case 2:Pi=!0}}null!==o.callback&&0!==o.lane&&(e.flags|=64,null===(f=a.effects)?a.effects=[o]:f.push(o))}else p={eventTime:p,lane:f,tag:o.tag,payload:o.payload,callback:o.callback,next:null},null===c?(u=c=p,l=d):c=c.next=p,s|=f;if(null===(o=o.next)){if(null===(o=a.shared.pending))break;o=(f=o).next,f.next=null,a.lastBaseUpdate=f,a.shared.pending=null}}if(null===c&&(l=d),a.baseState=l,a.firstBaseUpdate=u,a.lastBaseUpdate=c,null!==(t=a.shared.interleaved)){a=t;do{s|=a.lane,a=a.next}while(a!==t)}else null===i&&(a.shared.lanes=0);Il|=s,e.lanes=s,e.memoizedState=d}}function Fi(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(i(191,a));a.call(r)}}}var zi=(new r.Component).refs;function Ui(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:I({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var $i={isMounted:function(e){return!!(e=e._reactInternals)&&Be(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=tu(),a=nu(e),i=Di(r,a);i.payload=t,null!=n&&(i.callback=n),null!==(t=Oi(e,i,a))&&(ru(t,e,a,r),Ri(t,e,a))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=tu(),a=nu(e),i=Di(r,a);i.tag=1,i.payload=t,null!=n&&(i.callback=n),null!==(t=Oi(e,i,a))&&(ru(t,e,a,r),Ri(t,e,a))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=tu(),r=nu(e),a=Di(n,r);a.tag=2,null!=t&&(a.callback=t),null!==(t=Oi(e,a,r))&&(ru(t,e,r,n),Ri(t,e,r))}};function Bi(e,t,n,r,a,i,s){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,s):!(t.prototype&&t.prototype.isPureReactComponent&&lr(n,r)&&lr(a,i))}function Vi(e,t,n){var r=!1,a=La,i=t.contextType;return"object"==typeof i&&null!==i?i=Ci(i):(a=Aa(t)?Pa:ja.current,i=(r=null!=(r=t.contextTypes))?Na(e,a):La),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=$i,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=i),t}function Wi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&$i.enqueueReplaceState(t,t.state,null)}function Hi(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=zi,Ni(e);var i=t.contextType;"object"==typeof i&&null!==i?a.context=Ci(i):(i=Aa(t)?Pa:ja.current,a.context=Na(e,i)),a.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(Ui(e,t,i,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&$i.enqueueReplaceState(a,a.state,null),Ii(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}function qi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var a=r,s=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===s?t.ref:(t=function(e){var t=a.refs;t===zi&&(t=a.refs={}),null===e?delete t[s]:t[s]=e},t._stringRef=s,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function Gi(e,t){throw e=Object.prototype.toString.call(t),Error(i(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Qi(e){return(0,e._init)(e._payload)}function Yi(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Ou(e,t)).index=0,e.sibling=null,e}function s(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function o(t){return e&&null===t.alternate&&(t.flags|=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Fu(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function u(e,t,n,r){var i=n.type;return i===x?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===i||"object"==typeof i&&null!==i&&i.$$typeof===A&&Qi(i)===t.type)?((r=a(t,n.props)).ref=qi(e,t,n),r.return=e,r):((r=Ru(n.type,n.key,n.props,null,e.mode,r)).ref=qi(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=zu(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function d(e,t,n,r,i){return null===t||7!==t.tag?((t=Mu(n,e.mode,r,i)).return=e,t):((t=a(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Fu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case S:return(n=Ru(t.type,t.key,t.props,null,e.mode,n)).ref=qi(e,null,t),n.return=e,n;case w:return(t=zu(t,e.mode,n)).return=e,t;case A:return f(e,(0,t._init)(t._payload),n)}if(te(t)||R(t))return(t=Mu(t,e.mode,n,null)).return=e,t;Gi(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==a?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case S:return n.key===a?u(e,t,n,r):null;case w:return n.key===a?c(e,t,n,r):null;case A:return p(e,t,(a=n._init)(n._payload),r)}if(te(n)||R(n))return null!==a?null:d(e,t,n,r,null);Gi(e,n)}return null}function h(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case S:return u(t,e=e.get(null===r.key?n:r.key)||null,r,a);case w:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case A:return h(e,t,n,(0,r._init)(r._payload),a)}if(te(r)||R(r))return d(t,e=e.get(n)||null,r,a,null);Gi(t,r)}return null}function m(a,i,o,l){for(var u=null,c=null,d=i,m=i=0,g=null;null!==d&&m<o.length;m++){d.index>m?(g=d,d=null):g=d.sibling;var v=p(a,d,o[m],l);if(null===v){null===d&&(d=g);break}e&&d&&null===v.alternate&&t(a,d),i=s(v,i,m),null===c?u=v:c.sibling=v,c=v,d=g}if(m===o.length)return n(a,d),ai&&Za(a,m),u;if(null===d){for(;m<o.length;m++)null!==(d=f(a,o[m],l))&&(i=s(d,i,m),null===c?u=d:c.sibling=d,c=d);return ai&&Za(a,m),u}for(d=r(a,d);m<o.length;m++)null!==(g=h(d,a,m,o[m],l))&&(e&&null!==g.alternate&&d.delete(null===g.key?m:g.key),i=s(g,i,m),null===c?u=g:c.sibling=g,c=g);return e&&d.forEach((function(e){return t(a,e)})),ai&&Za(a,m),u}function g(a,o,l,u){var c=R(l);if("function"!=typeof c)throw Error(i(150));if(null==(l=c.call(l)))throw Error(i(151));for(var d=c=null,m=o,g=o=0,v=null,b=l.next();null!==m&&!b.done;g++,b=l.next()){m.index>g?(v=m,m=null):v=m.sibling;var y=p(a,m,b.value,u);if(null===y){null===m&&(m=v);break}e&&m&&null===y.alternate&&t(a,m),o=s(y,o,g),null===d?c=y:d.sibling=y,d=y,m=v}if(b.done)return n(a,m),ai&&Za(a,g),c;if(null===m){for(;!b.done;g++,b=l.next())null!==(b=f(a,b.value,u))&&(o=s(b,o,g),null===d?c=b:d.sibling=b,d=b);return ai&&Za(a,g),c}for(m=r(a,m);!b.done;g++,b=l.next())null!==(b=h(m,a,g,b.value,u))&&(e&&null!==b.alternate&&m.delete(null===b.key?g:b.key),o=s(b,o,g),null===d?c=b:d.sibling=b,d=b);return e&&m.forEach((function(e){return t(a,e)})),ai&&Za(a,g),c}return function e(r,i,s,l){if("object"==typeof s&&null!==s&&s.type===x&&null===s.key&&(s=s.props.children),"object"==typeof s&&null!==s){switch(s.$$typeof){case S:e:{for(var u=s.key,c=i;null!==c;){if(c.key===u){if((u=s.type)===x){if(7===c.tag){n(r,c.sibling),(i=a(c,s.props.children)).return=r,r=i;break e}}else if(c.elementType===u||"object"==typeof u&&null!==u&&u.$$typeof===A&&Qi(u)===c.type){n(r,c.sibling),(i=a(c,s.props)).ref=qi(r,c,s),i.return=r,r=i;break e}n(r,c);break}t(r,c),c=c.sibling}s.type===x?((i=Mu(s.props.children,r.mode,l,s.key)).return=r,r=i):((l=Ru(s.type,s.key,s.props,null,r.mode,l)).ref=qi(r,i,s),l.return=r,r=l)}return o(r);case w:e:{for(c=s.key;null!==i;){if(i.key===c){if(4===i.tag&&i.stateNode.containerInfo===s.containerInfo&&i.stateNode.implementation===s.implementation){n(r,i.sibling),(i=a(i,s.children||[])).return=r,r=i;break e}n(r,i);break}t(r,i),i=i.sibling}(i=zu(s,r.mode,l)).return=r,r=i}return o(r);case A:return e(r,i,(c=s._init)(s._payload),l)}if(te(s))return m(r,i,s,l);if(R(s))return g(r,i,s,l);Gi(r,s)}return"string"==typeof s&&""!==s||"number"==typeof s?(s=""+s,null!==i&&6===i.tag?(n(r,i.sibling),(i=a(i,s)).return=r,r=i):(n(r,i),(i=Fu(s,r.mode,l)).return=r,r=i),o(r)):n(r,i)}}var Ki=Yi(!0),Xi=Yi(!1),Zi={},Ji=Ea(Zi),es=Ea(Zi),ts=Ea(Zi);function ns(e){if(e===Zi)throw Error(i(174));return e}function rs(e,t){switch(ka(ts,t),ka(es,e),ka(Ji,Zi),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:le(null,"");break;default:t=le(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Ca(Ji),ka(Ji,t)}function as(){Ca(Ji),Ca(es),Ca(ts)}function is(e){ns(ts.current);var t=ns(Ji.current),n=le(t,e.type);t!==n&&(ka(es,e),ka(Ji,n))}function ss(e){es.current===e&&(Ca(Ji),Ca(es))}var os=Ea(0);function ls(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var us=[];function cs(){for(var e=0;e<us.length;e++)us[e]._workInProgressVersionPrimary=null;us.length=0}var ds=_.ReactCurrentDispatcher,fs=_.ReactCurrentBatchConfig,ps=0,hs=null,ms=null,gs=null,vs=!1,bs=!1,ys=0,_s=0;function Ss(){throw Error(i(321))}function ws(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!or(e[n],t[n]))return!1;return!0}function xs(e,t,n,r,a,s){if(ps=s,hs=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,ds.current=null===e||null===e.memoizedState?so:oo,e=n(r,a),bs){s=0;do{if(bs=!1,ys=0,25<=s)throw Error(i(301));s+=1,gs=ms=null,t.updateQueue=null,ds.current=lo,e=n(r,a)}while(bs)}if(ds.current=io,t=null!==ms&&null!==ms.next,ps=0,gs=ms=hs=null,vs=!1,t)throw Error(i(300));return e}function Es(){var e=0!==ys;return ys=0,e}function Cs(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===gs?hs.memoizedState=gs=e:gs=gs.next=e,gs}function ks(){if(null===ms){var e=hs.alternate;e=null!==e?e.memoizedState:null}else e=ms.next;var t=null===gs?hs.memoizedState:gs.next;if(null!==t)gs=t,ms=e;else{if(null===e)throw Error(i(310));e={memoizedState:(ms=e).memoizedState,baseState:ms.baseState,baseQueue:ms.baseQueue,queue:ms.queue,next:null},null===gs?hs.memoizedState=gs=e:gs=gs.next=e}return gs}function Ls(e,t){return"function"==typeof t?t(e):t}function js(e){var t=ks(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=ms,a=r.baseQueue,s=n.pending;if(null!==s){if(null!==a){var o=a.next;a.next=s.next,s.next=o}r.baseQueue=a=s,n.pending=null}if(null!==a){s=a.next,r=r.baseState;var l=o=null,u=null,c=s;do{var d=c.lane;if((ps&d)===d)null!==u&&(u=u.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var f={lane:d,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===u?(l=u=f,o=r):u=u.next=f,hs.lanes|=d,Il|=d}c=c.next}while(null!==c&&c!==s);null===u?o=r:u.next=l,or(r,t.memoizedState)||(_o=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=u,n.lastRenderedState=r}if(null!==(e=n.interleaved)){a=e;do{s=a.lane,hs.lanes|=s,Il|=s,a=a.next}while(a!==e)}else null===a&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Ts(e){var t=ks(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,s=t.memoizedState;if(null!==a){n.pending=null;var o=a=a.next;do{s=e(s,o.action),o=o.next}while(o!==a);or(s,t.memoizedState)||(_o=!0),t.memoizedState=s,null===t.baseQueue&&(t.baseState=s),n.lastRenderedState=s}return[s,r]}function Ps(){}function Ns(e,t){var n=hs,r=ks(),a=t(),s=!or(r.memoizedState,a);if(s&&(r.memoizedState=a,_o=!0),r=r.queue,Vs(Os.bind(null,n,r,e),[e]),r.getSnapshot!==t||s||null!==gs&&1&gs.memoizedState.tag){if(n.flags|=2048,Fs(9,Ds.bind(null,n,r,a,t),void 0,null),null===Pl)throw Error(i(349));0!=(30&ps)||As(n,t,a)}return a}function As(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=hs.updateQueue)?(t={lastEffect:null,stores:null},hs.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ds(e,t,n,r){t.value=n,t.getSnapshot=r,Rs(t)&&Ms(e)}function Os(e,t,n){return n((function(){Rs(t)&&Ms(e)}))}function Rs(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!or(e,n)}catch(e){return!0}}function Ms(e){var t=Ti(e,1);null!==t&&ru(t,e,1,-1)}function Is(e){var t=Cs();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ls,lastRenderedState:e},t.queue=e,e=e.dispatch=to.bind(null,hs,e),[t.memoizedState,e]}function Fs(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=hs.updateQueue)?(t={lastEffect:null,stores:null},hs.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function zs(){return ks().memoizedState}function Us(e,t,n,r){var a=Cs();hs.flags|=e,a.memoizedState=Fs(1|t,n,void 0,void 0===r?null:r)}function $s(e,t,n,r){var a=ks();r=void 0===r?null:r;var i=void 0;if(null!==ms){var s=ms.memoizedState;if(i=s.destroy,null!==r&&ws(r,s.deps))return void(a.memoizedState=Fs(t,n,i,r))}hs.flags|=e,a.memoizedState=Fs(1|t,n,i,r)}function Bs(e,t){return Us(8390656,8,e,t)}function Vs(e,t){return $s(2048,8,e,t)}function Ws(e,t){return $s(4,2,e,t)}function Hs(e,t){return $s(4,4,e,t)}function qs(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Gs(e,t,n){return n=null!=n?n.concat([e]):null,$s(4,4,qs.bind(null,t,e),n)}function Qs(){}function Ys(e,t){var n=ks();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ws(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ks(e,t){var n=ks();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ws(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Xs(e,t,n){return 0==(21&ps)?(e.baseState&&(e.baseState=!1,_o=!0),e.memoizedState=n):(or(n,t)||(n=mt(),hs.lanes|=n,Il|=n,e.baseState=!0),t)}function Zs(e,t){var n=yt;yt=0!==n&&4>n?n:4,e(!0);var r=fs.transition;fs.transition={};try{e(!1),t()}finally{yt=n,fs.transition=r}}function Js(){return ks().memoizedState}function eo(e,t,n){var r=nu(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},no(e)?ro(t,n):null!==(n=ji(e,t,n,r))&&(ru(n,e,r,tu()),ao(n,t,r))}function to(e,t,n){var r=nu(e),a={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(no(e))ro(t,a);else{var i=e.alternate;if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var s=t.lastRenderedState,o=i(s,n);if(a.hasEagerState=!0,a.eagerState=o,or(o,s)){var l=t.interleaved;return null===l?(a.next=a,Li(t)):(a.next=l.next,l.next=a),void(t.interleaved=a)}}catch(e){}null!==(n=ji(e,t,a,r))&&(ru(n,e,r,a=tu()),ao(n,t,r))}}function no(e){var t=e.alternate;return e===hs||null!==t&&t===hs}function ro(e,t){bs=vs=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function ao(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,bt(e,n)}}var io={readContext:Ci,useCallback:Ss,useContext:Ss,useEffect:Ss,useImperativeHandle:Ss,useInsertionEffect:Ss,useLayoutEffect:Ss,useMemo:Ss,useReducer:Ss,useRef:Ss,useState:Ss,useDebugValue:Ss,useDeferredValue:Ss,useTransition:Ss,useMutableSource:Ss,useSyncExternalStore:Ss,useId:Ss,unstable_isNewReconciler:!1},so={readContext:Ci,useCallback:function(e,t){return Cs().memoizedState=[e,void 0===t?null:t],e},useContext:Ci,useEffect:Bs,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Us(4194308,4,qs.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Us(4194308,4,e,t)},useInsertionEffect:function(e,t){return Us(4,2,e,t)},useMemo:function(e,t){var n=Cs();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Cs();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=eo.bind(null,hs,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Cs().memoizedState=e},useState:Is,useDebugValue:Qs,useDeferredValue:function(e){return Cs().memoizedState=e},useTransition:function(){var e=Is(!1),t=e[0];return e=Zs.bind(null,e[1]),Cs().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=hs,a=Cs();if(ai){if(void 0===n)throw Error(i(407));n=n()}else{if(n=t(),null===Pl)throw Error(i(349));0!=(30&ps)||As(r,t,n)}a.memoizedState=n;var s={value:n,getSnapshot:t};return a.queue=s,Bs(Os.bind(null,r,s,e),[e]),r.flags|=2048,Fs(9,Ds.bind(null,r,s,n,t),void 0,null),n},useId:function(){var e=Cs(),t=Pl.identifierPrefix;if(ai){var n=Xa;t=":"+t+"R"+(n=(Ka&~(1<<32-st(Ka)-1)).toString(32)+n),0<(n=ys++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=_s++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},oo={readContext:Ci,useCallback:Ys,useContext:Ci,useEffect:Vs,useImperativeHandle:Gs,useInsertionEffect:Ws,useLayoutEffect:Hs,useMemo:Ks,useReducer:js,useRef:zs,useState:function(){return js(Ls)},useDebugValue:Qs,useDeferredValue:function(e){return Xs(ks(),ms.memoizedState,e)},useTransition:function(){return[js(Ls)[0],ks().memoizedState]},useMutableSource:Ps,useSyncExternalStore:Ns,useId:Js,unstable_isNewReconciler:!1},lo={readContext:Ci,useCallback:Ys,useContext:Ci,useEffect:Vs,useImperativeHandle:Gs,useInsertionEffect:Ws,useLayoutEffect:Hs,useMemo:Ks,useReducer:Ts,useRef:zs,useState:function(){return Ts(Ls)},useDebugValue:Qs,useDeferredValue:function(e){var t=ks();return null===ms?t.memoizedState=e:Xs(t,ms.memoizedState,e)},useTransition:function(){return[Ts(Ls)[0],ks().memoizedState]},useMutableSource:Ps,useSyncExternalStore:Ns,useId:Js,unstable_isNewReconciler:!1};function uo(e,t){try{var n="",r=t;do{n+=$(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a,digest:null}}function co(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function fo(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var po="function"==typeof WeakMap?WeakMap:Map;function ho(e,t,n){(n=Di(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Hl||(Hl=!0,ql=r),fo(0,t)},n}function mo(e,t,n){(n=Di(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return r(a)},n.callback=function(){fo(0,t)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){fo(0,t),"function"!=typeof r&&(null===Gl?Gl=new Set([this]):Gl.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function go(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new po;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(a.add(n),e=ku.bind(null,e,t,n),t.then(e,e))}function vo(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function bo(e,t,n,r,a){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Di(-1,1)).tag=2,Oi(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=a,e)}var yo=_.ReactCurrentOwner,_o=!1;function So(e,t,n,r){t.child=null===e?Xi(t,null,n,r):Ki(t,e.child,n,r)}function wo(e,t,n,r,a){n=n.render;var i=t.ref;return Ei(t,a),r=xs(e,t,n,r,i,a),n=Es(),null===e||_o?(ai&&n&&ei(t),t.flags|=1,So(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Ho(e,t,a))}function xo(e,t,n,r,a){if(null===e){var i=n.type;return"function"!=typeof i||Du(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ru(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Eo(e,t,i,r,a))}if(i=e.child,0==(e.lanes&a)){var s=i.memoizedProps;if((n=null!==(n=n.compare)?n:lr)(s,r)&&e.ref===t.ref)return Ho(e,t,a)}return t.flags|=1,(e=Ou(i,r)).ref=t.ref,e.return=t,t.child=e}function Eo(e,t,n,r,a){if(null!==e){var i=e.memoizedProps;if(lr(i,r)&&e.ref===t.ref){if(_o=!1,t.pendingProps=r=i,0==(e.lanes&a))return t.lanes=e.lanes,Ho(e,t,a);0!=(131072&e.flags)&&(_o=!0)}}return Lo(e,t,n,r,a)}function Co(e,t,n){var r=t.pendingProps,a=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},ka(Ol,Dl),Dl|=n;else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,ka(Ol,Dl),Dl|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==i?i.baseLanes:n,ka(Ol,Dl),Dl|=r}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,ka(Ol,Dl),Dl|=r;return So(e,t,a,n),t.child}function ko(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Lo(e,t,n,r,a){var i=Aa(n)?Pa:ja.current;return i=Na(t,i),Ei(t,a),n=xs(e,t,n,r,i,a),r=Es(),null===e||_o?(ai&&r&&ei(t),t.flags|=1,So(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Ho(e,t,a))}function jo(e,t,n,r,a){if(Aa(n)){var i=!0;Ma(t)}else i=!1;if(Ei(t,a),null===t.stateNode)Wo(e,t),Vi(t,n,r),Hi(t,n,r,a),r=!0;else if(null===e){var s=t.stateNode,o=t.memoizedProps;s.props=o;var l=s.context,u=n.contextType;u="object"==typeof u&&null!==u?Ci(u):Na(t,u=Aa(n)?Pa:ja.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof s.getSnapshotBeforeUpdate;d||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(o!==r||l!==u)&&Wi(t,s,r,u),Pi=!1;var f=t.memoizedState;s.state=f,Ii(t,r,s,a),l=t.memoizedState,o!==r||f!==l||Ta.current||Pi?("function"==typeof c&&(Ui(t,n,c,r),l=t.memoizedState),(o=Pi||Bi(t,n,o,r,f,l,u))?(d||"function"!=typeof s.UNSAFE_componentWillMount&&"function"!=typeof s.componentWillMount||("function"==typeof s.componentWillMount&&s.componentWillMount(),"function"==typeof s.UNSAFE_componentWillMount&&s.UNSAFE_componentWillMount()),"function"==typeof s.componentDidMount&&(t.flags|=4194308)):("function"==typeof s.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=l),s.props=r,s.state=l,s.context=u,r=o):("function"==typeof s.componentDidMount&&(t.flags|=4194308),r=!1)}else{s=t.stateNode,Ai(e,t),o=t.memoizedProps,u=t.type===t.elementType?o:gi(t.type,o),s.props=u,d=t.pendingProps,f=s.context,l="object"==typeof(l=n.contextType)&&null!==l?Ci(l):Na(t,l=Aa(n)?Pa:ja.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof s.getSnapshotBeforeUpdate)||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(o!==d||f!==l)&&Wi(t,s,r,l),Pi=!1,f=t.memoizedState,s.state=f,Ii(t,r,s,a);var h=t.memoizedState;o!==d||f!==h||Ta.current||Pi?("function"==typeof p&&(Ui(t,n,p,r),h=t.memoizedState),(u=Pi||Bi(t,n,u,r,f,h,l)||!1)?(c||"function"!=typeof s.UNSAFE_componentWillUpdate&&"function"!=typeof s.componentWillUpdate||("function"==typeof s.componentWillUpdate&&s.componentWillUpdate(r,h,l),"function"==typeof s.UNSAFE_componentWillUpdate&&s.UNSAFE_componentWillUpdate(r,h,l)),"function"==typeof s.componentDidUpdate&&(t.flags|=4),"function"==typeof s.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof s.componentDidUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof s.getSnapshotBeforeUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),s.props=r,s.state=h,s.context=l,r=u):("function"!=typeof s.componentDidUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof s.getSnapshotBeforeUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return To(e,t,n,r,i,a)}function To(e,t,n,r,a,i){ko(e,t);var s=0!=(128&t.flags);if(!r&&!s)return a&&Ia(t,n,!1),Ho(e,t,i);r=t.stateNode,yo.current=t;var o=s&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&s?(t.child=Ki(t,e.child,null,i),t.child=Ki(t,null,o,i)):So(e,t,o,i),t.memoizedState=r.state,a&&Ia(t,n,!0),t.child}function Po(e){var t=e.stateNode;t.pendingContext?Oa(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Oa(0,t.context,!1),rs(e,t.containerInfo)}function No(e,t,n,r,a){return pi(),hi(a),t.flags|=256,So(e,t,n,r),t.child}var Ao,Do,Oo,Ro,Mo={dehydrated:null,treeContext:null,retryLane:0};function Io(e){return{baseLanes:e,cachePool:null,transitions:null}}function Fo(e,t,n){var r,a=t.pendingProps,s=os.current,o=!1,l=0!=(128&t.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&0!=(2&s)),r?(o=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(s|=1),ka(os,1&s),null===e)return ui(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(l=a.children,e=a.fallback,o?(a=t.mode,o=t.child,l={mode:"hidden",children:l},0==(1&a)&&null!==o?(o.childLanes=0,o.pendingProps=l):o=Iu(l,a,0,null),e=Mu(e,a,n,null),o.return=t,e.return=t,o.sibling=e,t.child=o,t.child.memoizedState=Io(n),t.memoizedState=Mo,e):zo(t,l));if(null!==(s=e.memoizedState)&&null!==(r=s.dehydrated))return function(e,t,n,r,a,s,o){if(n)return 256&t.flags?(t.flags&=-257,Uo(e,t,o,r=co(Error(i(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(s=r.fallback,a=t.mode,r=Iu({mode:"visible",children:r.children},a,0,null),(s=Mu(s,a,o,null)).flags|=2,r.return=t,s.return=t,r.sibling=s,t.child=r,0!=(1&t.mode)&&Ki(t,e.child,null,o),t.child.memoizedState=Io(o),t.memoizedState=Mo,s);if(0==(1&t.mode))return Uo(e,t,o,null);if("$!"===a.data){if(r=a.nextSibling&&a.nextSibling.dataset)var l=r.dgst;return r=l,Uo(e,t,o,r=co(s=Error(i(419)),r,void 0))}if(l=0!=(o&e.childLanes),_o||l){if(null!==(r=Pl)){switch(o&-o){case 4:a=2;break;case 16:a=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:a=32;break;case 536870912:a=268435456;break;default:a=0}0!==(a=0!=(a&(r.suspendedLanes|o))?0:a)&&a!==s.retryLane&&(s.retryLane=a,Ti(e,a),ru(r,e,a,-1))}return gu(),Uo(e,t,o,r=co(Error(i(421))))}return"$?"===a.data?(t.flags|=128,t.child=e.child,t=ju.bind(null,e),a._reactRetry=t,null):(e=s.treeContext,ri=ua(a.nextSibling),ni=t,ai=!0,ii=null,null!==e&&(Ga[Qa++]=Ka,Ga[Qa++]=Xa,Ga[Qa++]=Ya,Ka=e.id,Xa=e.overflow,Ya=t),(t=zo(t,r.children)).flags|=4096,t)}(e,t,l,a,r,s,n);if(o){o=a.fallback,l=t.mode,r=(s=e.child).sibling;var u={mode:"hidden",children:a.children};return 0==(1&l)&&t.child!==s?((a=t.child).childLanes=0,a.pendingProps=u,t.deletions=null):(a=Ou(s,u)).subtreeFlags=14680064&s.subtreeFlags,null!==r?o=Ou(r,o):(o=Mu(o,l,n,null)).flags|=2,o.return=t,a.return=t,a.sibling=o,t.child=a,a=o,o=t.child,l=null===(l=e.child.memoizedState)?Io(n):{baseLanes:l.baseLanes|n,cachePool:null,transitions:l.transitions},o.memoizedState=l,o.childLanes=e.childLanes&~n,t.memoizedState=Mo,a}return e=(o=e.child).sibling,a=Ou(o,{mode:"visible",children:a.children}),0==(1&t.mode)&&(a.lanes=n),a.return=t,a.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=a,t.memoizedState=null,a}function zo(e,t){return(t=Iu({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Uo(e,t,n,r){return null!==r&&hi(r),Ki(t,e.child,null,n),(e=zo(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function $o(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),xi(e.return,t,n)}function Bo(e,t,n,r,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=a)}function Vo(e,t,n){var r=t.pendingProps,a=r.revealOrder,i=r.tail;if(So(e,t,r.children,n),0!=(2&(r=os.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&$o(e,n,t);else if(19===e.tag)$o(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(ka(os,r),0==(1&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===ls(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Bo(t,!1,a,n,i);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===ls(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Bo(t,!0,n,null,i);break;case"together":Bo(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Wo(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Ho(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Il|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Ou(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ou(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function qo(e,t){if(!ai)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Go(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Qo(e,t,n){var r=t.pendingProps;switch(ti(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Go(t),null;case 1:case 17:return Aa(t.type)&&Da(),Go(t),null;case 3:return r=t.stateNode,as(),Ca(Ta),Ca(ja),cs(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(di(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==ii&&(ou(ii),ii=null))),Do(e,t),Go(t),null;case 5:ss(t);var a=ns(ts.current);if(n=t.type,null!==e&&null!=t.stateNode)Oo(e,t,n,r,a),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(i(166));return Go(t),null}if(e=ns(Ji.current),di(t)){r=t.stateNode,n=t.type;var s=t.memoizedProps;switch(r[fa]=t,r[pa]=s,e=0!=(1&t.mode),n){case"dialog":zr("cancel",r),zr("close",r);break;case"iframe":case"object":case"embed":zr("load",r);break;case"video":case"audio":for(a=0;a<Rr.length;a++)zr(Rr[a],r);break;case"source":zr("error",r);break;case"img":case"image":case"link":zr("error",r),zr("load",r);break;case"details":zr("toggle",r);break;case"input":K(r,s),zr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!s.multiple},zr("invalid",r);break;case"textarea":ae(r,s),zr("invalid",r)}for(var l in be(n,s),a=null,s)if(s.hasOwnProperty(l)){var u=s[l];"children"===l?"string"==typeof u?r.textContent!==u&&(!0!==s.suppressHydrationWarning&&Zr(r.textContent,u,e),a=["children",u]):"number"==typeof u&&r.textContent!==""+u&&(!0!==s.suppressHydrationWarning&&Zr(r.textContent,u,e),a=["children",""+u]):o.hasOwnProperty(l)&&null!=u&&"onScroll"===l&&zr("scroll",r)}switch(n){case"input":q(r),J(r,s,!0);break;case"textarea":q(r),se(r);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(r.onclick=Jr)}r=a,t.updateQueue=r,null!==r&&(t.flags|=4)}else{l=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=oe(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(n,{is:r.is}):(e=l.createElement(n),"select"===n&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,n),e[fa]=t,e[pa]=r,Ao(e,t,!1,!1),t.stateNode=e;e:{switch(l=ye(n,r),n){case"dialog":zr("cancel",e),zr("close",e),a=r;break;case"iframe":case"object":case"embed":zr("load",e),a=r;break;case"video":case"audio":for(a=0;a<Rr.length;a++)zr(Rr[a],e);a=r;break;case"source":zr("error",e),a=r;break;case"img":case"image":case"link":zr("error",e),zr("load",e),a=r;break;case"details":zr("toggle",e),a=r;break;case"input":K(e,r),a=Y(e,r),zr("invalid",e);break;case"option":default:a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=I({},r,{value:void 0}),zr("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),zr("invalid",e)}for(s in be(n,a),u=a)if(u.hasOwnProperty(s)){var c=u[s];"style"===s?ge(e,c):"dangerouslySetInnerHTML"===s?null!=(c=c?c.__html:void 0)&&de(e,c):"children"===s?"string"==typeof c?("textarea"!==n||""!==c)&&fe(e,c):"number"==typeof c&&fe(e,""+c):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(o.hasOwnProperty(s)?null!=c&&"onScroll"===s&&zr("scroll",e):null!=c&&y(e,s,c,l))}switch(n){case"input":q(e),J(e,r,!1);break;case"textarea":q(e),se(e);break;case"option":null!=r.value&&e.setAttribute("value",""+W(r.value));break;case"select":e.multiple=!!r.multiple,null!=(s=r.value)?ne(e,!!r.multiple,s,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Jr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Go(t),null;case 6:if(e&&null!=t.stateNode)Ro(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));if(n=ns(ts.current),ns(Ji.current),di(t)){if(r=t.stateNode,n=t.memoizedProps,r[fa]=t,(s=r.nodeValue!==n)&&null!==(e=ni))switch(e.tag){case 3:Zr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Zr(r.nodeValue,n,0!=(1&e.mode))}s&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[fa]=t,t.stateNode=r}return Go(t),null;case 13:if(Ca(os),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ai&&null!==ri&&0!=(1&t.mode)&&0==(128&t.flags))fi(),pi(),t.flags|=98560,s=!1;else if(s=di(t),null!==r&&null!==r.dehydrated){if(null===e){if(!s)throw Error(i(318));if(!(s=null!==(s=t.memoizedState)?s.dehydrated:null))throw Error(i(317));s[fa]=t}else pi(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Go(t),s=!1}else null!==ii&&(ou(ii),ii=null),s=!0;if(!s)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&os.current)?0===Rl&&(Rl=3):gu())),null!==t.updateQueue&&(t.flags|=4),Go(t),null);case 4:return as(),Do(e,t),null===e&&Br(t.stateNode.containerInfo),Go(t),null;case 10:return wi(t.type._context),Go(t),null;case 19:if(Ca(os),null===(s=t.memoizedState))return Go(t),null;if(r=0!=(128&t.flags),null===(l=s.rendering))if(r)qo(s,!1);else{if(0!==Rl||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(l=ls(e))){for(t.flags|=128,qo(s,!1),null!==(r=l.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(s=n).flags&=14680066,null===(l=s.alternate)?(s.childLanes=0,s.lanes=e,s.child=null,s.subtreeFlags=0,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=l.childLanes,s.lanes=l.lanes,s.child=l.child,s.subtreeFlags=0,s.deletions=null,s.memoizedProps=l.memoizedProps,s.memoizedState=l.memoizedState,s.updateQueue=l.updateQueue,s.type=l.type,e=l.dependencies,s.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return ka(os,1&os.current|2),t.child}e=e.sibling}null!==s.tail&&Xe()>Vl&&(t.flags|=128,r=!0,qo(s,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ls(l))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),qo(s,!0),null===s.tail&&"hidden"===s.tailMode&&!l.alternate&&!ai)return Go(t),null}else 2*Xe()-s.renderingStartTime>Vl&&1073741824!==n&&(t.flags|=128,r=!0,qo(s,!1),t.lanes=4194304);s.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=s.last)?n.sibling=l:t.child=l,s.last=l)}return null!==s.tail?(t=s.tail,s.rendering=t,s.tail=t.sibling,s.renderingStartTime=Xe(),t.sibling=null,n=os.current,ka(os,r?1&n|2:1&n),t):(Go(t),null);case 22:case 23:return fu(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Dl)&&(Go(t),6&t.subtreeFlags&&(t.flags|=8192)):Go(t),null;case 24:case 25:return null}throw Error(i(156,t.tag))}function Yo(e,t){switch(ti(t),t.tag){case 1:return Aa(t.type)&&Da(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return as(),Ca(Ta),Ca(ja),cs(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return ss(t),null;case 13:if(Ca(os),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(i(340));pi()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Ca(os),null;case 4:return as(),null;case 10:return wi(t.type._context),null;case 22:case 23:return fu(),null;default:return null}}Ao=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Do=function(){},Oo=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,ns(Ji.current);var i,s=null;switch(n){case"input":a=Y(e,a),r=Y(e,r),s=[];break;case"select":a=I({},a,{value:void 0}),r=I({},r,{value:void 0}),s=[];break;case"textarea":a=re(e,a),r=re(e,r),s=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(c in be(n,r),n=null,a)if(!r.hasOwnProperty(c)&&a.hasOwnProperty(c)&&null!=a[c])if("style"===c){var l=a[c];for(i in l)l.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(o.hasOwnProperty(c)?s||(s=[]):(s=s||[]).push(c,null));for(c in r){var u=r[c];if(l=null!=a?a[c]:void 0,r.hasOwnProperty(c)&&u!==l&&(null!=u||null!=l))if("style"===c)if(l){for(i in l)!l.hasOwnProperty(i)||u&&u.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in u)u.hasOwnProperty(i)&&l[i]!==u[i]&&(n||(n={}),n[i]=u[i])}else n||(s||(s=[]),s.push(c,n)),n=u;else"dangerouslySetInnerHTML"===c?(u=u?u.__html:void 0,l=l?l.__html:void 0,null!=u&&l!==u&&(s=s||[]).push(c,u)):"children"===c?"string"!=typeof u&&"number"!=typeof u||(s=s||[]).push(c,""+u):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(o.hasOwnProperty(c)?(null!=u&&"onScroll"===c&&zr("scroll",e),s||l===u||(s=[])):(s=s||[]).push(c,u))}n&&(s=s||[]).push("style",n);var c=s;(t.updateQueue=c)&&(t.flags|=4)}},Ro=function(e,t,n,r){n!==r&&(t.flags|=4)};var Ko=!1,Xo=!1,Zo="function"==typeof WeakSet?WeakSet:Set,Jo=null;function el(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Cu(e,t,n)}else n.current=null}function tl(e,t,n){try{n()}catch(n){Cu(e,t,n)}}var nl=!1;function rl(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var i=a.destroy;a.destroy=void 0,void 0!==i&&tl(t,n,i)}a=a.next}while(a!==r)}}function al(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function il(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function sl(e){var t=e.alternate;null!==t&&(e.alternate=null,sl(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[fa],delete t[pa],delete t[ma],delete t[ga],delete t[va]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function ol(e){return 5===e.tag||3===e.tag||4===e.tag}function ll(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||ol(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ul(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(ul(e,t,n),e=e.sibling;null!==e;)ul(e,t,n),e=e.sibling}function cl(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(cl(e,t,n),e=e.sibling;null!==e;)cl(e,t,n),e=e.sibling}var dl=null,fl=!1;function pl(e,t,n){for(n=n.child;null!==n;)hl(e,t,n),n=n.sibling}function hl(e,t,n){if(it&&"function"==typeof it.onCommitFiberUnmount)try{it.onCommitFiberUnmount(at,n)}catch(e){}switch(n.tag){case 5:Xo||el(n,t);case 6:var r=dl,a=fl;dl=null,pl(e,t,n),fl=a,null!==(dl=r)&&(fl?(e=dl,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):dl.removeChild(n.stateNode));break;case 18:null!==dl&&(fl?(e=dl,n=n.stateNode,8===e.nodeType?la(e.parentNode,n):1===e.nodeType&&la(e,n),Bt(e)):la(dl,n.stateNode));break;case 4:r=dl,a=fl,dl=n.stateNode.containerInfo,fl=!0,pl(e,t,n),dl=r,fl=a;break;case 0:case 11:case 14:case 15:if(!Xo&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){a=r=r.next;do{var i=a,s=i.destroy;i=i.tag,void 0!==s&&(0!=(2&i)||0!=(4&i))&&tl(n,t,s),a=a.next}while(a!==r)}pl(e,t,n);break;case 1:if(!Xo&&(el(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Cu(n,t,e)}pl(e,t,n);break;case 21:pl(e,t,n);break;case 22:1&n.mode?(Xo=(r=Xo)||null!==n.memoizedState,pl(e,t,n),Xo=r):pl(e,t,n);break;default:pl(e,t,n)}}function ml(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Zo),t.forEach((function(t){var r=Tu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function gl(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r];try{var s=e,o=t,l=o;e:for(;null!==l;){switch(l.tag){case 5:dl=l.stateNode,fl=!1;break e;case 3:case 4:dl=l.stateNode.containerInfo,fl=!0;break e}l=l.return}if(null===dl)throw Error(i(160));hl(s,o,a),dl=null,fl=!1;var u=a.alternate;null!==u&&(u.return=null),a.return=null}catch(e){Cu(a,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)vl(t,e),t=t.sibling}function vl(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(gl(t,e),bl(e),4&r){try{rl(3,e,e.return),al(3,e)}catch(t){Cu(e,e.return,t)}try{rl(5,e,e.return)}catch(t){Cu(e,e.return,t)}}break;case 1:gl(t,e),bl(e),512&r&&null!==n&&el(n,n.return);break;case 5:if(gl(t,e),bl(e),512&r&&null!==n&&el(n,n.return),32&e.flags){var a=e.stateNode;try{fe(a,"")}catch(t){Cu(e,e.return,t)}}if(4&r&&null!=(a=e.stateNode)){var s=e.memoizedProps,o=null!==n?n.memoizedProps:s,l=e.type,u=e.updateQueue;if(e.updateQueue=null,null!==u)try{"input"===l&&"radio"===s.type&&null!=s.name&&X(a,s),ye(l,o);var c=ye(l,s);for(o=0;o<u.length;o+=2){var d=u[o],f=u[o+1];"style"===d?ge(a,f):"dangerouslySetInnerHTML"===d?de(a,f):"children"===d?fe(a,f):y(a,d,f,c)}switch(l){case"input":Z(a,s);break;case"textarea":ie(a,s);break;case"select":var p=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!s.multiple;var h=s.value;null!=h?ne(a,!!s.multiple,h,!1):p!==!!s.multiple&&(null!=s.defaultValue?ne(a,!!s.multiple,s.defaultValue,!0):ne(a,!!s.multiple,s.multiple?[]:"",!1))}a[pa]=s}catch(t){Cu(e,e.return,t)}}break;case 6:if(gl(t,e),bl(e),4&r){if(null===e.stateNode)throw Error(i(162));a=e.stateNode,s=e.memoizedProps;try{a.nodeValue=s}catch(t){Cu(e,e.return,t)}}break;case 3:if(gl(t,e),bl(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Bt(t.containerInfo)}catch(t){Cu(e,e.return,t)}break;case 4:default:gl(t,e),bl(e);break;case 13:gl(t,e),bl(e),8192&(a=e.child).flags&&(s=null!==a.memoizedState,a.stateNode.isHidden=s,!s||null!==a.alternate&&null!==a.alternate.memoizedState||(Bl=Xe())),4&r&&ml(e);break;case 22:if(d=null!==n&&null!==n.memoizedState,1&e.mode?(Xo=(c=Xo)||d,gl(t,e),Xo=c):gl(t,e),bl(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!d&&0!=(1&e.mode))for(Jo=e,d=e.child;null!==d;){for(f=Jo=d;null!==Jo;){switch(h=(p=Jo).child,p.tag){case 0:case 11:case 14:case 15:rl(4,p,p.return);break;case 1:el(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,n=p.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){Cu(r,n,e)}}break;case 5:el(p,p.return);break;case 22:if(null!==p.memoizedState){wl(f);continue}}null!==h?(h.return=p,Jo=h):wl(f)}d=d.sibling}e:for(d=null,f=e;;){if(5===f.tag){if(null===d){d=f;try{a=f.stateNode,c?"function"==typeof(s=a.style).setProperty?s.setProperty("display","none","important"):s.display="none":(l=f.stateNode,o=null!=(u=f.memoizedProps.style)&&u.hasOwnProperty("display")?u.display:null,l.style.display=me("display",o))}catch(t){Cu(e,e.return,t)}}}else if(6===f.tag){if(null===d)try{f.stateNode.nodeValue=c?"":f.memoizedProps}catch(t){Cu(e,e.return,t)}}else if((22!==f.tag&&23!==f.tag||null===f.memoizedState||f===e)&&null!==f.child){f.child.return=f,f=f.child;continue}if(f===e)break e;for(;null===f.sibling;){if(null===f.return||f.return===e)break e;d===f&&(d=null),f=f.return}d===f&&(d=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:gl(t,e),bl(e),4&r&&ml(e);case 21:}}function bl(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(ol(n)){var r=n;break e}n=n.return}throw Error(i(160))}switch(r.tag){case 5:var a=r.stateNode;32&r.flags&&(fe(a,""),r.flags&=-33),cl(e,ll(e),a);break;case 3:case 4:var s=r.stateNode.containerInfo;ul(e,ll(e),s);break;default:throw Error(i(161))}}catch(t){Cu(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function yl(e,t,n){Jo=e,_l(e,t,n)}function _l(e,t,n){for(var r=0!=(1&e.mode);null!==Jo;){var a=Jo,i=a.child;if(22===a.tag&&r){var s=null!==a.memoizedState||Ko;if(!s){var o=a.alternate,l=null!==o&&null!==o.memoizedState||Xo;o=Ko;var u=Xo;if(Ko=s,(Xo=l)&&!u)for(Jo=a;null!==Jo;)l=(s=Jo).child,22===s.tag&&null!==s.memoizedState?xl(a):null!==l?(l.return=s,Jo=l):xl(a);for(;null!==i;)Jo=i,_l(i,t,n),i=i.sibling;Jo=a,Ko=o,Xo=u}Sl(e)}else 0!=(8772&a.subtreeFlags)&&null!==i?(i.return=a,Jo=i):Sl(e)}}function Sl(e){for(;null!==Jo;){var t=Jo;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Xo||al(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Xo)if(null===n)r.componentDidMount();else{var a=t.elementType===t.type?n.memoizedProps:gi(t.type,n.memoizedProps);r.componentDidUpdate(a,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var s=t.updateQueue;null!==s&&Fi(t,s,r);break;case 3:var o=t.updateQueue;if(null!==o){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Fi(t,o,n)}break;case 5:var l=t.stateNode;if(null===n&&4&t.flags){n=l;var u=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":u.autoFocus&&n.focus();break;case"img":u.src&&(n.src=u.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var d=c.memoizedState;if(null!==d){var f=d.dehydrated;null!==f&&Bt(f)}}}break;default:throw Error(i(163))}Xo||512&t.flags&&il(t)}catch(e){Cu(t,t.return,e)}}if(t===e){Jo=null;break}if(null!==(n=t.sibling)){n.return=t.return,Jo=n;break}Jo=t.return}}function wl(e){for(;null!==Jo;){var t=Jo;if(t===e){Jo=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Jo=n;break}Jo=t.return}}function xl(e){for(;null!==Jo;){var t=Jo;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{al(4,t)}catch(e){Cu(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var a=t.return;try{r.componentDidMount()}catch(e){Cu(t,a,e)}}var i=t.return;try{il(t)}catch(e){Cu(t,i,e)}break;case 5:var s=t.return;try{il(t)}catch(e){Cu(t,s,e)}}}catch(e){Cu(t,t.return,e)}if(t===e){Jo=null;break}var o=t.sibling;if(null!==o){o.return=t.return,Jo=o;break}Jo=t.return}}var El,Cl=Math.ceil,kl=_.ReactCurrentDispatcher,Ll=_.ReactCurrentOwner,jl=_.ReactCurrentBatchConfig,Tl=0,Pl=null,Nl=null,Al=0,Dl=0,Ol=Ea(0),Rl=0,Ml=null,Il=0,Fl=0,zl=0,Ul=null,$l=null,Bl=0,Vl=1/0,Wl=null,Hl=!1,ql=null,Gl=null,Ql=!1,Yl=null,Kl=0,Xl=0,Zl=null,Jl=-1,eu=0;function tu(){return 0!=(6&Tl)?Xe():-1!==Jl?Jl:Jl=Xe()}function nu(e){return 0==(1&e.mode)?1:0!=(2&Tl)&&0!==Al?Al&-Al:null!==mi.transition?(0===eu&&(eu=mt()),eu):0!==(e=yt)?e:e=void 0===(e=window.event)?16:Kt(e.type)}function ru(e,t,n,r){if(50<Xl)throw Xl=0,Zl=null,Error(i(185));vt(e,n,r),0!=(2&Tl)&&e===Pl||(e===Pl&&(0==(2&Tl)&&(Fl|=n),4===Rl&&lu(e,Al)),au(e,r),1===n&&0===Tl&&0==(1&t.mode)&&(Vl=Xe()+500,za&&Ba()))}function au(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,i=e.pendingLanes;0<i;){var s=31-st(i),o=1<<s,l=a[s];-1===l?0!=(o&n)&&0==(o&r)||(a[s]=pt(o,t)):l<=t&&(e.expiredLanes|=o),i&=~o}}(e,t);var r=ft(e,e===Pl?Al:0);if(0===r)null!==n&&Qe(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Qe(n),1===t)0===e.tag?function(e){za=!0,$a(e)}(uu.bind(null,e)):$a(uu.bind(null,e)),sa((function(){0==(6&Tl)&&Ba()})),n=null;else{switch(_t(r)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Pu(n,iu.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function iu(e,t){if(Jl=-1,eu=0,0!=(6&Tl))throw Error(i(327));var n=e.callbackNode;if(xu()&&e.callbackNode!==n)return null;var r=ft(e,e===Pl?Al:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=vu(e,r);else{t=r;var a=Tl;Tl|=2;var s=mu();for(Pl===e&&Al===t||(Wl=null,Vl=Xe()+500,pu(e,t));;)try{yu();break}catch(t){hu(e,t)}Si(),kl.current=s,Tl=a,null!==Nl?t=0:(Pl=null,Al=0,t=Rl)}if(0!==t){if(2===t&&0!==(a=ht(e))&&(r=a,t=su(e,a)),1===t)throw n=Ml,pu(e,0),lu(e,r),au(e,Xe()),n;if(6===t)lu(e,r);else{if(a=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],i=a.getSnapshot;a=a.value;try{if(!or(i(),a))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(a)&&(2===(t=vu(e,r))&&0!==(s=ht(e))&&(r=s,t=su(e,s)),1===t))throw n=Ml,pu(e,0),lu(e,r),au(e,Xe()),n;switch(e.finishedWork=a,e.finishedLanes=r,t){case 0:case 1:throw Error(i(345));case 2:case 5:wu(e,$l,Wl);break;case 3:if(lu(e,r),(130023424&r)===r&&10<(t=Bl+500-Xe())){if(0!==ft(e,0))break;if(((a=e.suspendedLanes)&r)!==r){tu(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=ra(wu.bind(null,e,$l,Wl),t);break}wu(e,$l,Wl);break;case 4:if(lu(e,r),(4194240&r)===r)break;for(t=e.eventTimes,a=-1;0<r;){var o=31-st(r);s=1<<o,(o=t[o])>a&&(a=o),r&=~s}if(r=a,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Cl(r/1960))-r)){e.timeoutHandle=ra(wu.bind(null,e,$l,Wl),r);break}wu(e,$l,Wl);break;default:throw Error(i(329))}}}return au(e,Xe()),e.callbackNode===n?iu.bind(null,e):null}function su(e,t){var n=Ul;return e.current.memoizedState.isDehydrated&&(pu(e,t).flags|=256),2!==(e=vu(e,t))&&(t=$l,$l=n,null!==t&&ou(t)),e}function ou(e){null===$l?$l=e:$l.push.apply($l,e)}function lu(e,t){for(t&=~zl,t&=~Fl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-st(t),r=1<<n;e[n]=-1,t&=~r}}function uu(e){if(0!=(6&Tl))throw Error(i(327));xu();var t=ft(e,0);if(0==(1&t))return au(e,Xe()),null;var n=vu(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=su(e,r))}if(1===n)throw n=Ml,pu(e,0),lu(e,t),au(e,Xe()),n;if(6===n)throw Error(i(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,wu(e,$l,Wl),au(e,Xe()),null}function cu(e,t){var n=Tl;Tl|=1;try{return e(t)}finally{0===(Tl=n)&&(Vl=Xe()+500,za&&Ba())}}function du(e){null!==Yl&&0===Yl.tag&&0==(6&Tl)&&xu();var t=Tl;Tl|=1;var n=jl.transition,r=yt;try{if(jl.transition=null,yt=1,e)return e()}finally{yt=r,jl.transition=n,0==(6&(Tl=t))&&Ba()}}function fu(){Dl=Ol.current,Ca(Ol)}function pu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,aa(n)),null!==Nl)for(n=Nl.return;null!==n;){var r=n;switch(ti(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Da();break;case 3:as(),Ca(Ta),Ca(ja),cs();break;case 5:ss(r);break;case 4:as();break;case 13:case 19:Ca(os);break;case 10:wi(r.type._context);break;case 22:case 23:fu()}n=n.return}if(Pl=e,Nl=e=Ou(e.current,null),Al=Dl=t,Rl=0,Ml=null,zl=Fl=Il=0,$l=Ul=null,null!==ki){for(t=0;t<ki.length;t++)if(null!==(r=(n=ki[t]).interleaved)){n.interleaved=null;var a=r.next,i=n.pending;if(null!==i){var s=i.next;i.next=a,r.next=s}n.pending=r}ki=null}return e}function hu(e,t){for(;;){var n=Nl;try{if(Si(),ds.current=io,vs){for(var r=hs.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}vs=!1}if(ps=0,gs=ms=hs=null,bs=!1,ys=0,Ll.current=null,null===n||null===n.return){Rl=1,Ml=t,Nl=null;break}e:{var s=e,o=n.return,l=n,u=t;if(t=Al,l.flags|=32768,null!==u&&"object"==typeof u&&"function"==typeof u.then){var c=u,d=l,f=d.tag;if(0==(1&d.mode)&&(0===f||11===f||15===f)){var p=d.alternate;p?(d.updateQueue=p.updateQueue,d.memoizedState=p.memoizedState,d.lanes=p.lanes):(d.updateQueue=null,d.memoizedState=null)}var h=vo(o);if(null!==h){h.flags&=-257,bo(h,o,l,0,t),1&h.mode&&go(s,c,t),u=c;var m=(t=h).updateQueue;if(null===m){var g=new Set;g.add(u),t.updateQueue=g}else m.add(u);break e}if(0==(1&t)){go(s,c,t),gu();break e}u=Error(i(426))}else if(ai&&1&l.mode){var v=vo(o);if(null!==v){0==(65536&v.flags)&&(v.flags|=256),bo(v,o,l,0,t),hi(uo(u,l));break e}}s=u=uo(u,l),4!==Rl&&(Rl=2),null===Ul?Ul=[s]:Ul.push(s),s=o;do{switch(s.tag){case 3:s.flags|=65536,t&=-t,s.lanes|=t,Mi(s,ho(0,u,t));break e;case 1:l=u;var b=s.type,y=s.stateNode;if(0==(128&s.flags)&&("function"==typeof b.getDerivedStateFromError||null!==y&&"function"==typeof y.componentDidCatch&&(null===Gl||!Gl.has(y)))){s.flags|=65536,t&=-t,s.lanes|=t,Mi(s,mo(s,l,t));break e}}s=s.return}while(null!==s)}Su(n)}catch(e){t=e,Nl===n&&null!==n&&(Nl=n=n.return);continue}break}}function mu(){var e=kl.current;return kl.current=io,null===e?io:e}function gu(){0!==Rl&&3!==Rl&&2!==Rl||(Rl=4),null===Pl||0==(268435455&Il)&&0==(268435455&Fl)||lu(Pl,Al)}function vu(e,t){var n=Tl;Tl|=2;var r=mu();for(Pl===e&&Al===t||(Wl=null,pu(e,t));;)try{bu();break}catch(t){hu(e,t)}if(Si(),Tl=n,kl.current=r,null!==Nl)throw Error(i(261));return Pl=null,Al=0,Rl}function bu(){for(;null!==Nl;)_u(Nl)}function yu(){for(;null!==Nl&&!Ye();)_u(Nl)}function _u(e){var t=El(e.alternate,e,Dl);e.memoizedProps=e.pendingProps,null===t?Su(e):Nl=t,Ll.current=null}function Su(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Qo(n,t,Dl)))return void(Nl=n)}else{if(null!==(n=Yo(n,t)))return n.flags&=32767,void(Nl=n);if(null===e)return Rl=6,void(Nl=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Nl=t);Nl=t=e}while(null!==t);0===Rl&&(Rl=5)}function wu(e,t,n){var r=yt,a=jl.transition;try{jl.transition=null,yt=1,function(e,t,n,r){do{xu()}while(null!==Yl);if(0!=(6&Tl))throw Error(i(327));n=e.finishedWork;var a=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null,e.callbackPriority=0;var s=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var a=31-st(n),i=1<<a;t[a]=0,r[a]=-1,e[a]=-1,n&=~i}}(e,s),e===Pl&&(Nl=Pl=null,Al=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Ql||(Ql=!0,Pu(tt,(function(){return xu(),null}))),s=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||s){s=jl.transition,jl.transition=null;var o=yt;yt=1;var l=Tl;Tl|=4,Ll.current=null,function(e,t){if(ea=Wt,pr(e=fr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,s=r.focusNode;r=r.focusOffset;try{n.nodeType,s.nodeType}catch(e){n=null;break e}var o=0,l=-1,u=-1,c=0,d=0,f=e,p=null;t:for(;;){for(var h;f!==n||0!==a&&3!==f.nodeType||(l=o+a),f!==s||0!==r&&3!==f.nodeType||(u=o+r),3===f.nodeType&&(o+=f.nodeValue.length),null!==(h=f.firstChild);)p=f,f=h;for(;;){if(f===e)break t;if(p===n&&++c===a&&(l=o),p===s&&++d===r&&(u=o),null!==(h=f.nextSibling))break;p=(f=p).parentNode}f=h}n=-1===l||-1===u?null:{start:l,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(ta={focusedElem:e,selectionRange:n},Wt=!1,Jo=t;null!==Jo;)if(e=(t=Jo).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Jo=e;else for(;null!==Jo;){t=Jo;try{var m=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var g=m.memoizedProps,v=m.memoizedState,b=t.stateNode,y=b.getSnapshotBeforeUpdate(t.elementType===t.type?g:gi(t.type,g),v);b.__reactInternalSnapshotBeforeUpdate=y}break;case 3:var _=t.stateNode.containerInfo;1===_.nodeType?_.textContent="":9===_.nodeType&&_.documentElement&&_.removeChild(_.documentElement);break;default:throw Error(i(163))}}catch(e){Cu(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Jo=e;break}Jo=t.return}m=nl,nl=!1}(e,n),vl(n,e),hr(ta),Wt=!!ea,ta=ea=null,e.current=n,yl(n,e,a),Ke(),Tl=l,yt=o,jl.transition=s}else e.current=n;if(Ql&&(Ql=!1,Yl=e,Kl=a),0===(s=e.pendingLanes)&&(Gl=null),function(e){if(it&&"function"==typeof it.onCommitFiberRoot)try{it.onCommitFiberRoot(at,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),au(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((a=t[n]).value,{componentStack:a.stack,digest:a.digest});if(Hl)throw Hl=!1,e=ql,ql=null,e;0!=(1&Kl)&&0!==e.tag&&xu(),0!=(1&(s=e.pendingLanes))?e===Zl?Xl++:(Xl=0,Zl=e):Xl=0,Ba()}(e,t,n,r)}finally{jl.transition=a,yt=r}return null}function xu(){if(null!==Yl){var e=_t(Kl),t=jl.transition,n=yt;try{if(jl.transition=null,yt=16>e?16:e,null===Yl)var r=!1;else{if(e=Yl,Yl=null,Kl=0,0!=(6&Tl))throw Error(i(331));var a=Tl;for(Tl|=4,Jo=e.current;null!==Jo;){var s=Jo,o=s.child;if(0!=(16&Jo.flags)){var l=s.deletions;if(null!==l){for(var u=0;u<l.length;u++){var c=l[u];for(Jo=c;null!==Jo;){var d=Jo;switch(d.tag){case 0:case 11:case 15:rl(8,d,s)}var f=d.child;if(null!==f)f.return=d,Jo=f;else for(;null!==Jo;){var p=(d=Jo).sibling,h=d.return;if(sl(d),d===c){Jo=null;break}if(null!==p){p.return=h,Jo=p;break}Jo=h}}}var m=s.alternate;if(null!==m){var g=m.child;if(null!==g){m.child=null;do{var v=g.sibling;g.sibling=null,g=v}while(null!==g)}}Jo=s}}if(0!=(2064&s.subtreeFlags)&&null!==o)o.return=s,Jo=o;else e:for(;null!==Jo;){if(0!=(2048&(s=Jo).flags))switch(s.tag){case 0:case 11:case 15:rl(9,s,s.return)}var b=s.sibling;if(null!==b){b.return=s.return,Jo=b;break e}Jo=s.return}}var y=e.current;for(Jo=y;null!==Jo;){var _=(o=Jo).child;if(0!=(2064&o.subtreeFlags)&&null!==_)_.return=o,Jo=_;else e:for(o=y;null!==Jo;){if(0!=(2048&(l=Jo).flags))try{switch(l.tag){case 0:case 11:case 15:al(9,l)}}catch(e){Cu(l,l.return,e)}if(l===o){Jo=null;break e}var S=l.sibling;if(null!==S){S.return=l.return,Jo=S;break e}Jo=l.return}}if(Tl=a,Ba(),it&&"function"==typeof it.onPostCommitFiberRoot)try{it.onPostCommitFiberRoot(at,e)}catch(e){}r=!0}return r}finally{yt=n,jl.transition=t}}return!1}function Eu(e,t,n){e=Oi(e,t=ho(0,t=uo(n,t),1),1),t=tu(),null!==e&&(vt(e,1,t),au(e,t))}function Cu(e,t,n){if(3===e.tag)Eu(e,e,n);else for(;null!==t;){if(3===t.tag){Eu(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Gl||!Gl.has(r))){t=Oi(t,e=mo(t,e=uo(n,e),1),1),e=tu(),null!==t&&(vt(t,1,e),au(t,e));break}}t=t.return}}function ku(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=tu(),e.pingedLanes|=e.suspendedLanes&n,Pl===e&&(Al&n)===n&&(4===Rl||3===Rl&&(130023424&Al)===Al&&500>Xe()-Bl?pu(e,0):zl|=n),au(e,t)}function Lu(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var n=tu();null!==(e=Ti(e,t))&&(vt(e,t,n),au(e,n))}function ju(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Lu(e,n)}function Tu(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(i(314))}null!==r&&r.delete(t),Lu(e,n)}function Pu(e,t){return Ge(e,t)}function Nu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Au(e,t,n,r){return new Nu(e,t,n,r)}function Du(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ou(e,t){var n=e.alternate;return null===n?((n=Au(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ru(e,t,n,r,a,s){var o=2;if(r=e,"function"==typeof e)Du(e)&&(o=1);else if("string"==typeof e)o=5;else e:switch(e){case x:return Mu(n.children,a,s,t);case E:o=8,a|=8;break;case C:return(e=Au(12,n,t,2|a)).elementType=C,e.lanes=s,e;case T:return(e=Au(13,n,t,a)).elementType=T,e.lanes=s,e;case P:return(e=Au(19,n,t,a)).elementType=P,e.lanes=s,e;case D:return Iu(n,a,s,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case k:o=10;break e;case L:o=9;break e;case j:o=11;break e;case N:o=14;break e;case A:o=16,r=null;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Au(o,n,t,a)).elementType=e,t.type=r,t.lanes=s,t}function Mu(e,t,n,r){return(e=Au(7,e,r,t)).lanes=n,e}function Iu(e,t,n,r){return(e=Au(22,e,r,t)).elementType=D,e.lanes=n,e.stateNode={isHidden:!1},e}function Fu(e,t,n){return(e=Au(6,e,null,t)).lanes=n,e}function zu(e,t,n){return(t=Au(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Uu(e,t,n,r,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gt(0),this.expirationTimes=gt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gt(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function $u(e,t,n,r,a,i,s,o,l){return e=new Uu(e,t,n,o,l),1===t?(t=1,!0===i&&(t|=8)):t=0,i=Au(3,null,null,t),e.current=i,i.stateNode=e,i.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ni(i),e}function Bu(e){if(!e)return La;e:{if(Be(e=e._reactInternals)!==e||1!==e.tag)throw Error(i(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Aa(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(i(171))}if(1===e.tag){var n=e.type;if(Aa(n))return Ra(e,n,t)}return t}function Vu(e,t,n,r,a,i,s,o,l){return(e=$u(n,r,!0,e,0,i,0,o,l)).context=Bu(null),n=e.current,(i=Di(r=tu(),a=nu(n))).callback=null!=t?t:null,Oi(n,i,a),e.current.lanes=a,vt(e,a,r),au(e,r),e}function Wu(e,t,n,r){var a=t.current,i=tu(),s=nu(a);return n=Bu(n),null===t.context?t.context=n:t.pendingContext=n,(t=Di(i,s)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Oi(a,t,s))&&(ru(e,a,s,i),Ri(e,a,s)),s}function Hu(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function qu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Gu(e,t){qu(e,t),(e=e.alternate)&&qu(e,t)}El=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Ta.current)_o=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return _o=!1,function(e,t,n){switch(t.tag){case 3:Po(t),pi();break;case 5:is(t);break;case 1:Aa(t.type)&&Ma(t);break;case 4:rs(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,a=t.memoizedProps.value;ka(vi,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(ka(os,1&os.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Fo(e,t,n):(ka(os,1&os.current),null!==(e=Ho(e,t,n))?e.sibling:null);ka(os,1&os.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Vo(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),ka(os,os.current),r)break;return null;case 22:case 23:return t.lanes=0,Co(e,t,n)}return Ho(e,t,n)}(e,t,n);_o=0!=(131072&e.flags)}else _o=!1,ai&&0!=(1048576&t.flags)&&Ja(t,qa,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Wo(e,t),e=t.pendingProps;var a=Na(t,ja.current);Ei(t,n),a=xs(null,t,r,e,a,n);var s=Es();return t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Aa(r)?(s=!0,Ma(t)):s=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,Ni(t),a.updater=$i,t.stateNode=a,a._reactInternals=t,Hi(t,r,e,n),t=To(null,t,r,!0,s,n)):(t.tag=0,ai&&s&&ei(t),So(null,t,a,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Wo(e,t),e=t.pendingProps,r=(a=r._init)(r._payload),t.type=r,a=t.tag=function(e){if("function"==typeof e)return Du(e)?1:0;if(null!=e){if((e=e.$$typeof)===j)return 11;if(e===N)return 14}return 2}(r),e=gi(r,e),a){case 0:t=Lo(null,t,r,e,n);break e;case 1:t=jo(null,t,r,e,n);break e;case 11:t=wo(null,t,r,e,n);break e;case 14:t=xo(null,t,r,gi(r.type,e),n);break e}throw Error(i(306,r,""))}return t;case 0:return r=t.type,a=t.pendingProps,Lo(e,t,r,a=t.elementType===r?a:gi(r,a),n);case 1:return r=t.type,a=t.pendingProps,jo(e,t,r,a=t.elementType===r?a:gi(r,a),n);case 3:e:{if(Po(t),null===e)throw Error(i(387));r=t.pendingProps,a=(s=t.memoizedState).element,Ai(e,t),Ii(t,r,null,n);var o=t.memoizedState;if(r=o.element,s.isDehydrated){if(s={element:r,isDehydrated:!1,cache:o.cache,pendingSuspenseBoundaries:o.pendingSuspenseBoundaries,transitions:o.transitions},t.updateQueue.baseState=s,t.memoizedState=s,256&t.flags){t=No(e,t,r,n,a=uo(Error(i(423)),t));break e}if(r!==a){t=No(e,t,r,n,a=uo(Error(i(424)),t));break e}for(ri=ua(t.stateNode.containerInfo.firstChild),ni=t,ai=!0,ii=null,n=Xi(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(pi(),r===a){t=Ho(e,t,n);break e}So(e,t,r,n)}t=t.child}return t;case 5:return is(t),null===e&&ui(t),r=t.type,a=t.pendingProps,s=null!==e?e.memoizedProps:null,o=a.children,na(r,a)?o=null:null!==s&&na(r,s)&&(t.flags|=32),ko(e,t),So(e,t,o,n),t.child;case 6:return null===e&&ui(t),null;case 13:return Fo(e,t,n);case 4:return rs(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ki(t,null,r,n):So(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,wo(e,t,r,a=t.elementType===r?a:gi(r,a),n);case 7:return So(e,t,t.pendingProps,n),t.child;case 8:case 12:return So(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,s=t.memoizedProps,o=a.value,ka(vi,r._currentValue),r._currentValue=o,null!==s)if(or(s.value,o)){if(s.children===a.children&&!Ta.current){t=Ho(e,t,n);break e}}else for(null!==(s=t.child)&&(s.return=t);null!==s;){var l=s.dependencies;if(null!==l){o=s.child;for(var u=l.firstContext;null!==u;){if(u.context===r){if(1===s.tag){(u=Di(-1,n&-n)).tag=2;var c=s.updateQueue;if(null!==c){var d=(c=c.shared).pending;null===d?u.next=u:(u.next=d.next,d.next=u),c.pending=u}}s.lanes|=n,null!==(u=s.alternate)&&(u.lanes|=n),xi(s.return,n,t),l.lanes|=n;break}u=u.next}}else if(10===s.tag)o=s.type===t.type?null:s.child;else if(18===s.tag){if(null===(o=s.return))throw Error(i(341));o.lanes|=n,null!==(l=o.alternate)&&(l.lanes|=n),xi(o,n,t),o=s.sibling}else o=s.child;if(null!==o)o.return=s;else for(o=s;null!==o;){if(o===t){o=null;break}if(null!==(s=o.sibling)){s.return=o.return,o=s;break}o=o.return}s=o}So(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=t.pendingProps.children,Ei(t,n),r=r(a=Ci(a)),t.flags|=1,So(e,t,r,n),t.child;case 14:return a=gi(r=t.type,t.pendingProps),xo(e,t,r,a=gi(r.type,a),n);case 15:return Eo(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:gi(r,a),Wo(e,t),t.tag=1,Aa(r)?(e=!0,Ma(t)):e=!1,Ei(t,n),Vi(t,r,a),Hi(t,r,a,n),To(null,t,r,!0,e,n);case 19:return Vo(e,t,n);case 22:return Co(e,t,n)}throw Error(i(156,t.tag))};var Qu="function"==typeof reportError?reportError:function(e){console.error(e)};function Yu(e){this._internalRoot=e}function Ku(e){this._internalRoot=e}function Xu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Zu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ju(){}function ec(e,t,n,r,a){var i=n._reactRootContainer;if(i){var s=i;if("function"==typeof a){var o=a;a=function(){var e=Hu(s);o.call(e)}}Wu(t,s,e,a)}else s=function(e,t,n,r,a){if(a){if("function"==typeof r){var i=r;r=function(){var e=Hu(s);i.call(e)}}var s=Vu(t,r,e,0,null,!1,0,"",Ju);return e._reactRootContainer=s,e[ha]=s.current,Br(8===e.nodeType?e.parentNode:e),du(),s}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var o=r;r=function(){var e=Hu(l);o.call(e)}}var l=$u(e,0,!1,null,0,!1,0,"",Ju);return e._reactRootContainer=l,e[ha]=l.current,Br(8===e.nodeType?e.parentNode:e),du((function(){Wu(t,l,n,r)})),l}(n,t,e,a,r);return Hu(s)}Ku.prototype.render=Yu.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(i(409));Wu(e,t,null,null)},Ku.prototype.unmount=Yu.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;du((function(){Wu(null,e,null,null)})),t[ha]=null}},Ku.prototype.unstable_scheduleHydration=function(e){if(e){var t=Et();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Dt.length&&0!==t&&t<Dt[n].priority;n++);Dt.splice(n,0,e),0===n&&It(e)}},St=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(bt(t,1|n),au(t,Xe()),0==(6&Tl)&&(Vl=Xe()+500,Ba()))}break;case 13:du((function(){var t=Ti(e,1);if(null!==t){var n=tu();ru(t,e,1,n)}})),Gu(e,1)}},wt=function(e){if(13===e.tag){var t=Ti(e,134217728);null!==t&&ru(t,e,134217728,tu()),Gu(e,134217728)}},xt=function(e){if(13===e.tag){var t=nu(e),n=Ti(e,t);null!==n&&ru(n,e,t,tu()),Gu(e,t)}},Et=function(){return yt},Ct=function(e,t){var n=yt;try{return yt=e,t()}finally{yt=n}},we=function(e,t,n){switch(t){case"input":if(Z(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=Sa(r);if(!a)throw Error(i(90));G(r),Z(r,a)}}}break;case"textarea":ie(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},je=cu,Te=du;var tc={usingClientEntryPoint:!1,Events:[ya,_a,Sa,ke,Le,cu]},nc={findFiberByHostInstance:ba,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rc={bundleType:nc.bundleType,version:nc.version,rendererPackageName:nc.rendererPackageName,rendererConfig:nc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:_.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=He(e))?null:e.stateNode},findFiberByHostInstance:nc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ac=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ac.isDisabled&&ac.supportsFiber)try{at=ac.inject(rc),it=ac}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tc,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xu(t))throw Error(i(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:w,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Xu(e))throw Error(i(299));var n=!1,r="",a=Qu;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),t=$u(e,1,!1,null,0,n,0,r,a),e[ha]=t.current,Br(8===e.nodeType?e.parentNode:e),new Yu(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw e=Object.keys(e).join(","),Error(i(268,e))}return null===(e=He(t))?null:e.stateNode},t.flushSync=function(e){return du(e)},t.hydrate=function(e,t,n){if(!Zu(t))throw Error(i(200));return ec(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Xu(e))throw Error(i(405));var r=null!=n&&n.hydratedSources||null,a=!1,s="",o=Qu;if(null!=n&&(!0===n.unstable_strictMode&&(a=!0),void 0!==n.identifierPrefix&&(s=n.identifierPrefix),void 0!==n.onRecoverableError&&(o=n.onRecoverableError)),t=Vu(t,null,e,1,null!=n?n:null,a,0,s,o),e[ha]=t.current,Br(e),r)for(e=0;e<r.length;e++)a=(a=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,a]:t.mutableSourceEagerHydrationData.push(n,a);return new Ku(t)},t.render=function(e,t,n){if(!Zu(t))throw Error(i(200));return ec(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Zu(e))throw Error(i(40));return!!e._reactRootContainer&&(du((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[ha]=null}))})),!0)},t.unstable_batchedUpdates=cu,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Zu(n))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return ec(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:(e,t,n)=>{"use strict";var r=n(3935);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},6113:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Provider:()=>z,ReactReduxContext:()=>u,batch:()=>i.unstable_batchedUpdates,connect:()=>F,createDispatchHook:()=>B,createSelectorHook:()=>h,createStoreHook:()=>U,shallowEqual:()=>A,useDispatch:()=>V,useSelector:()=>m,useStore:()=>$});var r=n(1688),a=n(2798),i=n(3935);let s=function(e){e()};const o=()=>s;var l=n(7294);const u=(0,l.createContext)(null);function c(){return(0,l.useContext)(u)}const d=()=>{throw new Error("uSES not initialized!")};let f=d;const p=(e,t)=>e===t;function h(e=u){const t=e===u?c:()=>(0,l.useContext)(e);return function(e,n=p){const{store:r,subscription:a,getServerState:i}=t(),s=f(a.addNestedSub,r.getState,i||r.getState,e,n);return(0,l.useDebugValue)(s),s}}const m=h();function g(){return g=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},g.apply(this,arguments)}function v(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}var b=n(8679),y=n.n(b),_=n(2973);const S=["initMapStateToProps","initMapDispatchToProps","initMergeProps"];function w(e,t,n,r,{areStatesEqual:a,areOwnPropsEqual:i,areStatePropsEqual:s}){let o,l,u,c,d,f=!1;return function(p,h){return f?function(f,p){const h=!i(p,l),m=!a(f,o,p,l);return o=f,l=p,h&&m?(u=e(o,l),t.dependsOnOwnProps&&(c=t(r,l)),d=n(u,c,l),d):h?(e.dependsOnOwnProps&&(u=e(o,l)),t.dependsOnOwnProps&&(c=t(r,l)),d=n(u,c,l),d):m?function(){const t=e(o,l),r=!s(t,u);return u=t,r&&(d=n(u,c,l)),d}():d}(p,h):(o=p,l=h,u=e(o,l),c=t(r,l),d=n(u,c,l),f=!0,d)}}function x(e){return function(t){const n=e(t);function r(){return n}return r.dependsOnOwnProps=!1,r}}function E(e){return e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function C(e,t){return function(t,{displayName:n}){const r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e,void 0)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=E(e);let a=r(t,n);return"function"==typeof a&&(r.mapToProps=a,r.dependsOnOwnProps=E(a),a=r(t,n)),a},r}}function k(e,t){return(n,r)=>{throw new Error(`Invalid value of type ${typeof e} for ${t} argument when connecting component ${r.wrappedComponentName}.`)}}function L(e,t,n){return g({},n,e,t)}const j={notify(){},get:()=>[]};function T(e,t){let n,r=j;function a(){s.onStateChange&&s.onStateChange()}function i(){n||(n=t?t.addNestedSub(a):e.subscribe(a),r=function(){const e=o();let t=null,n=null;return{clear(){t=null,n=null},notify(){e((()=>{let e=t;for(;e;)e.callback(),e=e.next}))},get(){let e=[],n=t;for(;n;)e.push(n),n=n.next;return e},subscribe(e){let r=!0,a=n={callback:e,next:null,prev:n};return a.prev?a.prev.next=a:t=a,function(){r&&null!==t&&(r=!1,a.next?a.next.prev=a.prev:n=a.prev,a.prev?a.prev.next=a.next:t=a.next)}}}}())}const s={addNestedSub:function(e){return i(),r.subscribe(e)},notifyNestedSubs:function(){r.notify()},handleChangeWrapper:a,isSubscribed:function(){return Boolean(n)},trySubscribe:i,tryUnsubscribe:function(){n&&(n(),n=void 0,r.clear(),r=j)},getListeners:()=>r};return s}const P="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?l.useLayoutEffect:l.useEffect;function N(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function A(e,t){if(N(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;const n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(let r=0;r<n.length;r++)if(!Object.prototype.hasOwnProperty.call(t,n[r])||!N(e[n[r]],t[n[r]]))return!1;return!0}const D=["reactReduxForwardedRef"];let O=d;const R=[null,null];function M(e,t,n,r,a,i){e.current=r,n.current=!1,a.current&&(a.current=null,i())}function I(e,t){return e===t}var F=function(e,t,n,{pure:r,areStatesEqual:a=I,areOwnPropsEqual:i=A,areStatePropsEqual:s=A,areMergedPropsEqual:o=A,forwardRef:c=!1,context:d=u}={}){const f=d,p=function(e){return e?"function"==typeof e?C(e):k(e,"mapStateToProps"):x((()=>({})))}(e),h=function(e){return e&&"object"==typeof e?x((t=>function(e,t){const n={};for(const r in e){const a=e[r];"function"==typeof a&&(n[r]=(...e)=>t(a(...e)))}return n}(e,t))):e?"function"==typeof e?C(e):k(e,"mapDispatchToProps"):x((e=>({dispatch:e})))}(t),m=function(e){return e?"function"==typeof e?function(e){return function(t,{displayName:n,areMergedPropsEqual:r}){let a,i=!1;return function(t,n,s){const o=e(t,n,s);return i?r(o,a)||(a=o):(i=!0,a=o),a}}}(e):k(e,"mergeProps"):()=>L}(n),b=Boolean(e);return e=>{const t=e.displayName||e.name||"Component",n=`Connect(${t})`,r={shouldHandleStateChanges:b,displayName:n,wrappedComponentName:t,WrappedComponent:e,initMapStateToProps:p,initMapDispatchToProps:h,initMergeProps:m,areStatesEqual:a,areStatePropsEqual:s,areOwnPropsEqual:i,areMergedPropsEqual:o};function u(t){const[n,a,i]=(0,l.useMemo)((()=>{const{reactReduxForwardedRef:e}=t,n=v(t,D);return[t.context,e,n]}),[t]),s=(0,l.useMemo)((()=>n&&n.Consumer&&(0,_.isContextConsumer)(l.createElement(n.Consumer,null))?n:f),[n,f]),o=(0,l.useContext)(s),u=Boolean(t.store)&&Boolean(t.store.getState)&&Boolean(t.store.dispatch),c=Boolean(o)&&Boolean(o.store),d=u?t.store:o.store,p=c?o.getServerState:d.getState,h=(0,l.useMemo)((()=>function(e,t){let{initMapStateToProps:n,initMapDispatchToProps:r,initMergeProps:a}=t,i=v(t,S);return w(n(e,i),r(e,i),a(e,i),e,i)}(d.dispatch,r)),[d]),[m,y]=(0,l.useMemo)((()=>{if(!b)return R;const e=T(d,u?void 0:o.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[d,u,o]),x=(0,l.useMemo)((()=>u?o:g({},o,{subscription:m})),[u,o,m]),E=(0,l.useRef)(),C=(0,l.useRef)(i),k=(0,l.useRef)(),L=(0,l.useRef)(!1),j=((0,l.useRef)(!1),(0,l.useRef)(!1)),N=(0,l.useRef)();P((()=>(j.current=!0,()=>{j.current=!1})),[]);const A=(0,l.useMemo)((()=>()=>k.current&&i===C.current?k.current:h(d.getState(),i)),[d,i]),I=(0,l.useMemo)((()=>e=>m?function(e,t,n,r,a,i,s,o,l,u,c){if(!e)return()=>{};let d=!1,f=null;const p=()=>{if(d||!o.current)return;const e=t.getState();let n,p;try{n=r(e,a.current)}catch(e){p=e,f=e}p||(f=null),n===i.current?s.current||u():(i.current=n,l.current=n,s.current=!0,c())};return n.onStateChange=p,n.trySubscribe(),p(),()=>{if(d=!0,n.tryUnsubscribe(),n.onStateChange=null,f)throw f}}(b,d,m,h,C,E,L,j,k,y,e):()=>{}),[m]);var F,z;let U;F=M,z=[C,E,L,i,k,y],P((()=>F(...z)),undefined);try{U=O(I,A,p?()=>h(p(),i):A)}catch(e){throw N.current&&(e.message+=`\nThe error may be correlated with this previous error:\n${N.current.stack}\n\n`),e}P((()=>{N.current=void 0,k.current=void 0,E.current=U}));const $=(0,l.useMemo)((()=>l.createElement(e,g({},U,{ref:a}))),[a,e,U]);return(0,l.useMemo)((()=>b?l.createElement(s.Provider,{value:x},$):$),[s,$,x])}const d=l.memo(u);if(d.WrappedComponent=e,d.displayName=u.displayName=n,c){const t=l.forwardRef((function(e,t){return l.createElement(d,g({},e,{reactReduxForwardedRef:t}))}));return t.displayName=n,t.WrappedComponent=e,y()(t,e)}return y()(d,e)}},z=function({store:e,context:t,children:n,serverState:r}){const a=(0,l.useMemo)((()=>{const t=T(e);return{store:e,subscription:t,getServerState:r?()=>r:void 0}}),[e,r]),i=(0,l.useMemo)((()=>e.getState()),[e]);P((()=>{const{subscription:t}=a;return t.onStateChange=t.notifyNestedSubs,t.trySubscribe(),i!==e.getState()&&t.notifyNestedSubs(),()=>{t.tryUnsubscribe(),t.onStateChange=void 0}}),[a,i]);const s=t||u;return l.createElement(s.Provider,{value:a},n)};function U(e=u){const t=e===u?c:()=>(0,l.useContext)(e);return function(){const{store:e}=t();return e}}const $=U();function B(e=u){const t=e===u?$:U(e);return function(){return t().dispatch}}const V=B();var W,H;W=a.useSyncExternalStoreWithSelector,f=W,(e=>{O=e})(r.useSyncExternalStore),H=i.unstable_batchedUpdates,s=H},8359:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),i=Symbol.for("react.strict_mode"),s=Symbol.for("react.profiler"),o=Symbol.for("react.provider"),l=Symbol.for("react.context"),u=Symbol.for("react.server_context"),c=Symbol.for("react.forward_ref"),d=Symbol.for("react.suspense"),f=Symbol.for("react.suspense_list"),p=Symbol.for("react.memo"),h=Symbol.for("react.lazy");Symbol.for("react.offscreen");Symbol.for("react.module.reference"),t.isContextConsumer=function(e){return function(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case n:switch(e=e.type){case a:case s:case i:case d:case f:return e;default:switch(e=e&&e.$$typeof){case u:case l:case c:case h:case p:case o:return e;default:return t}}case r:return t}}}(e)===l}},2973:(e,t,n)=>{"use strict";e.exports=n(8359)},9818:(e,t,n)=>{"use strict";n.r(t),n.d(t,{AbortedDeferredError:()=>q,Await:()=>Rt,BrowserRouter:()=>rn,Form:()=>dn,HashRouter:()=>an,Link:()=>un,MemoryRouter:()=>Tt,NavLink:()=>cn,Navigate:()=>Pt,NavigationType:()=>r,Outlet:()=>Nt,Route:()=>At,Router:()=>Dt,RouterProvider:()=>jt,Routes:()=>Ot,ScrollRestoration:()=>pn,UNSAFE_DataRouterContext:()=>Be,UNSAFE_DataRouterStateContext:()=>Ve,UNSAFE_LocationContext:()=>qe,UNSAFE_NavigationContext:()=>He,UNSAFE_RouteContext:()=>Ge,UNSAFE_useScrollRestoration:()=>jn,createBrowserRouter:()=>Jt,createHashRouter:()=>en,createMemoryRouter:()=>Vt,createPath:()=>m,createRoutesFromChildren:()=>Ut,createRoutesFromElements:()=>Ut,createSearchParams:()=>Yt,defer:()=>Y,generatePath:()=>D,isRouteErrorResponse:()=>Z,json:()=>H,matchPath:()=>O,matchRoutes:()=>S,parsePath:()=>g,redirect:()=>K,renderMatches:()=>$t,resolvePath:()=>I,unstable_HistoryRouter:()=>sn,unstable_useBlocker:()=>Lt,unstable_usePrompt:()=>Pn,useActionData:()=>wt,useAsyncError:()=>Ct,useAsyncValue:()=>Et,useBeforeUnload:()=>Tn,useFetcher:()=>En,useFetchers:()=>Cn,useFormAction:()=>wn,useHref:()=>Ke,useInRouterContext:()=>Xe,useLinkClickHandler:()=>bn,useLoaderData:()=>_t,useLocation:()=>Ze,useMatch:()=>et,useMatches:()=>yt,useNavigate:()=>tt,useNavigation:()=>vt,useNavigationType:()=>Je,useOutlet:()=>at,useOutletContext:()=>rt,useParams:()=>it,useResolvedPath:()=>st,useRevalidator:()=>bt,useRouteError:()=>xt,useRouteLoaderData:()=>St,useRoutes:()=>ot,useSearchParams:()=>yn,useSubmit:()=>_n});var r,a=n(7294),i=n.t(a,2);function s(){return s=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(r||(r={}));const o="popstate";function l(e){void 0===e&&(e={});let t,{initialEntries:n=["/"],initialIndex:a,v5Compat:i=!1}=e;t=n.map(((e,t)=>d(e,"string"==typeof e?null:e.state,0===t?"default":void 0)));let s=u(null==a?t.length-1:a),o=r.Pop,l=null;function u(e){return Math.min(Math.max(e,0),t.length-1)}function c(){return t[s]}function d(e,n,r){void 0===n&&(n=null);let a=h(t?c().pathname:"/",e,n,r);return f("/"===a.pathname.charAt(0),"relative pathnames are not supported in memory history: "+JSON.stringify(e)),a}function p(e){return"string"==typeof e?e:m(e)}return{get index(){return s},get action(){return o},get location(){return c()},createHref:p,createURL:e=>new URL(p(e),"http://localhost"),encodeLocation(e){let t="string"==typeof e?g(e):e;return{pathname:t.pathname||"",search:t.search||"",hash:t.hash||""}},push(e,n){o=r.Push;let a=d(e,n);s+=1,t.splice(s,t.length,a),i&&l&&l({action:o,location:a,delta:1})},replace(e,n){o=r.Replace;let a=d(e,n);t[s]=a,i&&l&&l({action:o,location:a,delta:0})},go(e){o=r.Pop;let n=u(s+e),a=t[n];s=n,l&&l({action:o,location:a,delta:e})},listen:e=>(l=e,()=>{l=null})}}function u(e){return void 0===e&&(e={}),v((function(e,t){let{pathname:n,search:r,hash:a}=e.location;return h("",{pathname:n,search:r,hash:a},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:m(t)}),null,e)}function c(e){return void 0===e&&(e={}),v((function(e,t){let{pathname:n="/",search:r="",hash:a=""}=g(e.location.hash.substr(1));return h("",{pathname:n,search:r,hash:a},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){let n=e.document.querySelector("base"),r="";if(n&&n.getAttribute("href")){let t=e.location.href,n=t.indexOf("#");r=-1===n?t:t.slice(0,n)}return r+"#"+("string"==typeof t?t:m(t))}),(function(e,t){f("/"===e.pathname.charAt(0),"relative pathnames are not supported in hash history.push("+JSON.stringify(t)+")")}),e)}function d(e,t){if(!1===e||null==e)throw new Error(t)}function f(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function p(e,t){return{usr:e.state,key:e.key,idx:t}}function h(e,t,n,r){return void 0===n&&(n=null),s({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?g(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function m(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function g(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}function v(e,t,n,a){void 0===a&&(a={});let{window:i=document.defaultView,v5Compat:l=!1}=a,u=i.history,c=r.Pop,f=null,g=v();function v(){return(u.state||{idx:null}).idx}function b(){c=r.Pop;let e=v(),t=null==e?null:e-g;g=e,f&&f({action:c,location:_.location,delta:t})}function y(e){let t="null"!==i.location.origin?i.location.origin:i.location.href,n="string"==typeof e?e:m(e);return d(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==g&&(g=0,u.replaceState(s({},u.state,{idx:g}),""));let _={get action(){return c},get location(){return e(i,u)},listen(e){if(f)throw new Error("A history only accepts one active listener");return i.addEventListener(o,b),f=e,()=>{i.removeEventListener(o,b),f=null}},createHref:e=>t(i,e),createURL:y,encodeLocation(e){let t=y(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,t){c=r.Push;let a=h(_.location,e,t);n&&n(a,e),g=v()+1;let s=p(a,g),o=_.createHref(a);try{u.pushState(s,"",o)}catch(e){i.location.assign(o)}l&&f&&f({action:c,location:_.location,delta:1})},replace:function(e,t){c=r.Replace;let a=h(_.location,e,t);n&&n(a,e),g=v();let i=p(a,g),s=_.createHref(a);u.replaceState(i,"",s),l&&f&&f({action:c,location:_.location,delta:0})},go:e=>u.go(e)};return _}var b;!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(b||(b={}));const y=new Set(["lazy","caseSensitive","path","id","index","children"]);function _(e,t,n,r){return void 0===n&&(n=[]),void 0===r&&(r={}),e.map(((e,a)=>{let i=[...n,a],o="string"==typeof e.id?e.id:i.join("-");if(d(!0!==e.index||!e.children,"Cannot specify children on an index route"),d(!r[o],'Found a route id collision on id "'+o+"\".  Route id's must be globally unique within Data Router usages"),function(e){return!0===e.index}(e)){let n=s({},e,{hasErrorBoundary:t(e),id:o});return r[o]=n,n}{let n=s({},e,{id:o,hasErrorBoundary:t(e),children:void 0});return r[o]=n,e.children&&(n.children=_(e.children,t,i,r)),n}}))}function S(e,t,n){void 0===n&&(n="/");let r=M(("string"==typeof t?g(t):t).pathname||"/",n);if(null==r)return null;let a=w(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(a);let i=null;for(let e=0;null==i&&e<a.length;++e)i=A(a[e],R(r));return i}function w(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");let a=(e,a,i)=>{let s={relativePath:void 0===i?e.path||"":i,caseSensitive:!0===e.caseSensitive,childrenIndex:a,route:e};s.relativePath.startsWith("/")&&(d(s.relativePath.startsWith(r),'Absolute route path "'+s.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),s.relativePath=s.relativePath.slice(r.length));let o=$([r,s.relativePath]),l=n.concat(s);e.children&&e.children.length>0&&(d(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+o+'".'),w(e.children,t,l,o)),(null!=e.path||e.index)&&t.push({path:o,score:N(o,e.index),routesMeta:l})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of x(e.path))a(e,t,n);else a(e,t)})),t}function x(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,a=n.endsWith("?"),i=n.replace(/\?$/,"");if(0===r.length)return a?[i,""]:[i];let s=x(r.join("/")),o=[];return o.push(...s.map((e=>""===e?i:[i,e].join("/")))),a&&o.push(...s),o.map((t=>e.startsWith("/")&&""===t?"/":t))}const E=/^:\w+$/,C=3,k=2,L=1,j=10,T=-2,P=e=>"*"===e;function N(e,t){let n=e.split("/"),r=n.length;return n.some(P)&&(r+=T),t&&(r+=k),n.filter((e=>!P(e))).reduce(((e,t)=>e+(E.test(t)?C:""===t?L:j)),r)}function A(e,t){let{routesMeta:n}=e,r={},a="/",i=[];for(let e=0;e<n.length;++e){let s=n[e],o=e===n.length-1,l="/"===a?t:t.slice(a.length)||"/",u=O({path:s.relativePath,caseSensitive:s.caseSensitive,end:o},l);if(!u)return null;Object.assign(r,u.params);let c=s.route;i.push({params:r,pathname:$([a,u.pathname]),pathnameBase:B($([a,u.pathnameBase])),route:c}),"/"!==u.pathnameBase&&(a=$([a,u.pathnameBase]))}return i}function D(e,t){void 0===t&&(t={});let n=e;return n.endsWith("*")&&"*"!==n&&!n.endsWith("/*")&&(f(!1,'Route path "'+n+'" will be treated as if it were "'+n.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+n.replace(/\*$/,"/*")+'".'),n=n.replace(/\*$/,"/*")),(n.startsWith("/")?"/":"")+n.split(/\/+/).map(((e,n,r)=>{if(n===r.length-1&&"*"===e)return t["*"];const a=e.match(/^:(\w+)(\??)$/);if(a){const[,e,n]=a;let r=t[e];return"?"===n?null==r?"":r:(null==r&&d(!1,'Missing ":'+e+'" param'),r)}return e.replace(/\?$/g,"")})).filter((e=>!!e)).join("/")}function O(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),f("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],a="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/\/:(\w+)/g,((e,t)=>(r.push(t),"/([^\\/]+)")));return e.endsWith("*")?(r.push("*"),a+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?a+="\\/*$":""!==e&&"/"!==e&&(a+="(?:(?=\\/|$))"),[new RegExp(a,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),a=t.match(n);if(!a)return null;let i=a[0],s=i.replace(/(.)\/+$/,"$1"),o=a.slice(1);return{params:r.reduce(((e,t,n)=>{if("*"===t){let e=o[n]||"";s=i.slice(0,i.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(n){return f(!1,'The value for the URL param "'+t+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}(o[n]||"",t),e}),{}),pathname:i,pathnameBase:s,pattern:e}}function R(e){try{return decodeURI(e)}catch(t){return f(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function M(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function I(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:a=""}="string"==typeof e?g(e):e,i=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:i,search:V(r),hash:W(a)}}function F(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function z(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function U(e,t,n,r){let a;void 0===r&&(r=!1),"string"==typeof e?a=g(e):(a=s({},e),d(!a.pathname||!a.pathname.includes("?"),F("?","pathname","search",a)),d(!a.pathname||!a.pathname.includes("#"),F("#","pathname","hash",a)),d(!a.search||!a.search.includes("#"),F("#","search","hash",a)));let i,o=""===e||""===a.pathname,l=o?"/":a.pathname;if(r||null==l)i=n;else{let e=t.length-1;if(l.startsWith("..")){let t=l.split("/");for(;".."===t[0];)t.shift(),e-=1;a.pathname=t.join("/")}i=e>=0?t[e]:"/"}let u=I(a,i),c=l&&"/"!==l&&l.endsWith("/"),f=(o||"."===l)&&n.endsWith("/");return u.pathname.endsWith("/")||!c&&!f||(u.pathname+="/"),u}const $=e=>e.join("/").replace(/\/\/+/g,"/"),B=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),V=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",W=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"",H=function(e,t){void 0===t&&(t={});let n="number"==typeof t?{status:t}:t,r=new Headers(n.headers);return r.has("Content-Type")||r.set("Content-Type","application/json; charset=utf-8"),new Response(JSON.stringify(e),s({},n,{headers:r}))};class q extends Error{}class G{constructor(e,t){let n;this.pendingKeysSet=new Set,this.subscribers=new Set,this.deferredKeys=[],d(e&&"object"==typeof e&&!Array.isArray(e),"defer() only accepts plain objects"),this.abortPromise=new Promise(((e,t)=>n=t)),this.controller=new AbortController;let r=()=>n(new q("Deferred data aborted"));this.unlistenAbortSignal=()=>this.controller.signal.removeEventListener("abort",r),this.controller.signal.addEventListener("abort",r),this.data=Object.entries(e).reduce(((e,t)=>{let[n,r]=t;return Object.assign(e,{[n]:this.trackPromise(n,r)})}),{}),this.done&&this.unlistenAbortSignal(),this.init=t}trackPromise(e,t){if(!(t instanceof Promise))return t;this.deferredKeys.push(e),this.pendingKeysSet.add(e);let n=Promise.race([t,this.abortPromise]).then((t=>this.onSettle(n,e,null,t)),(t=>this.onSettle(n,e,t)));return n.catch((()=>{})),Object.defineProperty(n,"_tracked",{get:()=>!0}),n}onSettle(e,t,n,r){return this.controller.signal.aborted&&n instanceof q?(this.unlistenAbortSignal(),Object.defineProperty(e,"_error",{get:()=>n}),Promise.reject(n)):(this.pendingKeysSet.delete(t),this.done&&this.unlistenAbortSignal(),n?(Object.defineProperty(e,"_error",{get:()=>n}),this.emit(!1,t),Promise.reject(n)):(Object.defineProperty(e,"_data",{get:()=>r}),this.emit(!1,t),r))}emit(e,t){this.subscribers.forEach((n=>n(e,t)))}subscribe(e){return this.subscribers.add(e),()=>this.subscribers.delete(e)}cancel(){this.controller.abort(),this.pendingKeysSet.forEach(((e,t)=>this.pendingKeysSet.delete(t))),this.emit(!0)}async resolveData(e){let t=!1;if(!this.done){let n=()=>this.cancel();e.addEventListener("abort",n),t=await new Promise((t=>{this.subscribe((r=>{e.removeEventListener("abort",n),(r||this.done)&&t(r)}))}))}return t}get done(){return 0===this.pendingKeysSet.size}get unwrappedData(){return d(null!==this.data&&this.done,"Can only unwrap data on initialized and settled deferreds"),Object.entries(this.data).reduce(((e,t)=>{let[n,r]=t;return Object.assign(e,{[n]:Q(r)})}),{})}get pendingKeys(){return Array.from(this.pendingKeysSet)}}function Q(e){if(!function(e){return e instanceof Promise&&!0===e._tracked}(e))return e;if(e._error)throw e._error;return e._data}const Y=function(e,t){return void 0===t&&(t={}),new G(e,"number"==typeof t?{status:t}:t)},K=function(e,t){void 0===t&&(t=302);let n=t;"number"==typeof n?n={status:n}:void 0===n.status&&(n.status=302);let r=new Headers(n.headers);return r.set("Location",e),new Response(null,s({},n,{headers:r}))};class X{constructor(e,t,n,r){void 0===r&&(r=!1),this.status=e,this.statusText=t||"",this.internal=r,n instanceof Error?(this.data=n.toString(),this.error=n):this.data=n}}function Z(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}const J=["post","put","patch","delete"],ee=new Set(J),te=["get",...J],ne=new Set(te),re=new Set([301,302,303,307,308]),ae=new Set([307,308]),ie={state:"idle",location:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0},se={state:"idle",data:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0},oe={state:"unblocked",proceed:void 0,reset:void 0,location:void 0},le=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,ue="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,ce=!ue,de=e=>Boolean(e.hasErrorBoundary);function fe(e){d(e.routes.length>0,"You must provide a non-empty routes array to createRouter");let t,n=e.detectErrorBoundary||de,a={},i=_(e.routes,n,void 0,a),o=null,l=new Set,u=null,c=null,p=null,m=null!=e.hydrationData,g=S(i,e.history.location,e.basename),v=null;if(null==g){let t=Ce(404,{pathname:e.history.location.pathname}),{matches:n,route:r}=Ee(i);g=n,v={[r.id]:t}}let y,w,x=!(g.some((e=>e.route.lazy))||g.some((e=>e.route.loader))&&null==e.hydrationData),E={historyAction:e.history.action,location:e.history.location,matches:g,initialized:x,navigation:ie,restoreScrollPosition:null==e.hydrationData&&null,preventScrollReset:!1,revalidation:"idle",loaderData:e.hydrationData&&e.hydrationData.loaderData||{},actionData:e.hydrationData&&e.hydrationData.actionData||null,errors:e.hydrationData&&e.hydrationData.errors||v,fetchers:new Map,blockers:new Map},C=r.Pop,k=!1,L=!1,j=!1,T=[],P=[],N=new Map,A=0,D=-1,O=new Map,R=new Set,I=new Map,F=new Map,z=new Map,U=!1;function $(e){E=s({},E,e),l.forEach((e=>e(E)))}function B(n,a){var o,l;let u,c=null!=E.actionData&&null!=E.navigation.formMethod&&Ne(E.navigation.formMethod)&&"loading"===E.navigation.state&&!0!==(null==(o=n.state)?void 0:o._isRedirect);u=a.actionData?Object.keys(a.actionData).length>0?a.actionData:null:c?E.actionData:null;let d=a.loaderData?we(E.loaderData,a.loaderData,a.matches||[],a.errors):E.loaderData;for(let[e]of z)J(e);let f=!0===k||null!=E.navigation.formMethod&&Ne(E.navigation.formMethod)&&!0!==(null==(l=n.state)?void 0:l._isRedirect);t&&(i=t,t=void 0),$(s({},a,{actionData:u,loaderData:d,historyAction:C,location:n,initialized:!0,navigation:ie,revalidation:"idle",restoreScrollPosition:re(n,a.matches||E.matches),preventScrollReset:f,blockers:new Map(E.blockers)})),L||C===r.Pop||(C===r.Push?e.history.push(n,n.state):C===r.Replace&&e.history.replace(n,n.state)),C=r.Pop,k=!1,L=!1,j=!1,T=[],P=[]}async function V(o,l,f){w&&w.abort(),w=null,C=o,L=!0===(f&&f.startUninterruptedRevalidation),function(e,t){if(u&&c&&p){let n=t.map((e=>Re(e,E.loaderData))),r=c(e,n)||e.key;u[r]=p()}}(E.location,E.matches),k=!0===(f&&f.preventScrollReset);let h=t||i,m=f&&f.overrideNavigation,g=S(h,l,e.basename);if(!g){let e=Ce(404,{pathname:l.pathname}),{matches:t,route:n}=Ee(h);return ne(),void B(l,{matches:t,loaderData:{},errors:{[n.id]:e}})}if(_=l,!((v=E.location).pathname!==_.pathname||v.search!==_.search||v.hash===_.hash||f&&f.submission&&Ne(f.submission.formMethod)))return void B(l,{matches:g});var v,_;w=new AbortController;let x,O,M=ye(e.history,l,w.signal,f&&f.submission);if(f&&f.pendingError)O={[xe(g).route.id]:f.pendingError};else if(f&&f.submission&&Ne(f.submission.formMethod)){let e=await async function(e,t,i,o,l){let u;G(),$({navigation:s({state:"submitting",location:t},i)});let c=Me(o,t);if(c.route.action||c.route.lazy){if(u=await be("action",e,c,o,a,n,y.basename),e.signal.aborted)return{shortCircuited:!0}}else u={type:b.error,error:Ce(405,{method:e.method,pathname:t.pathname,routeId:c.route.id})};if(Pe(u)){let e;return e=l&&null!=l.replace?l.replace:u.location===E.location.pathname+E.location.search,await H(E,u,{submission:i,replace:e}),{shortCircuited:!0}}if(Te(u)){let e=xe(o,c.route.id);return!0!==(l&&l.replace)&&(C=r.Push),{pendingActionData:{},pendingActionError:{[e.route.id]:u.error}}}if(je(u))throw Ce(400,{type:"defer-action"});return{pendingActionData:{[c.route.id]:u.data}}}(M,l,f.submission,g,{replace:f.replace});if(e.shortCircuited)return;x=e.pendingActionData,O=e.pendingActionError,m=s({state:"loading",location:l},f.submission),M=new Request(M.url,{signal:M.signal})}let{shortCircuited:z,loaderData:U,errors:V}=await async function(n,r,a,o,l,u,c,f){let p=o;p||(p=s({state:"loading",location:r,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0},l));let h=l||(p.formMethod&&p.formAction&&p.formData&&p.formEncType?{formMethod:p.formMethod,formAction:p.formAction,formData:p.formData,formEncType:p.formEncType}:void 0),m=t||i,[g,v]=he(e.history,E,a,h,r,j,T,P,I,m,e.basename,c,f);if(ne((e=>!(a&&a.some((t=>t.route.id===e)))||g&&g.some((t=>t.route.id===e)))),0===g.length&&0===v.length)return B(r,s({matches:a,loaderData:{},errors:f||null},c?{actionData:c}:{})),{shortCircuited:!0};if(!L){v.forEach((e=>{let t=E.fetchers.get(e.key),n={state:"loading",data:t&&t.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0," _hasFetcherDoneAnything ":!0};E.fetchers.set(e.key,n)}));let e=c||E.actionData;$(s({navigation:p},e?0===Object.keys(e).length?{actionData:null}:{actionData:e}:{},v.length>0?{fetchers:new Map(E.fetchers)}:{}))}D=++A,v.forEach((e=>N.set(e.key,w)));let{results:b,loaderResults:y,fetcherResults:_}=await q(E.matches,a,g,v,n);if(n.signal.aborted)return{shortCircuited:!0};v.forEach((e=>N.delete(e.key)));let S=ke(b);if(S)return await H(E,S,{replace:u}),{shortCircuited:!0};let{loaderData:x,errors:C}=Se(E,a,g,y,f,v,_,F);return F.forEach(((e,t)=>{e.subscribe((n=>{(n||e.done)&&F.delete(t)}))})),function(){let e=[];for(let t of R){let n=E.fetchers.get(t);d(n,"Expected fetcher: "+t),"loading"===n.state&&(R.delete(t),e.push(t))}X(e)}(),s({loaderData:x,errors:C},Z(D)||v.length>0?{fetchers:new Map(E.fetchers)}:{})}(M,l,g,m,f&&f.submission,f&&f.replace,x,O);z||(w=null,B(l,s({matches:g},x?{actionData:x}:{},{loaderData:U,errors:V})))}function W(e){return E.fetchers.get(e)||se}async function H(t,n,a){var i;let{submission:o,replace:l,isFetchActionRedirect:u}=void 0===a?{}:a;n.revalidate&&(j=!0);let c=h(t.location,n.location,s({_isRedirect:!0},u?{_isFetchActionRedirect:!0}:{}));if(d(c,"Expected a location on the redirect navigation"),le.test(n.location)&&ue&&void 0!==(null==(i=window)?void 0:i.location)){let t=e.history.createURL(n.location),r=null==M(t.pathname,e.basename||"/");if(window.location.origin!==t.origin||r)return void(l?window.location.replace(n.location):window.location.assign(n.location))}w=null;let f=!0===l?r.Replace:r.Push,{formMethod:p,formAction:m,formEncType:g,formData:v}=t.navigation;!o&&p&&m&&v&&g&&(o={formMethod:p,formAction:m,formEncType:g,formData:v}),ae.has(n.status)&&o&&Ne(o.formMethod)?await V(f,c,{submission:s({},o,{formAction:n.location}),preventScrollReset:k}):await V(f,c,{overrideNavigation:{state:"loading",location:c,formMethod:o?o.formMethod:void 0,formAction:o?o.formAction:void 0,formEncType:o?o.formEncType:void 0,formData:o?o.formData:void 0},preventScrollReset:k})}async function q(t,r,i,s,o){let l=await Promise.all([...i.map((e=>be("loader",o,e,r,a,n,y.basename))),...s.map((t=>t.matches&&t.match?be("loader",ye(e.history,t.path,o.signal),t.match,t.matches,a,n,y.basename):{type:b.error,error:Ce(404,{pathname:t.path})}))]),u=l.slice(0,i.length),c=l.slice(i.length);return await Promise.all([Ae(t,i,u,o.signal,!1,E.loaderData),Ae(t,s.map((e=>e.match)),c,o.signal,!0)]),{results:l,loaderResults:u,fetcherResults:c}}function G(){j=!0,T.push(...ne()),I.forEach(((e,t)=>{N.has(t)&&(P.push(t),K(t))}))}function Q(e,t,n){let r=xe(E.matches,t);Y(e),$({errors:{[r.route.id]:n},fetchers:new Map(E.fetchers)})}function Y(e){N.has(e)&&K(e),I.delete(e),O.delete(e),R.delete(e),E.fetchers.delete(e)}function K(e){let t=N.get(e);d(t,"Expected fetch controller: "+e),t.abort(),N.delete(e)}function X(e){for(let t of e){let e={state:"idle",data:W(t).data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0," _hasFetcherDoneAnything ":!0};E.fetchers.set(t,e)}}function Z(e){let t=[];for(let[n,r]of O)if(r<e){let e=E.fetchers.get(n);d(e,"Expected fetcher: "+n),"loading"===e.state&&(K(n),O.delete(n),t.push(n))}return X(t),t.length>0}function J(e){E.blockers.delete(e),z.delete(e)}function ee(e,t){let n=E.blockers.get(e)||oe;d("unblocked"===n.state&&"blocked"===t.state||"blocked"===n.state&&"blocked"===t.state||"blocked"===n.state&&"proceeding"===t.state||"blocked"===n.state&&"unblocked"===t.state||"proceeding"===n.state&&"unblocked"===t.state,"Invalid blocker state transition: "+n.state+" -> "+t.state),E.blockers.set(e,t),$({blockers:new Map(E.blockers)})}function te(e){let{currentLocation:t,nextLocation:n,historyAction:r}=e;if(0===z.size)return;z.size>1&&f(!1,"A router only supports one blocker at a time");let a=Array.from(z.entries()),[i,s]=a[a.length-1],o=E.blockers.get(i);return o&&"proceeding"===o.state?void 0:s({currentLocation:t,nextLocation:n,historyAction:r})?i:void 0}function ne(e){let t=[];return F.forEach(((n,r)=>{e&&!e(r)||(n.cancel(),t.push(r),F.delete(r))})),t}function re(e,t){if(u&&c&&p){let n=t.map((e=>Re(e,E.loaderData))),r=c(e,n)||e.key,a=u[r];if("number"==typeof a)return a}return null}return y={get basename(){return e.basename},get state(){return E},get routes(){return i},initialize:function(){if(o=e.history.listen((t=>{let{action:n,location:r,delta:a}=t;if(U)return void(U=!1);f(0===z.size||null!=a,"You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");let i=te({currentLocation:E.location,nextLocation:r,historyAction:n});return i&&null!=a?(U=!0,e.history.go(-1*a),void ee(i,{state:"blocked",location:r,proceed(){ee(i,{state:"proceeding",proceed:void 0,reset:void 0,location:r}),e.history.go(a)},reset(){J(i),$({blockers:new Map(y.state.blockers)})}})):V(n,r)})),E.initialized)return y;let t=E.matches.filter((e=>e.route.lazy));if(0===t.length)return V(r.Pop,E.location),y;let i=t.map((e=>ve(e.route,n,a)));return Promise.all(i).then((()=>{E.matches.some((e=>e.route.loader))&&null==e.hydrationData?V(r.Pop,E.location):$({initialized:!0})})),y},subscribe:function(e){return l.add(e),()=>l.delete(e)},enableScrollRestoration:function(e,t,n){if(u=e,p=t,c=n||(e=>e.key),!m&&E.navigation===ie){m=!0;let e=re(E.location,E.matches);null!=e&&$({restoreScrollPosition:e})}return()=>{u=null,p=null,c=null}},navigate:async function t(n,a){if("number"==typeof n)return void e.history.go(n);let{path:i,submission:o,error:l}=pe(n,a),u=E.location,c=h(E.location,i,a&&a.state);c=s({},c,e.history.encodeLocation(c));let d=a&&null!=a.replace?a.replace:void 0,f=r.Push;!0===d?f=r.Replace:!1===d||null!=o&&Ne(o.formMethod)&&o.formAction===E.location.pathname+E.location.search&&(f=r.Replace);let p=a&&"preventScrollReset"in a?!0===a.preventScrollReset:void 0,m=te({currentLocation:u,nextLocation:c,historyAction:f});if(!m)return await V(f,c,{submission:o,pendingError:l,preventScrollReset:p,replace:a&&a.replace});ee(m,{state:"blocked",location:c,proceed(){ee(m,{state:"proceeding",proceed:void 0,reset:void 0,location:c}),t(n,a)},reset(){J(m),$({blockers:new Map(E.blockers)})}})},fetch:function(r,o,l,u){if(ce)throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");N.has(r)&&K(r);let c=S(t||i,l,e.basename);if(!c)return void Q(r,o,Ce(404,{pathname:l}));let{path:f,submission:p}=pe(l,u,!0),h=Me(c,f);k=!0===(u&&u.preventScrollReset),p&&Ne(p.formMethod)?async function(r,o,l,u,c,f){if(G(),I.delete(r),!u.route.action&&!u.route.lazy){let e=Ce(405,{method:f.formMethod,pathname:l,routeId:o});return void Q(r,o,e)}let p=E.fetchers.get(r),h=s({state:"submitting"},f,{data:p&&p.data," _hasFetcherDoneAnything ":!0});E.fetchers.set(r,h),$({fetchers:new Map(E.fetchers)});let m=new AbortController,g=ye(e.history,l,m.signal,f);N.set(r,m);let v=await be("action",g,u,c,a,n,y.basename);if(g.signal.aborted)return void(N.get(r)===m&&N.delete(r));if(Pe(v)){N.delete(r),R.add(r);let e=s({state:"loading"},f,{data:void 0," _hasFetcherDoneAnything ":!0});return E.fetchers.set(r,e),$({fetchers:new Map(E.fetchers)}),H(E,v,{isFetchActionRedirect:!0})}if(Te(v))return void Q(r,o,v.error);if(je(v))throw Ce(400,{type:"defer-action"});let b=E.navigation.location||E.location,_=ye(e.history,b,m.signal),x=t||i,k="idle"!==E.navigation.state?S(x,E.navigation.location,e.basename):E.matches;d(k,"Didn't find any matches after fetcher action");let L=++A;O.set(r,L);let M=s({state:"loading",data:v.data},f,{" _hasFetcherDoneAnything ":!0});E.fetchers.set(r,M);let[z,U]=he(e.history,E,k,f,b,j,T,P,I,x,e.basename,{[u.route.id]:v.data},void 0);U.filter((e=>e.key!==r)).forEach((e=>{let t=e.key,n=E.fetchers.get(t),r={state:"loading",data:n&&n.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0," _hasFetcherDoneAnything ":!0};E.fetchers.set(t,r),N.set(t,m)})),$({fetchers:new Map(E.fetchers)});let{results:V,loaderResults:W,fetcherResults:Y}=await q(E.matches,k,z,U,_);if(m.signal.aborted)return;O.delete(r),N.delete(r),U.forEach((e=>N.delete(e.key)));let K=ke(V);if(K)return H(E,K);let{loaderData:X,errors:J}=Se(E,E.matches,z,W,void 0,U,Y,F),ee={state:"idle",data:v.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0," _hasFetcherDoneAnything ":!0};E.fetchers.set(r,ee);let te=Z(L);"loading"===E.navigation.state&&L>D?(d(C,"Expected pending action"),w&&w.abort(),B(E.navigation.location,{matches:k,loaderData:X,errors:J,fetchers:new Map(E.fetchers)})):($(s({errors:J,loaderData:we(E.loaderData,X,k,J)},te?{fetchers:new Map(E.fetchers)}:{})),j=!1)}(r,o,f,h,c,p):(I.set(r,{routeId:o,path:f}),async function(t,r,i,o,l,u){let c=E.fetchers.get(t),f=s({state:"loading",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0},u,{data:c&&c.data," _hasFetcherDoneAnything ":!0});E.fetchers.set(t,f),$({fetchers:new Map(E.fetchers)});let p=new AbortController,h=ye(e.history,i,p.signal);N.set(t,p);let m=await be("loader",h,o,l,a,n,y.basename);if(je(m)&&(m=await De(m,h.signal,!0)||m),N.get(t)===p&&N.delete(t),h.signal.aborted)return;if(Pe(m))return void await H(E,m);if(Te(m)){let e=xe(E.matches,r);return E.fetchers.delete(t),void $({fetchers:new Map(E.fetchers),errors:{[e.route.id]:m.error}})}d(!je(m),"Unhandled fetcher deferred data");let g={state:"idle",data:m.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0," _hasFetcherDoneAnything ":!0};E.fetchers.set(t,g),$({fetchers:new Map(E.fetchers)})}(r,o,f,h,c,p))},revalidate:function(){G(),$({revalidation:"loading"}),"submitting"!==E.navigation.state&&("idle"!==E.navigation.state?V(C||E.historyAction,E.navigation.location,{overrideNavigation:E.navigation}):V(E.historyAction,E.location,{startUninterruptedRevalidation:!0}))},createHref:t=>e.history.createHref(t),encodeLocation:t=>e.history.encodeLocation(t),getFetcher:W,deleteFetcher:Y,dispose:function(){o&&o(),l.clear(),w&&w.abort(),E.fetchers.forEach(((e,t)=>Y(t))),E.blockers.forEach(((e,t)=>J(t)))},getBlocker:function(e,t){let n=E.blockers.get(e)||oe;return z.get(e)!==t&&z.set(e,t),n},deleteBlocker:J,_internalFetchControllers:N,_internalActiveDeferreds:F,_internalSetRoutes:function(e){t=e}},y}function pe(e,t,n){void 0===n&&(n=!1);let r,a="string"==typeof e?e:m(e);if(!t||!function(e){return null!=e&&"formData"in e}(t))return{path:a};if(t.formMethod&&(i=t.formMethod,!ne.has(i)))return{path:a,error:Ce(405,{method:t.formMethod})};var i;if(t.formData&&(r={formMethod:t.formMethod||"get",formAction:Le(a),formEncType:t&&t.formEncType||"application/x-www-form-urlencoded",formData:t.formData},Ne(r.formMethod)))return{path:a,submission:r};let s=g(a),o=_e(t.formData);return n&&s.search&&Oe(s.search)&&o.append("index",""),s.search="?"+o,{path:m(s),submission:r}}function he(e,t,n,r,a,i,o,l,u,c,d,f,p){let h=p?Object.values(p)[0]:f?Object.values(f)[0]:void 0,m=e.createURL(t.location),g=e.createURL(a),v=i||m.toString()===g.toString()||m.search!==g.search,b=p?Object.keys(p)[0]:void 0,y=function(e,t){let n=e;if(t){let r=e.findIndex((e=>e.route.id===t));r>=0&&(n=e.slice(0,r))}return n}(n,b).filter(((e,n)=>{if(e.route.lazy)return!0;if(null==e.route.loader)return!1;if(function(e,t,n){let r=!t||n.route.id!==t.route.id,a=void 0===e[n.route.id];return r||a}(t.loaderData,t.matches[n],e)||o.some((t=>t===e.route.id)))return!0;let a=t.matches[n],i=e;return ge(e,s({currentUrl:m,currentParams:a.params,nextUrl:g,nextParams:i.params},r,{actionResult:h,defaultShouldRevalidate:v||me(a,i)}))})),_=[];return u.forEach(((e,a)=>{if(!n.some((t=>t.route.id===e.routeId)))return;let i=S(c,e.path,d);if(!i)return void _.push(s({key:a},e,{matches:null,match:null}));let o=Me(i,e.path);(l.includes(a)||ge(o,s({currentUrl:m,currentParams:t.matches[t.matches.length-1].params,nextUrl:g,nextParams:n[n.length-1].params},r,{actionResult:h,defaultShouldRevalidate:v})))&&_.push(s({key:a,matches:i,match:o},e))})),[y,_]}function me(e,t){let n=e.route.path;return e.pathname!==t.pathname||null!=n&&n.endsWith("*")&&e.params["*"]!==t.params["*"]}function ge(e,t){if(e.route.shouldRevalidate){let n=e.route.shouldRevalidate(t);if("boolean"==typeof n)return n}return t.defaultShouldRevalidate}async function ve(e,t,n){if(!e.lazy)return;let r=await e.lazy();if(!e.lazy)return;let a=n[e.id];d(a,"No route found in manifest");let i={};for(let e in r){let t=void 0!==a[e]&&"hasErrorBoundary"!==e;f(!t,'Route "'+a.id+'" has a static property "'+e+'" defined but its lazy function is also returning a value for this property. The lazy route property "'+e+'" will be ignored.'),t||y.has(e)||(i[e]=r[e])}Object.assign(a,i),Object.assign(a,{hasErrorBoundary:t(s({},a)),lazy:void 0})}async function be(e,t,n,r,a,i,s,o,l,u){let c,f,p;void 0===s&&(s="/"),void 0===o&&(o=!1),void 0===l&&(l=!1);let h=e=>{let r,a=new Promise(((e,t)=>r=t));return p=()=>r(),t.signal.addEventListener("abort",p),Promise.race([e({request:t,params:n.params,context:u}),a])};try{let r=n.route[e];if(n.route.lazy)if(r)f=(await Promise.all([h(r),ve(n.route,i,a)]))[0];else{if(await ve(n.route,i,a),r=n.route[e],!r){if("action"===e)throw Ce(405,{method:t.method,pathname:new URL(t.url).pathname,routeId:n.route.id});return{type:b.data,data:void 0}}f=await h(r)}else d(r,"Could not find the "+e+' to run on the "'+n.route.id+'" route'),f=await h(r);d(void 0!==f,"You defined "+("action"===e?"an action":"a loader")+' for route "'+n.route.id+"\" but didn't return anything from your `"+e+"` function. Please return a value or `null`.")}catch(e){c=b.error,f=e}finally{p&&t.signal.removeEventListener("abort",p)}if(null!=(g=f)&&"number"==typeof g.status&&"string"==typeof g.statusText&&"object"==typeof g.headers&&void 0!==g.body){let e,a=f.status;if(re.has(a)){let e=f.headers.get("Location");if(d(e,"Redirects returned/thrown from loaders/actions must have a Location header"),le.test(e)){if(!o){let n=new URL(t.url),r=e.startsWith("//")?new URL(n.protocol+e):new URL(e),a=null!=M(r.pathname,s);r.origin===n.origin&&a&&(e=r.pathname+r.search+r.hash)}}else{let a=U(e,z(r.slice(0,r.indexOf(n)+1)).map((e=>e.pathnameBase)),new URL(t.url).pathname);if(d(m(a),"Unable to resolve redirect location: "+e),s){let e=a.pathname;a.pathname="/"===e?s:$([s,e])}e=m(a)}if(o)throw f.headers.set("Location",e),f;return{type:b.redirect,status:a,location:e,revalidate:null!==f.headers.get("X-Remix-Revalidate")}}if(l)throw{type:c||b.data,response:f};let i=f.headers.get("Content-Type");return e=i&&/\bapplication\/json\b/.test(i)?await f.json():await f.text(),c===b.error?{type:c,error:new X(a,f.statusText,e),headers:f.headers}:{type:b.data,data:e,statusCode:f.status,headers:f.headers}}var g,v,y;return c===b.error?{type:c,error:f}:f instanceof G?{type:b.deferred,deferredData:f,statusCode:null==(v=f.init)?void 0:v.status,headers:(null==(y=f.init)?void 0:y.headers)&&new Headers(f.init.headers)}:{type:b.data,data:f}}function ye(e,t,n,r){let a=e.createURL(Le(t)).toString(),i={signal:n};if(r&&Ne(r.formMethod)){let{formMethod:e,formEncType:t,formData:n}=r;i.method=e.toUpperCase(),i.body="application/x-www-form-urlencoded"===t?_e(n):n}return new Request(a,i)}function _e(e){let t=new URLSearchParams;for(let[n,r]of e.entries())t.append(n,r instanceof File?r.name:r);return t}function Se(e,t,n,r,a,i,o,l){let{loaderData:u,errors:c}=function(e,t,n,r,a){let i,s={},o=null,l=!1,u={};return n.forEach(((n,c)=>{let f=t[c].route.id;if(d(!Pe(n),"Cannot handle redirect results in processLoaderData"),Te(n)){let t=xe(e,f),a=n.error;r&&(a=Object.values(r)[0],r=void 0),o=o||{},null==o[t.route.id]&&(o[t.route.id]=a),s[f]=void 0,l||(l=!0,i=Z(n.error)?n.error.status:500),n.headers&&(u[f]=n.headers)}else je(n)?(a.set(f,n.deferredData),s[f]=n.deferredData.data):s[f]=n.data,null==n.statusCode||200===n.statusCode||l||(i=n.statusCode),n.headers&&(u[f]=n.headers)})),r&&(o=r,s[Object.keys(r)[0]]=void 0),{loaderData:s,errors:o,statusCode:i||200,loaderHeaders:u}}(t,n,r,a,l);for(let t=0;t<i.length;t++){let{key:n,match:r}=i[t];d(void 0!==o&&void 0!==o[t],"Did not find corresponding fetcher result");let a=o[t];if(Te(a)){let t=xe(e.matches,null==r?void 0:r.route.id);c&&c[t.route.id]||(c=s({},c,{[t.route.id]:a.error})),e.fetchers.delete(n)}else if(Pe(a))d(!1,"Unhandled fetcher revalidation redirect");else if(je(a))d(!1,"Unhandled fetcher deferred data");else{let t={state:"idle",data:a.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0," _hasFetcherDoneAnything ":!0};e.fetchers.set(n,t)}}return{loaderData:u,errors:c}}function we(e,t,n,r){let a=s({},t);for(let i of n){let n=i.route.id;if(t.hasOwnProperty(n)?void 0!==t[n]&&(a[n]=t[n]):void 0!==e[n]&&i.route.loader&&(a[n]=e[n]),r&&r.hasOwnProperty(n))break}return a}function xe(e,t){return(t?e.slice(0,e.findIndex((e=>e.route.id===t))+1):[...e]).reverse().find((e=>!0===e.route.hasErrorBoundary))||e[0]}function Ee(e){let t=e.find((e=>e.index||!e.path||"/"===e.path))||{id:"__shim-error-route__"};return{matches:[{params:{},pathname:"",pathnameBase:"",route:t}],route:t}}function Ce(e,t){let{pathname:n,routeId:r,method:a,type:i}=void 0===t?{}:t,s="Unknown Server Error",o="Unknown @remix-run/router error";return 400===e?(s="Bad Request",a&&n&&r?o="You made a "+a+' request to "'+n+'" but did not provide a `loader` for route "'+r+'", so there is no way to handle the request.':"defer-action"===i&&(o="defer() is not supported in actions")):403===e?(s="Forbidden",o='Route "'+r+'" does not match URL "'+n+'"'):404===e?(s="Not Found",o='No route matches URL "'+n+'"'):405===e&&(s="Method Not Allowed",a&&n&&r?o="You made a "+a.toUpperCase()+' request to "'+n+'" but did not provide an `action` for route "'+r+'", so there is no way to handle the request.':a&&(o='Invalid request method "'+a.toUpperCase()+'"')),new X(e||500,s,new Error(o),!0)}function ke(e){for(let t=e.length-1;t>=0;t--){let n=e[t];if(Pe(n))return n}}function Le(e){return m(s({},"string"==typeof e?g(e):e,{hash:""}))}function je(e){return e.type===b.deferred}function Te(e){return e.type===b.error}function Pe(e){return(e&&e.type)===b.redirect}function Ne(e){return ee.has(e)}async function Ae(e,t,n,r,a,i){for(let s=0;s<n.length;s++){let o=n[s],l=t[s];if(!l)continue;let u=e.find((e=>e.route.id===l.route.id)),c=null!=u&&!me(u,l)&&void 0!==(i&&i[l.route.id]);je(o)&&(a||c)&&await De(o,r,a).then((e=>{e&&(n[s]=e||n[s])}))}}async function De(e,t,n){if(void 0===n&&(n=!1),!await e.deferredData.resolveData(t)){if(n)try{return{type:b.data,data:e.deferredData.unwrappedData}}catch(e){return{type:b.error,error:e}}return{type:b.data,data:e.deferredData.data}}}function Oe(e){return new URLSearchParams(e).getAll("index").some((e=>""===e))}function Re(e,t){let{route:n,pathname:r,params:a}=e;return{id:n.id,pathname:r,params:a,data:t[n.id],handle:n.handle}}function Me(e,t){let n="string"==typeof t?g(t).search:t.search;if(e[e.length-1].route.index&&Oe(n||""))return e[e.length-1];let r=z(e);return r[r.length-1]}Symbol("deferred");"function"==typeof Object.is&&Object.is;const{useState:Ie,useEffect:Fe,useLayoutEffect:ze,useDebugValue:Ue}=i;"undefined"==typeof window||void 0===window.document||window.document.createElement;const $e=i.useSyncExternalStore,Be=a.createContext(null),Ve=a.createContext(null),We=a.createContext(null),He=a.createContext(null),qe=a.createContext(null),Ge=a.createContext({outlet:null,matches:[]}),Qe=a.createContext(null);function Ye(){return Ye=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Ye.apply(this,arguments)}function Ke(e,t){let{relative:n}=void 0===t?{}:t;Xe()||d(!1);let{basename:r,navigator:i}=a.useContext(He),{hash:s,pathname:o,search:l}=st(e,{relative:n}),u=o;return"/"!==r&&(u="/"===o?r:$([r,o])),i.createHref({pathname:u,search:l,hash:s})}function Xe(){return null!=a.useContext(qe)}function Ze(){return Xe()||d(!1),a.useContext(qe).location}function Je(){return a.useContext(qe).navigationType}function et(e){Xe()||d(!1);let{pathname:t}=Ze();return a.useMemo((()=>O(e,t)),[t,e])}function tt(){Xe()||d(!1);let{basename:e,navigator:t}=a.useContext(He),{matches:n}=a.useContext(Ge),{pathname:r}=Ze(),i=JSON.stringify(z(n).map((e=>e.pathnameBase))),s=a.useRef(!1);return a.useEffect((()=>{s.current=!0})),a.useCallback((function(n,a){if(void 0===a&&(a={}),!s.current)return;if("number"==typeof n)return void t.go(n);let o=U(n,JSON.parse(i),r,"path"===a.relative);"/"!==e&&(o.pathname="/"===o.pathname?e:$([e,o.pathname])),(a.replace?t.replace:t.push)(o,a.state,a)}),[e,t,i,r])}const nt=a.createContext(null);function rt(){return a.useContext(nt)}function at(e){let t=a.useContext(Ge).outlet;return t?a.createElement(nt.Provider,{value:e},t):t}function it(){let{matches:e}=a.useContext(Ge),t=e[e.length-1];return t?t.params:{}}function st(e,t){let{relative:n}=void 0===t?{}:t,{matches:r}=a.useContext(Ge),{pathname:i}=Ze(),s=JSON.stringify(z(r).map((e=>e.pathnameBase)));return a.useMemo((()=>U(e,JSON.parse(s),i,"path"===n)),[e,s,i,n])}function ot(e,t){Xe()||d(!1);let{navigator:n}=a.useContext(He),i=a.useContext(Ve),{matches:s}=a.useContext(Ge),o=s[s.length-1],l=o?o.params:{},u=(o&&o.pathname,o?o.pathnameBase:"/");o&&o.route;let c,f=Ze();if(t){var p;let e="string"==typeof t?g(t):t;"/"===u||(null==(p=e.pathname)?void 0:p.startsWith(u))||d(!1),c=e}else c=f;let h=c.pathname||"/",m=S(e,{pathname:"/"===u?h:h.slice(u.length)||"/"}),v=dt(m&&m.map((e=>Object.assign({},e,{params:Object.assign({},l,e.params),pathname:$([u,n.encodeLocation?n.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?u:$([u,n.encodeLocation?n.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),s,i||void 0);return t&&v?a.createElement(qe.Provider,{value:{location:Ye({pathname:"/",search:"",hash:"",state:null,key:"default"},c),navigationType:r.Pop}},v):v}function lt(){let e=xt(),t=Z(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),n=e instanceof Error?e.stack:null,r={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return a.createElement(a.Fragment,null,a.createElement("h2",null,"Unexpected Application Error!"),a.createElement("h3",{style:{fontStyle:"italic"}},t),n?a.createElement("pre",{style:r},n):null,null)}class ut extends a.Component{constructor(e){super(e),this.state={location:e.location,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location?{error:e.error,location:e.location}:{error:e.error||t.error,location:t.location}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return this.state.error?a.createElement(Ge.Provider,{value:this.props.routeContext},a.createElement(Qe.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function ct(e){let{routeContext:t,match:n,children:r}=e,i=a.useContext(Be);return i&&i.static&&i.staticContext&&(n.route.errorElement||n.route.ErrorBoundary)&&(i.staticContext._deepestRenderedBoundaryId=n.route.id),a.createElement(Ge.Provider,{value:t},r)}function dt(e,t,n){if(void 0===t&&(t=[]),null==e){if(null==n||!n.errors)return null;e=n.matches}let r=e,i=null==n?void 0:n.errors;if(null!=i){let e=r.findIndex((e=>e.route.id&&(null==i?void 0:i[e.route.id])));e>=0||d(!1),r=r.slice(0,Math.min(r.length,e+1))}return r.reduceRight(((e,s,o)=>{let l=s.route.id?null==i?void 0:i[s.route.id]:null,u=null;n&&(u=s.route.ErrorBoundary?a.createElement(s.route.ErrorBoundary,null):s.route.errorElement?s.route.errorElement:a.createElement(lt,null));let c=t.concat(r.slice(0,o+1)),d=()=>{let t=e;return l?t=u:s.route.Component?t=a.createElement(s.route.Component,null):s.route.element&&(t=s.route.element),a.createElement(ct,{match:s,routeContext:{outlet:e,matches:c},children:t})};return n&&(s.route.ErrorBoundary||s.route.errorElement||0===o)?a.createElement(ut,{location:n.location,component:u,error:l,children:d(),routeContext:{outlet:null,matches:c}}):d()}),null)}var ft,pt;function ht(e){let t=a.useContext(Be);return t||d(!1),t}function mt(e){let t=a.useContext(Ve);return t||d(!1),t}function gt(e){let t=function(e){let t=a.useContext(Ge);return t||d(!1),t}(),n=t.matches[t.matches.length-1];return n.route.id||d(!1),n.route.id}function vt(){return mt(pt.UseNavigation).navigation}function bt(){let e=ht(ft.UseRevalidator),t=mt(pt.UseRevalidator);return{revalidate:e.router.revalidate,state:t.revalidation}}function yt(){let{matches:e,loaderData:t}=mt(pt.UseMatches);return a.useMemo((()=>e.map((e=>{let{pathname:n,params:r}=e;return{id:e.route.id,pathname:n,params:r,data:t[e.route.id],handle:e.route.handle}}))),[e,t])}function _t(){let e=mt(pt.UseLoaderData),t=gt(pt.UseLoaderData);if(!e.errors||null==e.errors[t])return e.loaderData[t];console.error("You cannot `useLoaderData` in an errorElement (routeId: "+t+")")}function St(e){return mt(pt.UseRouteLoaderData).loaderData[e]}function wt(){let e=mt(pt.UseActionData);return a.useContext(Ge)||d(!1),Object.values((null==e?void 0:e.actionData)||{})[0]}function xt(){var e;let t=a.useContext(Qe),n=mt(pt.UseRouteError),r=gt(pt.UseRouteError);return t||(null==(e=n.errors)?void 0:e[r])}function Et(){let e=a.useContext(We);return null==e?void 0:e._data}function Ct(){let e=a.useContext(We);return null==e?void 0:e._error}!function(e){e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator"}(ft||(ft={})),function(e){e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator"}(pt||(pt={}));let kt=0;function Lt(e){let{router:t}=ht(ft.UseBlocker),n=mt(pt.UseBlocker),[r]=a.useState((()=>String(++kt))),i=a.useCallback((t=>"function"==typeof e?!!e(t):!!e),[e]),s=t.getBlocker(r,i);return a.useEffect((()=>()=>t.deleteBlocker(r)),[t,r]),n.blockers.get(r)||s}function jt(e){let{fallbackElement:t,router:n}=e,r=a.useCallback((()=>n.state),[n]),i=$e(n.subscribe,r,r),s=a.useMemo((()=>({createHref:n.createHref,encodeLocation:n.encodeLocation,go:e=>n.navigate(e),push:(e,t,r)=>n.navigate(e,{state:t,preventScrollReset:null==r?void 0:r.preventScrollReset}),replace:(e,t,r)=>n.navigate(e,{replace:!0,state:t,preventScrollReset:null==r?void 0:r.preventScrollReset})})),[n]),o=n.basename||"/",l=a.useMemo((()=>({router:n,navigator:s,static:!1,basename:o})),[n,s,o]);return a.createElement(a.Fragment,null,a.createElement(Be.Provider,{value:l},a.createElement(Ve.Provider,{value:i},a.createElement(Dt,{basename:n.basename,location:n.state.location,navigationType:n.state.historyAction,navigator:s},n.state.initialized?a.createElement(Ot,null):t))),null)}function Tt(e){let{basename:t,children:n,initialEntries:r,initialIndex:i}=e,s=a.useRef();null==s.current&&(s.current=l({initialEntries:r,initialIndex:i,v5Compat:!0}));let o=s.current,[u,c]=a.useState({action:o.action,location:o.location});return a.useLayoutEffect((()=>o.listen(c)),[o]),a.createElement(Dt,{basename:t,children:n,location:u.location,navigationType:u.action,navigator:o})}function Pt(e){let{to:t,replace:n,state:r,relative:i}=e;Xe()||d(!1);let s=a.useContext(Ve),o=tt();return a.useEffect((()=>{s&&"idle"!==s.navigation.state||o(t,{replace:n,state:r,relative:i})})),null}function Nt(e){return at(e.context)}function At(e){d(!1)}function Dt(e){let{basename:t="/",children:n=null,location:i,navigationType:s=r.Pop,navigator:o,static:l=!1}=e;Xe()&&d(!1);let u=t.replace(/^\/*/,"/"),c=a.useMemo((()=>({basename:u,navigator:o,static:l})),[u,o,l]);"string"==typeof i&&(i=g(i));let{pathname:f="/",search:p="",hash:h="",state:m=null,key:v="default"}=i,b=a.useMemo((()=>{let e=M(f,u);return null==e?null:{location:{pathname:e,search:p,hash:h,state:m,key:v},navigationType:s}}),[u,f,p,h,m,v,s]);return null==b?null:a.createElement(He.Provider,{value:c},a.createElement(qe.Provider,{children:n,value:b}))}function Ot(e){let{children:t,location:n}=e,r=a.useContext(Be);return ot(r&&!t?r.router.routes:Ut(t),n)}function Rt(e){let{children:t,errorElement:n,resolve:r}=e;return a.createElement(Ft,{resolve:r,errorElement:n},a.createElement(zt,null,t))}var Mt;!function(e){e[e.pending=0]="pending",e[e.success=1]="success",e[e.error=2]="error"}(Mt||(Mt={}));const It=new Promise((()=>{}));class Ft extends a.Component{constructor(e){super(e),this.state={error:null}}static getDerivedStateFromError(e){return{error:e}}componentDidCatch(e,t){console.error("<Await> caught the following error during render",e,t)}render(){let{children:e,errorElement:t,resolve:n}=this.props,r=null,i=Mt.pending;if(n instanceof Promise)if(this.state.error){i=Mt.error;let e=this.state.error;r=Promise.reject().catch((()=>{})),Object.defineProperty(r,"_tracked",{get:()=>!0}),Object.defineProperty(r,"_error",{get:()=>e})}else n._tracked?(r=n,i=void 0!==r._error?Mt.error:void 0!==r._data?Mt.success:Mt.pending):(i=Mt.pending,Object.defineProperty(n,"_tracked",{get:()=>!0}),r=n.then((e=>Object.defineProperty(n,"_data",{get:()=>e})),(e=>Object.defineProperty(n,"_error",{get:()=>e}))));else i=Mt.success,r=Promise.resolve(),Object.defineProperty(r,"_tracked",{get:()=>!0}),Object.defineProperty(r,"_data",{get:()=>n});if(i===Mt.error&&r._error instanceof q)throw It;if(i===Mt.error&&!t)throw r._error;if(i===Mt.error)return a.createElement(We.Provider,{value:r,children:t});if(i===Mt.success)return a.createElement(We.Provider,{value:r,children:e});throw r}}function zt(e){let{children:t}=e,n=Et(),r="function"==typeof t?t(n):t;return a.createElement(a.Fragment,null,r)}function Ut(e,t){void 0===t&&(t=[]);let n=[];return a.Children.forEach(e,((e,r)=>{if(!a.isValidElement(e))return;if(e.type===a.Fragment)return void n.push.apply(n,Ut(e.props.children,t));e.type!==At&&d(!1),e.props.index&&e.props.children&&d(!1);let i=[...t,r],s={id:e.props.id||i.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(s.children=Ut(e.props.children,i)),n.push(s)})),n}function $t(e){return dt(e)}function Bt(e){return Boolean(e.ErrorBoundary)||Boolean(e.errorElement)}function Vt(e,t){return fe({basename:null==t?void 0:t.basename,history:l({initialEntries:null==t?void 0:t.initialEntries,initialIndex:null==t?void 0:t.initialIndex}),hydrationData:null==t?void 0:t.hydrationData,routes:e,detectErrorBoundary:Bt}).initialize()}function Wt(){return Wt=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Wt.apply(this,arguments)}function Ht(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}const qt="get",Gt="application/x-www-form-urlencoded";function Qt(e){return null!=e&&"string"==typeof e.tagName}function Yt(e){return void 0===e&&(e=""),new URLSearchParams("string"==typeof e||Array.isArray(e)||e instanceof URLSearchParams?e:Object.keys(e).reduce(((t,n)=>{let r=e[n];return t.concat(Array.isArray(r)?r.map((e=>[n,e])):[[n,r]])}),[]))}const Kt=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset"],Xt=["aria-current","caseSensitive","className","end","style","to","children"],Zt=["reloadDocument","replace","method","action","onSubmit","fetcherKey","routeId","relative","preventScrollReset"];function Jt(e,t){return fe({basename:null==t?void 0:t.basename,history:u({window:null==t?void 0:t.window}),hydrationData:(null==t?void 0:t.hydrationData)||tn(),routes:e,detectErrorBoundary:Bt}).initialize()}function en(e,t){return fe({basename:null==t?void 0:t.basename,history:c({window:null==t?void 0:t.window}),hydrationData:(null==t?void 0:t.hydrationData)||tn(),routes:e,detectErrorBoundary:Bt}).initialize()}function tn(){var e;let t=null==(e=window)?void 0:e.__staticRouterHydrationData;return t&&t.errors&&(t=Wt({},t,{errors:nn(t.errors)})),t}function nn(e){if(!e)return null;let t=Object.entries(e),n={};for(let[e,r]of t)if(r&&"RouteErrorResponse"===r.__type)n[e]=new X(r.status,r.statusText,r.data,!0===r.internal);else if(r&&"Error"===r.__type){let t=new Error(r.message);t.stack="",n[e]=t}else n[e]=r;return n}function rn(e){let{basename:t,children:n,window:r}=e,i=a.useRef();null==i.current&&(i.current=u({window:r,v5Compat:!0}));let s=i.current,[o,l]=a.useState({action:s.action,location:s.location});return a.useLayoutEffect((()=>s.listen(l)),[s]),a.createElement(Dt,{basename:t,children:n,location:o.location,navigationType:o.action,navigator:s})}function an(e){let{basename:t,children:n,window:r}=e,i=a.useRef();null==i.current&&(i.current=c({window:r,v5Compat:!0}));let s=i.current,[o,l]=a.useState({action:s.action,location:s.location});return a.useLayoutEffect((()=>s.listen(l)),[s]),a.createElement(Dt,{basename:t,children:n,location:o.location,navigationType:o.action,navigator:s})}function sn(e){let{basename:t,children:n,history:r}=e;const[i,s]=a.useState({action:r.action,location:r.location});return a.useLayoutEffect((()=>r.listen(s)),[r]),a.createElement(Dt,{basename:t,children:n,location:i.location,navigationType:i.action,navigator:r})}const on="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,ln=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,un=a.forwardRef((function(e,t){let n,{onClick:r,relative:i,reloadDocument:s,replace:o,state:l,target:u,to:c,preventScrollReset:d}=e,f=Ht(e,Kt),{basename:p}=a.useContext(He),h=!1;if("string"==typeof c&&ln.test(c)&&(n=c,on)){let e=new URL(window.location.href),t=c.startsWith("//")?new URL(e.protocol+c):new URL(c),n=M(t.pathname,p);t.origin===e.origin&&null!=n?c=n+t.search+t.hash:h=!0}let m=Ke(c,{relative:i}),g=bn(c,{replace:o,state:l,target:u,preventScrollReset:d,relative:i});return a.createElement("a",Wt({},f,{href:n||m,onClick:h||s?r:function(e){r&&r(e),e.defaultPrevented||g(e)},ref:t,target:u}))})),cn=a.forwardRef((function(e,t){let{"aria-current":n="page",caseSensitive:r=!1,className:i="",end:s=!1,style:o,to:l,children:u}=e,c=Ht(e,Xt),d=st(l,{relative:c.relative}),f=Ze(),p=a.useContext(Ve),{navigator:h}=a.useContext(He),m=h.encodeLocation?h.encodeLocation(d).pathname:d.pathname,g=f.pathname,v=p&&p.navigation&&p.navigation.location?p.navigation.location.pathname:null;r||(g=g.toLowerCase(),v=v?v.toLowerCase():null,m=m.toLowerCase());let b,y=g===m||!s&&g.startsWith(m)&&"/"===g.charAt(m.length),_=null!=v&&(v===m||!s&&v.startsWith(m)&&"/"===v.charAt(m.length)),S=y?n:void 0;b="function"==typeof i?i({isActive:y,isPending:_}):[i,y?"active":null,_?"pending":null].filter(Boolean).join(" ");let w="function"==typeof o?o({isActive:y,isPending:_}):o;return a.createElement(un,Wt({},c,{"aria-current":S,className:b,ref:t,style:w,to:l}),"function"==typeof u?u({isActive:y,isPending:_}):u)})),dn=a.forwardRef(((e,t)=>a.createElement(fn,Wt({},e,{ref:t})))),fn=a.forwardRef(((e,t)=>{let{reloadDocument:n,replace:r,method:i=qt,action:s,onSubmit:o,fetcherKey:l,routeId:u,relative:c,preventScrollReset:d}=e,f=Ht(e,Zt),p=Sn(l,u),h="get"===i.toLowerCase()?"get":"post",m=wn(s,{relative:c});return a.createElement("form",Wt({ref:t,method:h,action:m,onSubmit:n?o:e=>{if(o&&o(e),e.defaultPrevented)return;e.preventDefault();let t=e.nativeEvent.submitter,n=(null==t?void 0:t.getAttribute("formmethod"))||i;p(t||e.currentTarget,{method:n,replace:r,relative:c,preventScrollReset:d})}},f))}));function pn(e){let{getKey:t,storageKey:n}=e;return jn({getKey:t,storageKey:n}),null}var hn,mn;function gn(e){let t=a.useContext(Be);return t||d(!1),t}function vn(e){let t=a.useContext(Ve);return t||d(!1),t}function bn(e,t){let{target:n,replace:r,state:i,preventScrollReset:s,relative:o}=void 0===t?{}:t,l=tt(),u=Ze(),c=st(e,{relative:o});return a.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,n)){t.preventDefault();let n=void 0!==r?r:m(u)===m(c);l(e,{replace:n,state:i,preventScrollReset:s,relative:o})}}),[u,l,c,r,i,n,e,s,o])}function yn(e){let t=a.useRef(Yt(e)),n=a.useRef(!1),r=Ze(),i=a.useMemo((()=>function(e,t){let n=Yt(e);if(t)for(let e of t.keys())n.has(e)||t.getAll(e).forEach((t=>{n.append(e,t)}));return n}(r.search,n.current?null:t.current)),[r.search]),s=tt(),o=a.useCallback(((e,t)=>{const r=Yt("function"==typeof e?e(i):e);n.current=!0,s("?"+r,t)}),[s,i]);return[i,o]}function _n(){return Sn()}function Sn(e,t){let{router:n}=gn(hn.UseSubmitImpl),r=wn();return a.useCallback((function(a,i){if(void 0===i&&(i={}),"undefined"==typeof document)throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.");let{method:s,encType:o,formData:l,url:u}=function(e,t,n){let r,a,i,s;if(Qt(o=e)&&"form"===o.tagName.toLowerCase()){let o=n.submissionTrigger;r=n.method||e.getAttribute("method")||qt,a=n.action||e.getAttribute("action")||t,i=n.encType||e.getAttribute("enctype")||Gt,s=new FormData(e),o&&o.name&&s.append(o.name,o.value)}else if(function(e){return Qt(e)&&"button"===e.tagName.toLowerCase()}(e)||function(e){return Qt(e)&&"input"===e.tagName.toLowerCase()}(e)&&("submit"===e.type||"image"===e.type)){let o=e.form;if(null==o)throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');r=n.method||e.getAttribute("formmethod")||o.getAttribute("method")||qt,a=n.action||e.getAttribute("formaction")||o.getAttribute("action")||t,i=n.encType||e.getAttribute("formenctype")||o.getAttribute("enctype")||Gt,s=new FormData(o),e.name&&s.append(e.name,e.value)}else{if(Qt(e))throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');if(r=n.method||qt,a=n.action||t,i=n.encType||Gt,e instanceof FormData)s=e;else if(s=new FormData,e instanceof URLSearchParams)for(let[t,n]of e)s.append(t,n);else if(null!=e)for(let t of Object.keys(e))s.append(t,e[t])}var o;let{protocol:l,host:u}=window.location;return{url:new URL(a,l+"//"+u),method:r.toLowerCase(),encType:i,formData:s}}(a,r,i),c=u.pathname+u.search,f={replace:i.replace,preventScrollReset:i.preventScrollReset,formData:l,formMethod:s,formEncType:o};e?(null==t&&d(!1),n.fetch(e,t,c,f)):n.navigate(c,f)}),[r,n,e,t])}function wn(e,t){let{relative:n}=void 0===t?{}:t,{basename:r}=a.useContext(He),i=a.useContext(Ge);i||d(!1);let[s]=i.matches.slice(-1),o=Wt({},st(e||".",{relative:n})),l=Ze();if(null==e&&(o.search=l.search,o.hash=l.hash,s.route.index)){let e=new URLSearchParams(o.search);e.delete("index"),o.search=e.toString()?"?"+e.toString():""}return e&&"."!==e||!s.route.index||(o.search=o.search?o.search.replace(/^\?/,"?index&"):"?index"),"/"!==r&&(o.pathname="/"===o.pathname?r:$([r,o.pathname])),m(o)}(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmitImpl="useSubmitImpl",e.UseFetcher="useFetcher"})(hn||(hn={})),function(e){e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(mn||(mn={}));let xn=0;function En(){var e;let{router:t}=gn(hn.UseFetcher),n=a.useContext(Ge);n||d(!1);let r=null==(e=n.matches[n.matches.length-1])?void 0:e.route.id;null==r&&d(!1);let[i]=a.useState((()=>String(++xn))),[s]=a.useState((()=>(r||d(!1),function(e,t){return a.forwardRef(((n,r)=>a.createElement(fn,Wt({},n,{ref:r,fetcherKey:e,routeId:t}))))}(i,r)))),[o]=a.useState((()=>e=>{t||d(!1),r||d(!1),t.fetch(i,r,e)})),l=Sn(i,r),u=t.getFetcher(i),c=a.useMemo((()=>Wt({Form:s,submit:l,load:o},u)),[u,s,l,o]);return a.useEffect((()=>()=>{t?t.deleteFetcher(i):console.warn("No fetcher available to clean up from useFetcher()")}),[t,i]),c}function Cn(){return[...vn(mn.UseFetchers).fetchers.values()]}const kn="react-router-scroll-positions";let Ln={};function jn(e){let{getKey:t,storageKey:n}=void 0===e?{}:e,{router:r}=gn(hn.UseScrollRestoration),{restoreScrollPosition:i,preventScrollReset:s}=vn(mn.UseScrollRestoration),o=Ze(),l=yt(),u=vt();a.useEffect((()=>(window.history.scrollRestoration="manual",()=>{window.history.scrollRestoration="auto"})),[]),function(e,t){let{capture:n}={};a.useEffect((()=>{let t=null!=n?{capture:n}:void 0;return window.addEventListener("pagehide",e,t),()=>{window.removeEventListener("pagehide",e,t)}}),[e,n])}(a.useCallback((()=>{if("idle"===u.state){let e=(t?t(o,l):null)||o.key;Ln[e]=window.scrollY}sessionStorage.setItem(n||kn,JSON.stringify(Ln)),window.history.scrollRestoration="auto"}),[n,t,u.state,o,l])),"undefined"!=typeof document&&(a.useLayoutEffect((()=>{try{let e=sessionStorage.getItem(n||kn);e&&(Ln=JSON.parse(e))}catch(e){}}),[n]),a.useLayoutEffect((()=>{let e=null==r?void 0:r.enableScrollRestoration(Ln,(()=>window.scrollY),t);return()=>e&&e()}),[r,t]),a.useLayoutEffect((()=>{if(!1!==i)if("number"!=typeof i){if(o.hash){let e=document.getElementById(o.hash.slice(1));if(e)return void e.scrollIntoView()}!0!==s&&window.scrollTo(0,0)}else window.scrollTo(0,i)}),[o,i,s]))}function Tn(e,t){let{capture:n}=t||{};a.useEffect((()=>{let t=null!=n?{capture:n}:void 0;return window.addEventListener("beforeunload",e,t),()=>{window.removeEventListener("beforeunload",e,t)}}),[e,n])}function Pn(e){let{when:t,message:n}=e,r=Lt(t);a.useEffect((()=>{"blocked"!==r.state||t||r.reset()}),[r,t]),a.useEffect((()=>{"blocked"===r.state&&(window.confirm(n)?setTimeout(r.proceed,0):r.reset())}),[r,n])}},5251:(e,t,n)=>{"use strict";var r=n(7294),a=Symbol.for("react.element"),i=Symbol.for("react.fragment"),s=Object.prototype.hasOwnProperty,o=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function u(e,t,n){var r,i={},u=null,c=null;for(r in void 0!==n&&(u=""+n),void 0!==t.key&&(u=""+t.key),void 0!==t.ref&&(c=t.ref),t)s.call(t,r)&&!l.hasOwnProperty(r)&&(i[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===i[r]&&(i[r]=t[r]);return{$$typeof:a,type:e,key:u,ref:c,props:i,_owner:o.current}}t.Fragment=i,t.jsx=u,t.jsxs=u},2408:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),i=Symbol.for("react.strict_mode"),s=Symbol.for("react.profiler"),o=Symbol.for("react.provider"),l=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,g={};function v(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}function b(){}function y(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=v.prototype;var _=y.prototype=new b;_.constructor=y,m(_,v.prototype),_.isPureReactComponent=!0;var S=Array.isArray,w=Object.prototype.hasOwnProperty,x={current:null},E={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,r){var a,i={},s=null,o=null;if(null!=t)for(a in void 0!==t.ref&&(o=t.ref),void 0!==t.key&&(s=""+t.key),t)w.call(t,a)&&!E.hasOwnProperty(a)&&(i[a]=t[a]);var l=arguments.length-2;if(1===l)i.children=r;else if(1<l){for(var u=Array(l),c=0;c<l;c++)u[c]=arguments[c+2];i.children=u}if(e&&e.defaultProps)for(a in l=e.defaultProps)void 0===i[a]&&(i[a]=l[a]);return{$$typeof:n,type:e,key:s,ref:o,props:i,_owner:x.current}}function k(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var L=/\/+/g;function j(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function T(e,t,a,i,s){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var l=!1;if(null===e)l=!0;else switch(o){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case n:case r:l=!0}}if(l)return s=s(l=e),e=""===i?"."+j(l,0):i,S(s)?(a="",null!=e&&(a=e.replace(L,"$&/")+"/"),T(s,t,a,"",(function(e){return e}))):null!=s&&(k(s)&&(s=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(s,a+(!s.key||l&&l.key===s.key?"":(""+s.key).replace(L,"$&/")+"/")+e)),t.push(s)),1;if(l=0,i=""===i?".":i+":",S(e))for(var u=0;u<e.length;u++){var c=i+j(o=e[u],u);l+=T(o,t,a,c,s)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(o=e.next()).done;)l+=T(o=o.value,t,a,c=i+j(o,u++),s);else if("object"===o)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return l}function P(e,t,n){if(null==e)return e;var r=[],a=0;return T(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function N(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var A={current:null},D={transition:null},O={ReactCurrentDispatcher:A,ReactCurrentBatchConfig:D,ReactCurrentOwner:x};t.Children={map:P,forEach:function(e,t,n){P(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return P(e,(function(){t++})),t},toArray:function(e){return P(e,(function(e){return e}))||[]},only:function(e){if(!k(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=a,t.Profiler=s,t.PureComponent=y,t.StrictMode=i,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=O,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=m({},e.props),i=e.key,s=e.ref,o=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,o=x.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(u in t)w.call(t,u)&&!E.hasOwnProperty(u)&&(a[u]=void 0===t[u]&&void 0!==l?l[u]:t[u])}var u=arguments.length-2;if(1===u)a.children=r;else if(1<u){l=Array(u);for(var c=0;c<u;c++)l[c]=arguments[c+2];a.children=l}return{$$typeof:n,type:e.type,key:i,ref:s,props:a,_owner:o}},t.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:o,_context:e},e.Consumer=e},t.createElement=C,t.createFactory=function(e){var t=C.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=k,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:N}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=D.transition;D.transition={};try{e()}finally{D.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return A.current.useCallback(e,t)},t.useContext=function(e){return A.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return A.current.useDeferredValue(e)},t.useEffect=function(e,t){return A.current.useEffect(e,t)},t.useId=function(){return A.current.useId()},t.useImperativeHandle=function(e,t,n){return A.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return A.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return A.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return A.current.useMemo(e,t)},t.useReducer=function(e,t,n){return A.current.useReducer(e,t,n)},t.useRef=function(e){return A.current.useRef(e)},t.useState=function(e){return A.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return A.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return A.current.useTransition()},t.version="18.2.0"},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},5893:(e,t,n)=>{"use strict";e.exports=n(5251)},3894:(e,t,n)=>{"use strict";function r(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(a){return"function"==typeof a?a(n,r,e):t(a)}}}}n.r(t);var a=r();a.withExtraArgument=r,t.default=a},4791:(e,t,n)=>{"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function a(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==r(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var a=n.call(e,"string");if("object"!==r(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===r(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}n.r(t),n.d(t,{__DO_NOT_USE__ActionTypes:()=>c,applyMiddleware:()=>v,bindActionCreators:()=>m,combineReducers:()=>p,compose:()=>g,createStore:()=>d,legacy_createStore:()=>f});var l="function"==typeof Symbol&&Symbol.observable||"@@observable",u=function(){return Math.random().toString(36).substring(7).split("").join(".")},c={INIT:"@@redux/INIT"+u(),REPLACE:"@@redux/REPLACE"+u(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+u()}};function d(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error(o(0));if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error(o(1));return n(d)(e,t)}if("function"!=typeof e)throw new Error(o(2));var a=e,i=t,s=[],u=s,f=!1;function p(){u===s&&(u=s.slice())}function h(){if(f)throw new Error(o(3));return i}function m(e){if("function"!=typeof e)throw new Error(o(4));if(f)throw new Error(o(5));var t=!0;return p(),u.push(e),function(){if(t){if(f)throw new Error(o(6));t=!1,p();var n=u.indexOf(e);u.splice(n,1),s=null}}}function g(e){if(!function(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}(e))throw new Error(o(7));if(void 0===e.type)throw new Error(o(8));if(f)throw new Error(o(9));try{f=!0,i=a(i,e)}finally{f=!1}for(var t=s=u,n=0;n<t.length;n++)(0,t[n])();return e}return g({type:c.INIT}),(r={dispatch:g,subscribe:m,getState:h,replaceReducer:function(e){if("function"!=typeof e)throw new Error(o(10));a=e,g({type:c.REPLACE})}})[l]=function(){var e,t=m;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(o(11));function n(){e.next&&e.next(h())}return n(),{unsubscribe:t(n)}}})[l]=function(){return this},e},r}var f=d;function p(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var a=t[r];"function"==typeof e[a]&&(n[a]=e[a])}var i,s=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:c.INIT}))throw new Error(o(12));if(void 0===n(void 0,{type:c.PROBE_UNKNOWN_ACTION()}))throw new Error(o(13))}))}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,a={},l=0;l<s.length;l++){var u=s[l],c=n[u],d=e[u],f=c(d,t);if(void 0===f)throw t&&t.type,new Error(o(14));a[u]=f,r=r||f!==d}return(r=r||s.length!==Object.keys(e).length)?a:e}}function h(e,t){return function(){return t(e.apply(this,arguments))}}function m(e,t){if("function"==typeof e)return h(e,t);if("object"!=typeof e||null===e)throw new Error(o(16));var n={};for(var r in e){var a=e[r];"function"==typeof a&&(n[r]=h(a,t))}return n}function g(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function v(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error(o(15))},a={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map((function(e){return e(a)}));return r=g.apply(void 0,i)(n.dispatch),s(s({},n),{},{dispatch:r})}}}},53:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<i(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,s=a>>>1;r<s;){var o=2*(r+1)-1,l=e[o],u=o+1,c=e[u];if(0>i(l,n))u<a&&0>i(c,l)?(e[r]=c,e[u]=n,r=u):(e[r]=l,e[o]=n,r=o);else{if(!(u<a&&0>i(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}function i(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var s=performance;t.unstable_now=function(){return s.now()}}else{var o=Date,l=o.now();t.unstable_now=function(){return o.now()-l}}var u=[],c=[],d=1,f=null,p=3,h=!1,m=!1,g=!1,v="function"==typeof setTimeout?setTimeout:null,b="function"==typeof clearTimeout?clearTimeout:null,y="undefined"!=typeof setImmediate?setImmediate:null;function _(e){for(var t=r(c);null!==t;){if(null===t.callback)a(c);else{if(!(t.startTime<=e))break;a(c),t.sortIndex=t.expirationTime,n(u,t)}t=r(c)}}function S(e){if(g=!1,_(e),!m)if(null!==r(u))m=!0,D(w);else{var t=r(c);null!==t&&O(S,t.startTime-e)}}function w(e,n){m=!1,g&&(g=!1,b(k),k=-1),h=!0;var i=p;try{for(_(n),f=r(u);null!==f&&(!(f.expirationTime>n)||e&&!T());){var s=f.callback;if("function"==typeof s){f.callback=null,p=f.priorityLevel;var o=s(f.expirationTime<=n);n=t.unstable_now(),"function"==typeof o?f.callback=o:f===r(u)&&a(u),_(n)}else a(u);f=r(u)}if(null!==f)var l=!0;else{var d=r(c);null!==d&&O(S,d.startTime-n),l=!1}return l}finally{f=null,p=i,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var x,E=!1,C=null,k=-1,L=5,j=-1;function T(){return!(t.unstable_now()-j<L)}function P(){if(null!==C){var e=t.unstable_now();j=e;var n=!0;try{n=C(!0,e)}finally{n?x():(E=!1,C=null)}}else E=!1}if("function"==typeof y)x=function(){y(P)};else if("undefined"!=typeof MessageChannel){var N=new MessageChannel,A=N.port2;N.port1.onmessage=P,x=function(){A.postMessage(null)}}else x=function(){v(P,0)};function D(e){C=e,E||(E=!0,x())}function O(e,n){k=v((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,D(w))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):L=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(u)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,a,i){var s=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?s+i:s,e){case 1:var o=-1;break;case 2:o=250;break;case 5:o=1073741823;break;case 4:o=1e4;break;default:o=5e3}return e={id:d++,callback:a,priorityLevel:e,startTime:i,expirationTime:o=i+o,sortIndex:-1},i>s?(e.sortIndex=i,n(c,e),null===r(u)&&e===r(c)&&(g?(b(k),k=-1):g=!0,O(S,i-s))):(e.sortIndex=o,n(u,e),m||h||(m=!0,D(w))),e},t.unstable_shouldYield=T,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},3840:(e,t,n)=>{"use strict";e.exports=n(53)},8957:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(5893),l=n(9818),u=n(7294),c=s(n(8840));n(2661);const d=n(4791),f=n(6113),p=n(2387),h=n(8179),m=n(5707),g=s(n(4233)),v=(0,u.lazy)((()=>Promise.resolve().then((()=>i(n(4408)))))),b=(0,u.lazy)((()=>Promise.resolve().then((()=>i(n(6393)))))),y=(0,u.lazy)((()=>Promise.resolve().then((()=>i(n(1272)))))),_=(0,u.lazy)((()=>Promise.resolve().then((()=>i(n(5431)))))),S=(0,u.lazy)((()=>Promise.resolve().then((()=>i(n(9084)))))),w=(0,u.lazy)((()=>Promise.resolve().then((()=>i(n(4946)))))),x=(0,u.lazy)((()=>Promise.resolve().then((()=>i(n(47)))))),E=(0,u.lazy)((()=>Promise.resolve().then((()=>i(n(2423)))))),C=(0,u.lazy)((()=>Promise.resolve().then((()=>i(n(339)))))),k=(0,u.lazy)((()=>Promise.resolve().then((()=>i(n(3067)))))),L=(0,u.lazy)((()=>Promise.resolve().then((()=>i(n(8033)))))),j=(0,u.lazy)((()=>Promise.resolve().then((()=>i(n(6512)))))),T=(0,u.lazy)((()=>Promise.resolve().then((()=>i(n(4770)))))),P=(0,u.lazy)((()=>Promise.resolve().then((()=>i(n(5339)))))),N={loadCart:m.loadCart},A={loadColors:h.loadColors},D={loadFibers:p.loadFibers};t.default=(0,f.connect)((e=>({lang:e.base.lang,cartLoad:e.cart.dataLoading,colorsLoad:e.colors.dataLoading,fibersLoad:e.fibers.dataLoading})),(e=>({setState:{cart:(0,d.bindActionCreators)(N,e),colors:(0,d.bindActionCreators)(A,e),fiber:(0,d.bindActionCreators)(D,e)}})))((({lang:e,cartLoad:t,colorsLoad:n,setState:r,fibersLoad:a})=>("idle"===t.status&&r.cart.loadCart(),"idle"===n.status&&r.colors.loadColors(),"idle"===a.status&&r.fiber.loadFibers(),(0,o.jsxs)(l.HashRouter,{children:[(0,o.jsx)(u.Suspense,{fallback:(0,o.jsx)(c.default,{}),children:(0,o.jsx)(v,{})}),(0,o.jsx)(u.Suspense,{fallback:(0,o.jsx)(c.default,{}),children:(0,o.jsx)(b,{})}),(0,o.jsx)(u.Suspense,{fallback:(0,o.jsx)(c.default,{}),children:(0,o.jsx)(_,{})}),(0,o.jsx)(u.Suspense,{fallback:(0,o.jsx)(c.default,{}),children:(0,o.jsx)(y,{})}),(0,o.jsx)(u.Suspense,{fallback:(0,o.jsx)(c.default,{}),children:(0,o.jsx)(P,{lang:e})}),(0,o.jsxs)(l.Routes,{children:[(0,o.jsx)(l.Route,{index:!0,path:"/",element:(0,o.jsx)(u.Suspense,{fallback:(0,o.jsx)(c.default,{}),children:(0,o.jsx)(w,{})})}),(0,o.jsxs)(l.Route,{path:"/fibers",children:[(0,o.jsx)(l.Route,{index:!0,element:(0,o.jsx)(u.Suspense,{fallback:(0,o.jsx)(c.default,{}),children:(0,o.jsx)(x,{})})}),(0,o.jsx)(l.Route,{path:"compare",element:(0,o.jsx)(u.Suspense,{fallback:(0,o.jsx)(c.default,{}),children:(0,o.jsx)(T,{})})}),(0,o.jsx)(l.Route,{path:":fiberId",element:(0,o.jsx)(u.Suspense,{fallback:(0,o.jsx)(c.default,{}),children:(0,o.jsx)(E,{})})})]}),(0,o.jsx)(l.Route,{path:"/order",element:(0,o.jsx)(u.Suspense,{fallback:(0,o.jsx)(c.default,{}),children:(0,o.jsx)(C,{})})}),(0,o.jsxs)(l.Route,{path:"/catalog",children:[(0,o.jsx)(l.Route,{index:!0,element:(0,o.jsx)(u.Suspense,{fallback:(0,o.jsx)(c.default,{}),children:(0,o.jsx)(k,{})})}),(0,o.jsx)(l.Route,{path:":productId",element:(0,o.jsx)(u.Suspense,{fallback:(0,o.jsx)(c.default,{}),children:(0,o.jsx)(L,{})})})]}),(0,o.jsx)(l.Route,{path:"news/:newsId",element:(0,o.jsx)(u.Suspense,{fallback:(0,o.jsx)(c.default,{}),children:(0,o.jsx)(j,{})})}),(0,o.jsx)(l.Route,{path:"/*",element:(0,o.jsx)(u.Suspense,{fallback:(0,o.jsx)(c.default,{}),children:(0,o.jsx)(g.default,{lang:e})})})]}),(0,o.jsx)(S,{})]}))))},5375:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.propertiesValues=t.propertiesList=void 0,t.propertiesList=["strength","stiffnes","durability","resistantImpact","minTemp","maxTemp","thermalExpansion","density","flexible","elastic","soft","composite","resistantUV","resistantWater","dissolvable","resistantHeat","resistantChemically","resistantFatigue","cutting","grinding","price"],t.propertiesValues={strength:{name:{en:"Strength",ru:"Прочность"},tip:{en:"The maximum stress that a material can withstand without breaking.",ru:"Максимальная нагрузка, которую материал может выдержать без разрушения."},unit:{en:"MPa",ru:"Мпа"}},stiffnes:{name:{en:"Stiffnes",ru:"SПрочность"},tip:{en:"The maximum stress that a material can withstand without breaking.",ru:"Максимальная нагрузка, которую материал может выдержать без разрушения."},unit:{en:"",ru:""}},durability:{name:{en:"Durability",ru:"DПрочность"},tip:{en:"The maximum stress that a material can withstand without breaking.",ru:"Максимальная нагрузка, которую материал может выдержать без разрушения."},unit:{en:"",ru:""}},minTemp:{name:{en:"Min usage temp",ru:"mПрочность"},tip:{en:"The maximum stress that a material can withstand without breaking.",ru:"Максимальная нагрузка, которую материал может выдержать без разрушения."},unit:{en:"°C",ru:"°C"}},maxTemp:{name:{en:"Max usage temp",ru:"Прочность"},tip:{en:"The maximum stress that a material can withstand without breaking.",ru:"Максимальная нагрузка, которую материал может выдержать без разрушения."},unit:{en:"°C",ru:"°C"}},thermalExpansion:{name:{en:"Thermal expansion",ru:"svПрочность"},tip:{en:"The maximum stress that a material can withstand without breaking.",ru:"Максимальная нагрузка, которую материал может выдержать без разрушения."},unit:{en:"µm/m-°C",ru:"µm/m-°C"}},density:{name:{en:"Density",ru:"Прочность"},tip:{en:"The maximum stress that a material can withstand without breaking.",ru:"Максимальная нагрузка, которую материал может выдержать без разрушения."},unit:{en:"g/cm3",ru:"г/см3"}},price:{name:{en:"Price",ru:"Цена"},tip:{en:"The maximum stress that a material can withstand without breaking.",ru:"Максимальная нагрузка, которую материал может выдержать без разрушения."},unit:{en:"rub/gr",ru:"руб/гр"}},flexible:{name:{en:"Flexible",ru:"Прочность"},tip:{en:"The maximum stress that a material can withstand without breaking.",ru:"Максимальная нагрузка, которую материал может выдержать без разрушения."},unit:{en:"",ru:""}},elastic:{name:{en:"Elastic",ru:"Прочность"},tip:{en:"The maximum stress that a material can withstand without breaking.",ru:"Максимальная нагрузка, которую материал может выдержать без разрушения."},unit:{en:"",ru:""}},resistantImpact:{name:{en:"Impact resistant",ru:"Прочность"},tip:{en:"The maximum stress that a material can withstand without breaking.",ru:"Максимальная нагрузка, которую материал может выдержать без разрушения."},unit:{en:"",ru:""}},soft:{name:{en:"Soft",ru:"Прочность"},tip:{en:"The maximum stress that a material can withstand without breaking.",ru:"Максимальная нагрузка, которую материал может выдержать без разрушения."},unit:{en:"",ru:""}},composite:{name:{en:"Composite",ru:"Прочность"},tip:{en:"The maximum stress that a material can withstand without breaking.",ru:"Максимальная нагрузка, которую материал может выдержать без разрушения."},unit:{en:"",ru:""}},resistantUV:{name:{en:"UV resistant",ru:"Прочность"},tip:{en:"The maximum stress that a material can withstand without breaking.",ru:"Максимальная нагрузка, которую материал может выдержать без разрушения."},unit:{en:"",ru:""}},resistantWater:{name:{en:"Water resistant",ru:"Прочность"},tip:{en:"The maximum stress that a material can withstand without breaking.",ru:"Максимальная нагрузка, которую материал может выдержать без разрушения."},unit:{en:"",ru:""}},dissolvable:{name:{en:"Dissolvable",ru:"Прочность"},tip:{en:"The maximum stress that a material can withstand without breaking.",ru:"Максимальная нагрузка, которую материал может выдержать без разрушения."},unit:{en:"",ru:""}},resistantHeat:{name:{en:"Heat resistant",ru:"Прочность"},tip:{en:"The maximum stress that a material can withstand without breaking.",ru:"Максимальная нагрузка, которую материал может выдержать без разрушения."},unit:{en:"°C",ru:"°C"}},resistantChemically:{name:{en:"Chemically resistant",ru:"Прочность"},tip:{en:"The maximum stress that a material can withstand without breaking.",ru:"Максимальная нагрузка, которую материал может выдержать без разрушения."},unit:{en:"",ru:""}},resistantFatigue:{name:{en:"Fatigue resistant",ru:"Прочность"},tip:{en:"The maximum stress that a material can withstand without breaking.",ru:"Максимальная нагрузка, которую материал может выдержать без разрушения."},unit:{en:"",ru:""}},cutting:{name:{en:"Cutting",ru:"Прочность"},tip:{en:"The maximum stress that a material can withstand without breaking.",ru:"Максимальная нагрузка, которую материал может выдержать без разрушения."},unit:{en:"",ru:""}},grinding:{name:{en:"Grinding",ru:"Прочность"},tip:{en:"The maximum stress that a material can withstand without breaking.",ru:"Максимальная нагрузка, которую материал может выдержать без разрушения."},unit:{en:"",ru:""}}}},7123:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5893),i=n(7294),s=r(n(8840));t.default=({src:e,alt:t,id:n})=>{const[r,o]=(0,i.useState)(!1),l=(0,i.useRef)(null);return(0,a.jsxs)(a.Fragment,{children:[r||(0,a.jsx)(s.default,{}),(0,a.jsx)("img",{ref:l,src:e,alt:t,onLoad:()=>{o(!0)},style:{display:r?"block":"none"},id:n})]})}},5202:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ratingNumberToText=void 0,t.ratingNumberToText=(e,t)=>{let n={};switch(t){case 10:n={1:{en:"none",ru:"отсутствует"},2:{en:"extremely low",ru:"крайне низкая"},3:{en:"low",ru:"низкая"},4:{en:"poor",ru:"посредственная"},5:{en:"below medium",ru:"ниже средней"},6:{en:"medium",ru:"средняя"},7:{en:"upper medium",ru:"хорошая"},8:{en:"hign",ru:"высокая"},9:{en:"very high",ru:"очень высокая"},10:{en:"exellent",ru:"отличная"}};break;case 3:n={1:{en:"none",ru:"отсутствует"},2:{en:"average",ru:"средняя"},3:{en:"high",ru:"высокая"}}}return n[Number(e)]}},311:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5893);n(9692);const i=n(7294),s=r(n(1374)),o=r(n(9387)),l=(0,i.forwardRef)((({lang:e,saveFiles:t},n)=>{(0,i.useImperativeHandle)(n,(()=>({clearAttachedFiles(){f([])}})));const r=(0,i.useRef)(null),l=(0,i.useRef)(null),u=(0,i.useRef)(null);let c=0;const[d,f]=(0,i.useState)([]),p=e=>{e.preventDefault(),e.stopPropagation()},h=e=>{p(e),c++,r.current?.classList.add("active")},m=e=>{p(e),r.current?.classList.add("active")},g=e=>{p(e),c--,0===c&&r.current?.classList.remove("active")},v=e=>{p(e),r.current?.classList.remove("active"),f((t=>[...t,...e.dataTransfer?.files]))};return(0,i.useEffect)((()=>{if(r.current)return r.current.addEventListener("dragenter",h,!1),r.current.addEventListener("dragover",m,!1),r.current.addEventListener("dragleave",g,!1),r.current.addEventListener("drop",v,!1),()=>{r.current?.removeEventListener("dragenter",h,!1),r.current?.removeEventListener("dragover",m,!1),r.current?.removeEventListener("dragleave",g,!1),r.current?.removeEventListener("drop",v,!1)}})),(0,i.useEffect)((()=>{(e=>{u.current.innerHTML="";const t=["jpg","jpeg","bmp","svg","png","tiff","webp"];e.reduce((async(e,n)=>(await e,new Promise((r=>{e.then((()=>{const e=new FileReader;e.readAsDataURL(n),e.onloadend=()=>{let a=document.createElement("div"),i=document.createElement("div"),o=document.createElement("span"),l=document.createElement("img");l.src=t.includes(n.name.split(".").pop()||"")?e.result:s.default,o.innerText=n.name,u.current?.appendChild(a),i.appendChild(l),a.appendChild(i),a.appendChild(o),r(`File ${n.name} added`)}}))})))),Promise.resolve("Files array is empty"))})(d),t(d)}),[d]),(0,a.jsxs)("div",{className:"drop-area",ref:r,children:[(0,a.jsx)("svg",{width:"16",height:"25",viewBox:"0 0 16 25",xmlns:"http://www.w3.org/2000/svg",children:(0,a.jsx)("path",{d:"M7.31719 23.7322C7.71856 24.1116 8.35148 24.0937 8.73084 23.6924L14.9129 17.1516C15.2923 16.7502 15.2745 16.1173 14.8731 15.7379C14.4717 15.3586 13.8388 15.3764 13.4594 15.7778L7.96424 21.5918L2.15022 16.0966C1.74885 15.7172 1.11593 15.7351 0.73657 16.1365C0.357206 16.5378 0.375048 17.1707 0.776422 17.5501L7.31719 23.7322ZM6.36655 0.404461L7.00449 23.0336L9.00369 22.9773L8.36576 0.348102L6.36655 0.404461Z"})}),(0,a.jsxs)("div",{className:"link__container",children:[(0,a.jsx)("label",{htmlFor:"files",children:"en"===e?"Add files":"Выберите файлы"}),(0,a.jsx)("span",{children:"en"===e?" or drag it here":"для добавления или перетащите их сюда"})]}),(0,a.jsx)("input",{id:"files",type:"file",multiple:!0,onChange:()=>{r.current?.classList.remove("active"),f((e=>[...e,...l.current?.files]))},ref:l}),(0,a.jsx)("div",{className:"preview-gallery",ref:u}),(0,a.jsx)("div",{className:"clear-files",children:(0,a.jsx)(o.default,{remove:e=>{f([])},idInstance:"cartCleaner",lang:e})})]})}));t.default=l},2757:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5893);n(9721);const i=n(7294),s=n(5707),o=n(4791),l=n(6113),u=r(n(4915)),c=r(n(7703)),d=r(n(1611));var f=n(6104);const p={addItem:s.addItem,saveCart:s.saveCart};t.default=(0,l.connect)((e=>({cart:e.cart,lang:e.base.lang})),(e=>({setState:{cart:(0,o.bindActionCreators)(p,e)}})))((({product:e,type:t,fiber:n,color:r,lang:s,cart:o,setState:l})=>{const[p,h]=(0,i.useState)(1),[m,g]=(0,i.useState)({visible:!1}),[v,b]=(0,i.useState)({header:"",status:"",text:[]}),[y,_]=(0,i.useState)({amount:1}),S=()=>{g({visible:!1})};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)("div",{className:"cart-adder",children:[(0,a.jsxs)("span",{children:["en"===s?"Amount":"Количество",": "]}),(0,a.jsx)("div",{className:"amount-changer__container",children:(0,a.jsx)(d.default,{idInstance:e.id,initialAmount:p,reset:y,lang:s,onChange:(e,t)=>{h(t)}})}),(0,a.jsx)("button",{className:"button_news",title:"Add to cart",onClick:()=>{const a=[];if(!r&&a.push("en"===s?"Please choose the color":"Пожалуйста, выберите цвет"),!n&&a.push("en"===s?"Please choose the fiber":"Пожалуйста, выберите материал"),!t&&a.push("en"===s?"Please choose the type":"Пожалуйста, выберите версию"),!p&&a.push("en"===s?"Please set the amount":"Пожалуйста, укажите количество"),r&&n&&t&&p){const a={product:e,fiber:n,color:r,amount:p,type:t,id:f()};l.cart.addItem(a),l.cart.saveCart([...o.items,a]),_({amount:1});const i=o.items.reduce(((e,t)=>e+t.amount),0)+p;b({status:"success",header:"en"===s?"Added":"Добавлено",text:"en"===s?["This item has been added to your сart.",`You now have ${i} item${i>1?"s":""} in your сart`]:["Этот товар был успешно добавлен в Вашу корзину.",`Сейчас у Вас товаров в корзине: ${i}`]})}else b({status:"error",header:"en"===s?"Error":"Ошибка",text:a});g({visible:!0})},children:"en"===s?"Add to cart":"Добавить в корзину"})]}),(0,a.jsx)(u.default,{visible:m.visible,close:S,escExit:!0,children:(0,a.jsx)(c.default,{status:v.status,header:v.header,text:v.text,buttonText:"en"===s?"Close":"Закрыть",buttonAction:S})})]})}))},1611:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(5893);n(9599);const a=n(7294);t.default=({idInstance:e,onChange:t,initialAmount:n,lang:i,reset:s})=>{const[o,l]=(0,a.useState)(n),u=n=>{const r=n>=0?n:0;l(r),t(e,r)};return(0,a.useEffect)((()=>{s&&(l(s.amount),t(e,s.amount))}),[s]),(0,r.jsxs)("div",{className:"amount__changer",children:[(0,r.jsx)("button",{className:o<=1?"disabled":"","aria-label":"Decrease amount",onClick:e=>{e.preventDefault(),o>1&&u(o>2?o-1:1)},children:"–"}),(0,r.jsx)("input",{onBlur:n=>(n=>{const r=n>0?n:1;l(r),t(e,r)})(Number(n.target.value)),type:"text",value:o,onChange:e=>{e.preventDefault(),u(Number(e.target.value))},"aria-label":"en"===i?"Enter amount":"Введите количество"}),(0,r.jsx)("button",{"aria-label":"Increase amount",onClick:e=>{e.preventDefault(),u(o+1)},children:"+"})]})}},3328:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5893);n(6236);const i=r(n(8944)),s=r(n(3007)),o=r(n(5637)),l=r(n(3952)),u=r(n(8167)),c=r(n(2677)),d=n(7294),f=r(n(7123)),p=[i.default,s.default,o.default,l.default,u.default,c.default],h={imageContainerWidth:600,imageWidth:0,imageRatio:1.3,parallaxRatio:0,innerContainerWidth:0,carouselCenterDx:0,paddings:0,initialRibbonPos:0,ribbonDx:0,deltaSize:0,carouselWidth:0,gap:80,speed:6};t.default=()=>{const e=(0,d.useRef)(null),t=(0,d.useRef)(null),[n,r]=(0,d.useState)(0),[i,s]=(0,d.useState)([...p]),[o,l]=(0,d.useState)({...h}),[u,c]=(0,d.useState)(0),[m,g]=(0,d.useState)(!0),[v,b]=(0,d.useState)(1),y=e=>{},_=e=>{},S=e=>{1===e.buttons&&b(0)};return(0,d.useEffect)((()=>{if(!e.current)return;const t=e.current.clientWidth;if(l((e=>({...e,imageContainerWidth:t/2,gap:t/15}))),m)return void g(!1);const n=o.imageContainerWidth,a=Math.ceil(e.current.offsetWidth/o.imageContainerWidth);s((e=>[...e.slice(-a).reverse(),...e,...e.slice(0,a)]));const i=-o.imageContainerWidth*a,u=a*o.imageContainerWidth,d=o.imageContainerWidth*o.imageRatio*.5,f=o.imageContainerWidth*(o.imageRatio-1)/(e.current.offsetWidth-o.imageContainerWidth),h=o.imageContainerWidth*o.imageRatio;l((t=>({...t,innerContainerWidth:n,initialRibbonPos:i,carouselCenterDx:u,deltaSize:d,carouselWidth:e.current.offsetWidth,parallaxRatio:f,imageWidth:h}))),r(i);const v=-o.speed*o.imageContainerWidth/1e4,b=setInterval((()=>{return e=v,void c((t=>{let n=t+e;return n<-p.length*o.imageContainerWidth&&(n+=p.length*o.imageContainerWidth),n>0&&(n-=p.length*o.imageContainerWidth),n}));var e}),1);return e.current.addEventListener("mousedown",y),e.current.addEventListener("mouseup",_),e.current.addEventListener("mouseleave",_),e.current.addEventListener("mousemove",S),()=>{clearInterval(b),e.current?.removeEventListener("click",y)}}),[m]),(0,a.jsx)("div",{className:"carouselmax",ref:e,children:(0,a.jsx)("div",{className:"ribbon",ref:t,style:{left:`${n+u}px`},children:i.map(((e,t)=>{let n=o.parallaxRatio*(o.carouselCenterDx-o.imageContainerWidth*t-u);return(0,a.jsx)("div",{className:"img-wrapper",style:{width:`${o.imageContainerWidth}px`,paddingLeft:o.paddings,paddingRight:o.paddings},children:(0,a.jsx)("div",{className:"img__outer-container",style:{width:o.imageContainerWidth-o.gap+"px"},children:(0,a.jsx)("div",{className:"img__inner-container",style:{width:`${o.imageWidth}px`,left:`${n}px`},children:(0,a.jsx)(f.default,{src:e,alt:""})})})},t)}))})})}},601:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5893),i=n(4791),s=n(6113);n(5549);const o=n(5707),l=n(7294),u=n(2387),c=n(8179),d=n(9818),f=r(n(9387)),p=n(1043),h=r(n(1611)),m=r(n(7947)),g=r(n(7123)),v=r(n(4915)),b=r(n(4378)),y={changeItem:o.changeItem,saveCart:o.saveCart,removeItem:o.removeItem},_={loadColors:c.loadColors},S={loadFibers:u.loadFibers},w={setProduct:p.setProduct,setLoadDataStatusProduct:p.setLoadDataStatusProduct};t.default=(0,s.connect)((e=>({cart:e.cart,lang:e.base.lang,product:e.product,colors:e.colors,fibers:e.fibers})),(e=>({setState:{cart:(0,i.bindActionCreators)(y,e),colors:(0,i.bindActionCreators)(_,e),fibers:(0,i.bindActionCreators)(S,e),product:(0,i.bindActionCreators)(w,e)}})))((({lang:e,cart:t,colors:n,fibers:r,setState:i})=>{const[s,o]=(0,l.useState)(!1),[u,c]=(0,l.useState)({visible:!1}),[p,y]=(0,l.useState)({descr:"",path:""});(0,l.useEffect)((()=>{"loading"!==t.dataLoading.status&&i.cart.saveCart(t.items)}),[t.items]);const _=e=>{i.cart.removeItem(e)};(0,l.useEffect)((()=>{"success"===n.dataLoading.status&&"success"===r.dataLoading.status&&"success"===t.dataLoading.status&&o(!0)}),[n.dataLoading.status,r.dataLoading.status,t.dataLoading.status]);const S=(e,t)=>{i.cart.changeItem({...e,amount:t})};return(0,a.jsxs)("div",{className:"cart-content",children:[s?t.items.length>0?(0,a.jsx)(a.Fragment,{children:t.items.map(((t,s)=>{const o=r.fibersList.find((e=>e.id===t.fiber))?.short.name[e],l=n.colors.find((e=>e.id===t.color));return(0,a.jsxs)("div",{className:"cart__item",children:[(0,a.jsx)(d.NavLink,{className:"item__product-link_img",to:`../catalog/${t.product.id}`,onClick:()=>{return e=t.product,i.product.setLoadDataStatusProduct({status:"success",message:""}),void i.product.setProduct(e);var e},"aria-label":"en"===e?"Go to product":"Перейти к товару",children:(0,a.jsx)("div",{className:"img__container",children:(0,a.jsx)(g.default,{src:t.product.imgs[0].url,alt:t.product.imgs[0].name[e]})})}),(0,a.jsxs)("div",{className:"item-descr__container",children:[(0,a.jsx)("div",{className:"item__block",children:(0,a.jsx)("span",{"aria-label":"en"===e?"Go to product page":"Перейти на страницу продукта",children:t.product.name[e]})}),t.type?(0,a.jsxs)("div",{className:"item__block",children:[(0,a.jsxs)("span",{children:["en"===e?"Type":"Модификация",":"]}),(0,a.jsx)("span",{className:"fiber",children:t.type[e]})]}):null,(0,a.jsxs)("div",{className:"item__block",children:[(0,a.jsxs)("span",{children:["en"===e?"Fiber":"Материал",":"]}),(0,a.jsx)("span",{className:"fiber",children:o})]}),(0,a.jsxs)("div",{className:"item__block",children:[(0,a.jsxs)("span",{children:["en"===e?"Color":"Цвет",":"]}),(0,a.jsxs)("div",{className:"colors__container",onClick:t=>((t,n)=>{n&&(t.stopPropagation(),y({descr:n.name[e],path:n.url}),c({visible:!0}))})(t,l),children:[(0,a.jsx)("div",{className:"color__container",children:(0,a.jsx)("img",{src:l?.url,alt:l?.name[e]})}),(0,a.jsxs)("span",{className:"color__name",children:["(",l?.name[e],")"]})]})]})]}),(0,a.jsxs)("div",{className:"item__amount-delete",children:[(0,a.jsx)("div",{className:"delete__container",children:(0,a.jsx)("div",{className:"delete__wrapper",children:(0,a.jsx)(f.default,{remove:_,idInstance:t,lang:e})})}),(0,a.jsx)("div",{className:"amount__container",children:(0,a.jsx)(h.default,{idInstance:t,initialAmount:t.amount,lang:e,onChange:S})})]})]},t.id)}))}):(0,a.jsx)("h3",{className:"cart_empty__text",children:"en"===e?"Your cart is empty":"Ваша корзина пуста"}):(0,a.jsx)(m.default,{}),(0,a.jsx)(v.default,{visible:u.visible,close:()=>{c({visible:!1})},escExit:!0,children:(0,a.jsx)(b.default,{props:{path:p.path,descr:p.descr}})})]})}))},3226:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(5893),a=n(6113);n(3562),t.default=(0,a.connect)((e=>({cart:e.cart,lang:e.base.lang})))((({lang:e,cart:t})=>{const n=t.items.reduce(((e,t)=>e+t.amount),0);return(0,r.jsx)(r.Fragment,{children:"success"===t.dataLoading.status?(0,r.jsx)("div",{className:"cart-informer",children:(0,r.jsx)("span",{children:n>0?`+${n}`:null})}):null})}))},9745:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5893),i=n(6113);n(7823);const s=r(n(5747)),o=r(n(7123));t.default=(0,i.connect)((e=>({lang:e.base.lang})))((({lang:e})=>(0,a.jsxs)("div",{className:"catalog-intro",children:[(0,a.jsx)("h1",{children:"en"===e?"Our catalog":"Наш каталог"}),(0,a.jsxs)("div",{className:"descr",children:[(0,a.jsx)("div",{className:"img__container",children:(0,a.jsx)(o.default,{src:s.default,alt:"en"===e?"Catalog image":"Фото каталога"})}),(0,a.jsxs)("div",{className:"descr__text",children:[(0,a.jsx)("h2",{children:"en"===e?"Subheader":"Подзаголовок"}),(0,a.jsx)("ul",{children:"en"===e?(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quo tempore atque et nostrum qui vitae! Dolor necessitatibus ipsum consectetur optio."}),(0,a.jsx)("p",{children:"Lorem ipsum, dolor sit amet consectetur adipisicing elit. Necessitatibus, eveniet odit veritatis totam exercitationem id perspiciatis dolores, ipsum quos reprehenderit, consectetur facere harum rerum libero tempore incidunt modi! Placeat cumque quidem velit porro amet quam possimus dolorum eaque exercitationem quod!"}),(0,a.jsx)("p",{children:"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quo tempore atque et nostrum qui vitae! Dolor necessitatibus ipsum consectetur optio."})]}):(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"ВАП в апва ып аволрп ывар лорвыа олывапрловы рпвыадлопрвы аплвоапр лвдаыпр влаорплв ыоарп лвдаырплваыодрплд ывраплва лоаврплвор влапрыдалопвырапл дрываплдывра"}),(0,a.jsx)("p",{children:"ВАП в апва ып аволрп ывар лорвыа олывапрловы рпвыадлопрвы аплвоапр лвдаыпр влаорплв ыоарп лвдаырплваыодрплд ывраплва лоаврплвор влапрыдалопвырапл дрываплдывра"})]})})]})]})]})))},8935:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5893);n(3448);const i=n(4791),s=n(6113),o=n(7294),l=n(9709),u=r(n(8840)),c={setCategoriesList:l.setCategoriesList,setLoadDataStatusCategoriesList:l.setLoadDataStatusCategoriesList,setLoadDataStatusCategory:l.setLoadDataStatusCategory,setSelectedCategory:l.setSelectedCategory,setSelectedProduct:l.setSelectedProduct,loadCategoriesList:l.loadCategoriesList};t.default=(0,s.connect)((e=>({lang:e.base.lang,loading:e.catalog.categoriesListLoading,list:e.catalog.categoriesList,selectedCategory:e.catalog.selectedCategory})),(e=>({setState:{catalog:(0,i.bindActionCreators)(c,e)}})))((({list:e,selectedCategory:t,loading:n,lang:r,setState:i})=>((0,o.useEffect)((()=>{"success"!==n.status?i.catalog.loadCategoriesList():!t&&i.catalog.setSelectedCategory(e[0]?.id)}),[n.status]),(0,a.jsx)("div",{className:"categories-list__container",children:(0,a.jsx)("div",{className:"list",children:"success"===n.status?(0,a.jsx)("ul",{children:e.map(((e,n)=>(0,a.jsx)("li",{className:e.id===t?"selected":"",onClick:()=>{return t=e.id,void i.catalog.setSelectedCategory(t);var t},children:e.name[r]},e.id)))}):(0,a.jsx)(u.default,{})})}))))},9387:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(5893);n(1557);const a=n(7294);t.default=({remove:e,idInstance:t,lang:n})=>{const[i,s]=(0,a.useState)(!1);return(0,r.jsxs)("div",{className:"button_delete__container",onClick:()=>{s(!0)},"aria-label":"en"===n?"Delete":"Удалить",children:[(0,r.jsxs)("svg",{version:"1.1",xmlns:"http://www.w3.org/2000/svg",x:"0px",y:"0px",viewBox:"0 0 1000 1000",enableBackground:"new 0 0 1000 1000",children:[(0,r.jsx)("path",{d:"M262.7,101.9c0-33.8,12.1-45.9,45.9-45.9h382.8c33.8,0,45.9,12.1,45.9,45.9v23.6h45.9V71.3c0-33.8-27.4-61.3-61.3-61.3H278c-33.8,0-61.3,27.4-61.3,61.3v54.2h45.9V101.9z"}),(0,r.jsx)("path",{d:"M959.4,148.5H40.6c-16.9,0-30.6,10.3-30.6,23s13.7,23,30.6,23h918.8c16.9,0,30.6-10.3,30.6-23S976.3,148.5,959.4,148.5z"})]}),(0,r.jsxs)("svg",{version:"1.1",xmlns:"http://www.w3.org/2000/svg",x:"0px",y:"0px",viewBox:"0 0 1000 1000",enableBackground:"new 0 0 1000 1000",children:[(0,r.jsx)("path",{d:"M728.7,913.4c0,16.9-13.7,30.6-30.6,30.6H300c-16.9,0-30.6-13.7-30.6-30.6L192.8,239h-45.9l76.6,720.3c0,16.9,13.7,30.6,30.6,30.6h490c16.9,0,30.6-13.7,30.6-30.6L851.2,239h-45.9L728.7,913.4z"}),(0,r.jsx)("path",{d:"M366,882.8c12.7,0,23-13.7,23-30.6L343,300.9c0-16.9-10.3-30.6-23-30.6s-23,13.7-23,30.6L343,852.2C343,869.1,353.3,882.8,366,882.8z"}),(0,r.jsx)("path",{d:"M524.9,852.2V300.9c0-16.9-10.3-30.6-23-30.6c-12.7,0-23,13.7-23,30.6v551.3c0,16.9,10.3,30.6,23,30.6C514.6,882.8,524.9,869.1,524.9,852.2z"}),(0,r.jsx)("path",{d:"M660.8,852.2l45.9-551.3c0-16.9-10.3-30.6-23-30.6s-23,13.7-23,30.6l-45.9,551.3c0,16.9,10.3,30.6,23,30.6S660.8,869.1,660.8,852.2z"})]}),(0,r.jsxs)("div",{className:"confirmation__container "+(i?"active":""),children:[(0,r.jsx)("button",{onClick:n=>{n.preventDefault(),n.stopPropagation(),s(!1),e(t)},children:"en"===n?"Delete":"Удалить"}),(0,r.jsx)("button",{onClick:e=>{e.preventDefault(),e.stopPropagation(),s(!1)},children:"en"===n?"Cancel":"Отмена"})]})]})}},8515:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(5893);n(1515);const a=n(5202),i=n(5375);t.default=({params:e,lang:t,fiber:n})=>(0,r.jsx)("div",{className:"features",children:i.propertiesList.filter((e=>"maxTemp"!==e)).map(((s,o)=>(0,r.jsxs)("div",{className:"feature__container",children:[("strength"===s||"thermalExpansion"===s||"density"===s)&&(0,r.jsxs)("div",{className:"feature",children:[(0,r.jsxs)("span",{children:[i.propertiesValues[s].name[t],": "]}),(0,r.jsx)("span",{}),(0,r.jsxs)("span",{children:[e[s]," ",i.propertiesValues[s].unit[t]]})]}),("stiffnes"===s||"durability"===s||"resistantImpact"===s)&&(0,r.jsxs)("div",{className:"feature",children:[(0,r.jsxs)("span",{children:[i.propertiesValues[s].name[t],": "]}),(0,r.jsx)("span",{}),(0,r.jsx)("span",{children:(0,a.ratingNumberToText)(e.stiffnes,10)[t]})]}),"minTemp"===s&&(0,r.jsxs)("div",{className:"feature",children:[(0,r.jsxs)("span",{children:["en"===t?"Temperetures":"t использования",": "]}),(0,r.jsx)("span",{}),(0,r.jsxs)("span",{children:[e.minTemp," ... ",e.maxTemp," ",i.propertiesValues[s].unit[t]]})]}),("flexible"===s||"elastic"===s||"soft"===s||"composite"===s||"resistantUV"===s||"resistantWater"===s||"dissolvable"===s||"resistantHeat"===s||"resistantChemically"===s||"resistantFatigue"===s||"cutting"===s||"grinding"===s)&&(0,r.jsxs)("div",{className:"feature",children:[(0,r.jsxs)("span",{children:[i.propertiesValues[s].name[t],": "]}),(0,r.jsx)("span",{}),(0,r.jsx)("span",{children:(0,a.ratingNumberToText)(e[s]+1,3)[t]})]}),"price"===s&&(0,r.jsxs)("div",{className:"feature",children:[(0,r.jsxs)("span",{children:[i.propertiesValues[s].name[t],": "]}),(0,r.jsx)("span",{}),(0,r.jsxs)("span",{children:[n.params.priceGr," ",i.propertiesValues.price.unit[t]]})]})]},s)))})},2278:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5893),i=r(n(7155));n(6497);const s=r(n(1513)),o=r(n(8515)),l=n(9818),u=n(7294),c=r(n(4915)),d=r(n(4378));t.default=({fiber:e,lang:t,colors:n})=>{const[r,f]=(0,u.useState)({visible:!1}),[p,h]=(0,u.useState)({descr:"",path:""});return(0,a.jsxs)("div",{className:"fiber__item",children:[(0,a.jsx)("h2",{children:e.name[t]}),(0,a.jsx)("div",{className:"fiber__splider__container",children:(0,a.jsx)(s.default,{images:e.imgs,lang:t,imagesPerSlide:3})}),(0,a.jsx)("div",{className:"fiber__descr__container",children:(0,a.jsxs)("div",{className:"block_text",children:[e.text[t].map(((e,t)=>(0,a.jsx)("p",{children:e.part},t))),(0,a.jsxs)("div",{className:"features__container",children:[(0,a.jsx)("h3",{children:"en"===t?"Features":"Характеристики"}),(0,a.jsx)(o.default,{params:e.params,fiber:e,lang:t})]}),(0,a.jsxs)("div",{className:"colors",children:[(0,a.jsx)("h3",{children:"en"===t?"Available colors":"Доступные цвета"}),(0,a.jsx)("div",{className:"colors__container",children:e.colors.map(((e,r)=>{const i=n.find((t=>t.id===e));if(i)return(0,a.jsx)("div",{className:"color__container",onClick:e=>((e,n)=>{e.stopPropagation(),h({descr:n.name[t],path:n.url}),f({visible:!0})})(e,i),children:(0,a.jsx)("img",{src:i.url,alt:i.name[t]})},r)}))})]}),(0,a.jsxs)("div",{className:"proscons",children:[(0,a.jsx)("h3",{children:"en"===t?"Summary":"?"}),(0,a.jsx)(i.default,{...e.proscons,lang:t})]}),(0,a.jsx)(l.NavLink,{className:"button_blue link_compareList",to:"/fibers/compare",children:"en"===t?"Watch in comparasing":"Посмотреть в сравнении"})]})}),(0,a.jsx)(c.default,{visible:r.visible,close:()=>{f({visible:!1})},escExit:!0,children:(0,a.jsx)(d.default,{props:{path:p.path,descr:p.descr}})})]})}},3255:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5893);n(7028);const i=r(n(7123));t.default=({fiber:e,lang:t,colors:n})=>(0,a.jsxs)("div",{className:"fiber-preview__item card",children:[(0,a.jsx)("div",{className:"img__container",children:(0,a.jsx)(i.default,{src:e.imgs[0].url,alt:e.imgs[0].name[t]})}),(0,a.jsxs)("div",{className:"fiber__descr",children:[(0,a.jsx)("span",{children:e.short.name[t]}),(0,a.jsx)("span",{children:e.short.descr[t]})]})]})},7591:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5893);n(3915);const i=n(4791),s=n(6113),o=r(n(7123)),l=n(9818),u=n(9709),c=n(1043),d={setCategoriesList:u.setCategoriesList,setLoadDataStatusCategoriesList:u.setLoadDataStatusCategoriesList,setLoadDataStatusCategory:u.setLoadDataStatusCategory,setSelectedCategory:u.setSelectedCategory,setSelectedProduct:u.setSelectedProduct,loadCategoriesList:u.loadCategoriesList,loadCategory:u.loadCategory},f={setProduct:c.setProduct,setLoadDataStatusProduct:c.setLoadDataStatusProduct};t.default=(0,s.connect)((e=>({lang:e.base.lang})),(e=>({setState:{catalog:(0,i.bindActionCreators)(d,e),product:(0,i.bindActionCreators)(f,e)}})))((({lang:e,products:t,setState:n})=>(0,a.jsx)("div",{className:"gallery__container",children:t.map((t=>(0,a.jsx)(l.NavLink,{to:t.id,onClick:()=>(e=>{n.product.setLoadDataStatusProduct({status:"success",message:""}),n.product.setProduct(e)})(t),children:(0,a.jsxs)("div",{className:"gallery__item",children:[(0,a.jsx)("div",{className:"img__container",children:(0,a.jsx)(o.default,{src:t.imgs[0].url,alt:t.imgs[0].name[e]})}),(0,a.jsxs)("div",{className:"descr__container",children:[(0,a.jsx)("span",{className:"name",children:t.name[e]}),(0,a.jsxs)("span",{className:"price",children:["en"===e?"Price":"Цена",": ",t.price[e]]})]})]})},t.id)))})))},1272:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(5893),a=n(7294);n(1273),t.default=()=>{const e=(0,a.useRef)(null);return window.onscroll=()=>{e.current&&(document.body.scrollTop>500||document.documentElement.scrollTop>500?e.current.classList.add("show"):e.current.classList.remove("show"))},(0,r.jsx)("div",{className:"homer",onClick:()=>{document.body.scrollTop=0,document.documentElement.scrollTop=0},ref:e,children:(0,r.jsx)("svg",{width:"16",height:"25",viewBox:"0 0 16 25",xmlns:"http://www.w3.org/2000/svg",children:(0,r.jsx)("path",{d:"M7.31719 23.7322C7.71856 24.1116 8.35148 24.0937 8.73084 23.6924L14.9129 17.1516C15.2923 16.7502 15.2745 16.1173 14.8731 15.7379C14.4717 15.3586 13.8388 15.3764 13.4594 15.7778L7.96424 21.5918L2.15022 16.0966C1.74885 15.7172 1.11593 15.7351 0.73657 16.1365C0.357206 16.5378 0.375048 17.1707 0.776422 17.5501L7.31719 23.7322ZM6.36655 0.404461L7.00449 23.0336L9.00369 22.9773L8.36576 0.348102L6.36655 0.404461Z"})})})}},6393:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(5893);n(3831);const a=n(7294),i=n(6113),s=n(6990),o=n(4791),l={setLangEn:s.setLangEn,setLangRu:s.setLangRu};t.default=(0,i.connect)((e=>({lang:e.base.lang,mobOpened:e.base.mobOpened})),(e=>({setState:{base:(0,o.bindActionCreators)(l,e)}})))((({lang:e,mobOpened:t,setState:n})=>((0,a.useEffect)((()=>{"en"===window.localStorage.getItem("language")?n.base.setLangEn():n.base.setLangRu()}),[]),(0,r.jsxs)("div",{className:`lang-switcher ${e} ${t||"hide"}`,onClick:t=>{"en"===e?(window.localStorage.setItem("language","ru"),n.base.setLangRu(),t.currentTarget.classList.add("ru"),t.currentTarget.classList.remove("en")):(window.localStorage.setItem("language","en"),n.base.setLangEn(),t.currentTarget.classList.add("en"),t.currentTarget.classList.remove("ru"))},children:[(0,r.jsx)("div",{className:"lang-switcher__text lang_ru","data-lang":"ru",children:"RU"}),(0,r.jsx)("div",{className:"lang-switcher__text lang_en","data-lang":"en",children:"EN"})]}))))},4378:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5893),i=n(7294);n(5890);const s=r(n(8840));t.default=({props:e})=>{const[t,n]=(0,i.useState)(!1),r=(0,i.useRef)(null),o=()=>{n(!0)};return(0,i.useEffect)((()=>{const t=new Image;return t.src=e.path,r.current?.appendChild(t),t.addEventListener("load",o),n(!1),()=>{t.removeEventListener("load",o),r.current?.removeChild(t)}}),[e.path]),(0,a.jsxs)("div",{className:"message_image__container",children:[(0,a.jsx)("div",{className:"img__wrapper",ref:r,children:!t&&(0,a.jsx)(s.default,{})}),(0,a.jsx)("div",{className:"descr__container",children:(0,a.jsx)("span",{children:e.descr})})]})}},7703:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(5893),a=n(7294);n(99),t.default=({status:e,header:t,text:n,buttonText:i,buttonAction:s})=>((0,a.useEffect)((()=>{}),[]),(0,r.jsxs)("div",{className:`message_info__container ${e}`,children:[(0,r.jsx)("h3",{children:t}),(0,r.jsx)("div",{className:"text-block",children:n.map(((e,t)=>(0,r.jsx)("p",{children:e},t)))}),(0,r.jsx)("button",{onClick:s,children:i})]}))},4915:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(5893);n(596);const a=n(3935),i=n(7294);t.default=({visible:e,escExit:t,close:n,children:s})=>{const o=document.getElementById("modal"),l=e=>{t&&27===e.keyCode&&n()};return(0,i.useEffect)((()=>(document.addEventListener("keyup",l),()=>{document.removeEventListener("keyup",l)})),[]),o?(0,a.createPortal)((0,r.jsxs)("div",{className:e?"modal-window visible":"modal-window",children:[(0,r.jsx)("button",{className:"closer","aria-label":"close | закрыть",onClick:n,children:(0,r.jsxs)("svg",{width:"32",height:"32",viewBox:"0 0 32 32",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[(0,r.jsx)("path",{fillRule:"evenodd",stroke:"#979797",clipRule:"evenodd",d:"M16 31C24.2843 31 31 24.2843 31 16C31 7.71573 24.2843 1 16 1C7.71573 1 1 7.71573 1 16C1 24.2843 7.71573 31 16 31Z",strokeWidth:"2"}),(0,r.jsx)("path",{d:"M9 9L24 24",strokeWidth:"2",strokeLinecap:"square"}),(0,r.jsx)("path",{d:"M8.49512 23.4586L24.5049 9.54144",strokeWidth:"2",strokeLinecap:"square"})]})}),(0,r.jsx)("div",{className:"content",children:e?s:null})]}),o):(0,r.jsx)("div",{className:"modal-window_absence",children:"Node for Modal Windows was not found"})}},3295:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5893);n(8405);const i=n(7294),s=n(6113),o=r(n(8968)),l=n(4791),u=r(n(8840)),c={loadAllNews:n(9956).loadAllNews};t.default=(0,s.connect)((e=>({lang:e.base.lang,news:e.news})),(e=>({setState:{news:(0,l.bindActionCreators)(c,e)}})))((({lang:e,news:t,setState:n})=>{const[r,s]=(0,i.useState)(4);return(0,i.useEffect)((()=>{"idle"===t.dataLoading.status&&n.news.loadAllNews()}),[]),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("h2",{children:"en"===e?"Recent news":"Последние новости"}),(0,a.jsx)("div",{className:"news-block",children:"success"===t.dataLoading.status?(0,a.jsxs)(a.Fragment,{children:[t.newsList.map(((t,n)=>(0,a.jsx)(i.Fragment,{children:n<r&&(0,a.jsx)(o.default,{newsPiece:t,lang:e})},n))),(0,a.jsx)("div",{className:"break-new-line"}),t.newsList.length>r&&(0,a.jsxs)("button",{className:"button_blue show-more-news",onClick:()=>{s((e=>Math.min(e+4,t.newsList?.length)))},children:[(0,a.jsx)("svg",{width:"16",height:"25",viewBox:"0 0 16 25",xmlns:"http://www.w3.org/2000/svg",children:(0,a.jsx)("path",{d:"M7.31719 23.7322C7.71856 24.1116 8.35148 24.0937 8.73084 23.6924L14.9129 17.1516C15.2923 16.7502 15.2745 16.1173 14.8731 15.7379C14.4717 15.3586 13.8388 15.3764 13.4594 15.7778L7.96424 21.5918L2.15022 16.0966C1.74885 15.7172 1.11593 15.7351 0.73657 16.1365C0.357206 16.5378 0.375048 17.1707 0.776422 17.5501L7.31719 23.7322ZM6.36655 0.404461L7.00449 23.0336L9.00369 22.9773L8.36576 0.348102L6.36655 0.404461Z"})}),(0,a.jsx)("span",{children:"en"===e?"Show more news":"Показать еще новости"}),(0,a.jsx)("svg",{width:"16",height:"25",viewBox:"0 0 16 25",xmlns:"http://www.w3.org/2000/svg",children:(0,a.jsx)("path",{d:"M7.31719 23.7322C7.71856 24.1116 8.35148 24.0937 8.73084 23.6924L14.9129 17.1516C15.2923 16.7502 15.2745 16.1173 14.8731 15.7379C14.4717 15.3586 13.8388 15.3764 13.4594 15.7778L7.96424 21.5918L2.15022 16.0966C1.74885 15.7172 1.11593 15.7351 0.73657 16.1365C0.357206 16.5378 0.375048 17.1707 0.776422 17.5501L7.31719 23.7322ZM6.36655 0.404461L7.00449 23.0336L9.00369 22.9773L8.36576 0.348102L6.36655 0.404461Z"})})]})]}):(0,a.jsx)(u.default,{})})]})}))},8968:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5893);n(8478);const i=n(9818),s=r(n(7123));t.default=({newsPiece:e,lang:t})=>(0,a.jsxs)("div",{className:"news card",children:[(0,a.jsx)("div",{className:"img__container",children:(0,a.jsx)(s.default,{src:e.imgs[0].url,alt:e.header[t]})}),(0,a.jsxs)("div",{className:"news_text",children:[(0,a.jsx)("span",{children:String(e.date.toISOString().slice(0,10))}),(0,a.jsx)("h3",{children:e.header[t]})]}),(0,a.jsx)("p",{children:e.short[t]}),(0,a.jsxs)(i.NavLink,{className:"button_news",to:`news/${e.id}`,children:["en"===t?"Read more...":"Подробнее...",(0,a.jsx)("svg",{width:"24",height:"16",viewBox:"0 0 24 16",xmlns:"http://www.w3.org/2000/svg",children:(0,a.jsx)("path",{d:"M23.6875 8.72615C24.0885 8.34643 24.1058 7.71351 23.7261 7.31246L17.5384 0.777062C17.1586 0.376018 16.5257 0.358725 16.1247 0.738437C15.7236 1.11815 15.7063 1.75108 16.086 2.15212L21.5863 7.96137L15.777 13.4616C15.376 13.8413 15.3587 14.4743 15.7384 14.8753C16.1181 15.2763 16.7511 15.2936 17.1521 14.9139L23.6875 8.72615ZM0.342942 8.38133L22.9727 8.99962L23.0273 7.00036L0.397565 6.38207L0.342942 8.38133Z"})})]},e.id)]})},5339:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(5893),a=n(7294);n(3024),t.default=({lang:e})=>{const[t,n]=(0,a.useState)(!navigator.onLine),i=()=>{n(!navigator.onLine)};return(0,a.useEffect)((()=>(window.addEventListener("online",i),window.addEventListener("offline",i),()=>{window.removeEventListener("online",i),window.removeEventListener("offline",i)})),[]),(0,r.jsx)("div",{className:"offliner",onClick:()=>n(!1),children:t&&(0,r.jsx)("span",{children:"en"===e?"You are offline (close)":"Вы не в сети (закрыть)"})})}},8840:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(5893);n(8464),t.default=()=>(0,r.jsx)("div",{className:"preloader"})},7947:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(5893);n(5353),t.default=()=>(0,r.jsxs)("div",{className:"preloader_w",children:[(0,r.jsx)("div",{className:"dash dash_1"}),(0,r.jsx)("div",{className:"dash dash_2"}),(0,r.jsx)("div",{className:"dash dash_3"}),(0,r.jsx)("div",{className:"dash dash_4"})]})},3717:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5893);n(9532);const i=n(7294),s=n(4791),o=n(6113),l=n(1043),u=n(2387),c=n(8179),d=r(n(2757)),f=n(9818),p=r(n(8429)),h={loadProduct:l.loadProduct},m={loadColors:c.loadColors},g={loadFibers:u.loadFibers};t.default=(0,o.connect)((e=>({lang:e.base.lang,selectedCategory:e.catalog.selectedCategory,categories:e.catalog.categories,selectedProduct:e.catalog.selectedProduct,product:e.product,colors:e.colors,fibers:e.fibers})),(e=>({setState:{product:(0,s.bindActionCreators)(h,e),colors:(0,s.bindActionCreators)(m,e),fibers:(0,s.bindActionCreators)(g,e)}})))((({lang:e,setState:t,product:n,colors:r,fibers:s})=>{const[o,l]=(0,i.useState)([]),[u,c]=(0,i.useState)(),[h,m]=(0,i.useState)(""),[g,v]=(0,i.useState)(void 0),b=(0,i.useRef)(null);return(0,i.useEffect)((()=>{"success"===r.dataLoading.status&&"success"===s.dataLoading.status&&"success"===n.dataLoading.status&&l(n.fibers.map((e=>s.fibersList.find((t=>t.id===e)))).filter((e=>void 0!==e?.id)))}),[s.dataLoading.status,r.dataLoading.status,n.dataLoading.status]),(0,a.jsxs)("div",{className:"details__descr",children:[(0,a.jsxs)("h2",{children:["en"===e?"Features":"Характеристики",":"]}),(0,a.jsxs)("div",{className:"features__container",children:[(0,a.jsxs)("div",{className:"feature",children:[(0,a.jsxs)("span",{children:["en"===e?"Description":"Описание",": "]}),n.text[e].map(((e,t)=>(0,a.jsx)("p",{children:e.part},t)))]}),n.features.map(((t,n)=>(0,a.jsxs)("div",{className:"feature",children:[(0,a.jsxs)("span",{children:[t.name[e],": "]}),(0,a.jsx)("span",{children:t.value[e]})]},n))),(0,a.jsxs)("div",{className:"feature",children:[(0,a.jsxs)("span",{children:["en"===e?"Price":"Цена",": "]}),(0,a.jsx)("span",{children:n.price[e]})]}),n.mods.length>0?(0,a.jsxs)("div",{className:"feature wrap_xs",children:[(0,a.jsxs)("label",{htmlFor:"type",children:["en"===e?"Version":"Версия",":"]}),(0,a.jsxs)("select",{id:"type",ref:b,defaultValue:"-1",onChange:e=>{v(n.mods[Number(e.target.value)])},children:[(0,a.jsx)("option",{value:"-1",disabled:!0,hidden:!0,children:"en"===e?"Select type":"Выберите тип"},-1),n.mods.map(((t,n)=>(0,a.jsx)("option",{value:n,children:t[e]},n)))]})]}):null,(0,a.jsxs)("div",{className:"feature wrap_xs",children:[(0,a.jsx)("label",{htmlFor:"fiber",children:u?(0,a.jsxs)(f.NavLink,{to:`../../fibers/${u.id}`,"aria-label":"en"===e?"(About selected fiber)":" (О выбранном материале)",children:["en"===e?"Fiber":"Материал",":"]}):(0,a.jsxs)(a.Fragment,{children:["en"===e?"Fiber":"Материал",":"]})}),(0,a.jsxs)("select",{id:"fiber",onChange:e=>{c(s.fibersList.find((t=>t.id===e.target.value))),m("")},defaultValue:"",children:[(0,a.jsx)("option",{disabled:!0,hidden:!0,value:"",children:"en"===e?"Select fiber":"Выберите материал"},-1),o.map(((t,n)=>(0,a.jsx)("option",{value:t.id,children:t.short.name[e]},n)))]})]}),(0,a.jsxs)("div",{className:"colors__container wrap_xs",children:[(0,a.jsxs)("span",{children:["en"===e?"Available colors":"Доступные цвета",": "]}),(0,a.jsx)("div",{className:"colors__wrapper",children:(0,a.jsx)(p.default,{lang:e,colors:r.colors.filter((e=>u?.colors.includes(e.id))),onSelect:e=>{m(e)}})})]})]}),(0,a.jsx)(d.default,{product:n,type:n.mods.length>0?g:{en:"-",ru:"-"},fiber:u?.id,color:h})]})}))},7155:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(5893);n(6989),t.default=({pros:e,cons:t,lang:n})=>(0,r.jsxs)("div",{className:"proscons__container",children:[(0,r.jsx)("ul",{className:"pros",children:e.length>0?e.map(((e,t)=>(0,r.jsx)("li",{children:e[n]},t))):null}),(0,r.jsx)("ul",{className:"cons",children:t.length>0?t.map(((e,t)=>(0,r.jsx)("li",{children:e[n]},t))):null})]})},1513:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5893);n(247);const i=r(n(9941)),s=r(n(7123));n(4602);const o=r(n(4915)),l=r(n(4378)),u=n(7294);t.default=({lang:e,images:t,imagesPerSlide:n=1})=>{const r=(0,u.useRef)(),c=(0,u.useRef)(),d=(0,u.useRef)(),[f,p]=(0,u.useState)({visible:!1}),[h,m]=(0,u.useState)({descr:"",path:""}),g={perPage:n,gap:"5%",rewind:!0,lazyLoad:!0,updateOnMove:!0,perMove:1,pagination:!0,arrows:!0,drag:!0,speed:500,autoplay:!0,interval:5e3,pauseOnHover:!0,breakpoints:{768:{wheel:!1,perPage:2,pagination:!1},480:{perPage:1}}};return(0,u.useEffect)((()=>(c.current={width:d.current.offsetWidth,height:d.current.offsetHeight},r.current=new i.default(d.current,g),r.current.mount(),()=>{r.current?.destroy()})),[]),(0,a.jsxs)("div",{className:"splider_common__wrapper",onClick:n=>(n=>{if("IMG"===n.target.tagName){const r=Number(n.target.id);p({visible:!0}),m({path:t[r].url,descr:t[r].name[e]})}})(n),children:[(0,a.jsx)("div",{className:"splide",ref:d,"aria-label":"The carousel",children:(0,a.jsx)("div",{className:"splide__track",children:(0,a.jsx)("ul",{className:"splide__list",children:t.map(((t,n)=>(0,a.jsx)("li",{className:"splide__slide","data-path":t.url,children:(0,a.jsx)("div",{className:"splide__slide-container",children:(0,a.jsx)(s.default,{src:t.url,alt:t.name[e],id:String(n)})})},n)))})})}),(0,a.jsx)(o.default,{visible:f.visible,close:()=>{p({visible:!1})},escExit:!0,children:(0,a.jsx)(l.default,{props:{path:h.path,descr:h.descr}})})]})}},5733:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5893),i=n(4791),s=n(6113),o=n(7294);n(4602),n(3853);const l=r(n(9941)),u=r(n(7123)),c=n(1043),d=r(n(4915)),f=r(n(4378)),p={loadProduct:c.loadProduct};t.default=(0,s.connect)((e=>({product:e.product,lang:e.base.lang})),(e=>({setState:{product:(0,i.bindActionCreators)(p,e)}})))((({lang:e,product:t,setState:n})=>{const r=(0,o.useRef)(null),i=(0,o.useRef)(null),s=(0,o.useRef)(),c=(0,o.useRef)(),[p,h]=(0,o.useState)({visible:!1}),m={lazyLoad:!1,perPage:5,gap:"5%",rewind:!1,pagination:!1,isNavigation:!0,focus:"center",direction:"ltr",wheel:!0,releaseWheel:!0,height:"100%",breakpoints:{1600:{perPage:5},1241:{perPage:5},992:{perPage:4},768:{perPage:3,direction:"ltr",height:"auto",gap:"5%"},480:{perPage:3}}},g={lazyLoad:!0,type:"fade",rewind:!1,pagination:!1,speed:500,wheel:!1,wheelSleep:300,breakpoints:{768:{wheel:!1}}};return(0,o.useEffect)((()=>{if(i.current&&r.current)return c.current=new l.default(i.current,m),s.current=new l.default(r.current,g),s.current.sync(c.current),s.current.mount(),c.current.mount(),()=>{c.current?.destroy(),s.current?.destroy()}}),[]),(0,a.jsxs)("div",{className:"splider_preview",children:[(0,a.jsx)("div",{id:"modalMain",className:"splide",ref:r,children:(0,a.jsx)("div",{className:"splide__track",children:(0,a.jsx)("ul",{className:"splide__list",children:t.imgs.map(((t,n)=>(0,a.jsx)("li",{className:"splide__slide",onClick:()=>{h({visible:!0})},children:(0,a.jsx)(u.default,{src:t.url,alt:t.name[e]})},n)))})})}),(0,a.jsx)("div",{id:"modalThumbs",className:"splide",ref:i,children:(0,a.jsx)("div",{className:"splide__track",children:(0,a.jsx)("ul",{className:"splide__list",children:t.imgs.map(((t,n)=>(0,a.jsx)("li",{className:"splide__slide",children:(0,a.jsx)(u.default,{src:t.url,alt:t.name[e]})},n)))})})}),(0,a.jsx)(d.default,{visible:p.visible,close:()=>{h({visible:!1})},escExit:!0,children:(0,a.jsx)(f.default,{props:{path:t.imgs[s.current?.index||0].url,descr:t.imgs[s.current?.index||0].name[e]}})})]})}))},3394:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5893);n(7815);const i=n(4791),s=n(6113),o=n(7294),l=r(n(9941)),u=n(9709),c=r(n(8840)),d=r(n(7591)),f={setCategoriesList:u.setCategoriesList,setLoadDataStatusCategoriesList:u.setLoadDataStatusCategoriesList,setLoadDataStatusCategory:u.setLoadDataStatusCategory,setSelectedCategory:u.setSelectedCategory,setSelectedProduct:u.setSelectedProduct,loadCategoriesList:u.loadCategoriesList,loadCategory:u.loadCategory,setPage:u.setPage,setCategory:u.setCategory};t.default=(0,s.connect)((e=>({lang:e.base.lang,loadingProducts:e.catalog.categories[e.catalog.selectedCategory]?.dataLoading,categoriesList:e.catalog.categoriesList,selectedCategory:e.catalog.selectedCategory,categories:e.catalog.categories,selectedProduct:e.catalog.selectedProduct})),(e=>({setState:{catalog:(0,i.bindActionCreators)(f,e)}})))((({lang:e,selectedCategory:t,setState:n,loadingProducts:r,categories:i})=>{const s=(0,o.useRef)(),u=(0,o.useRef)(null),[f,p]=(0,o.useState)([[]]),[h,m]=(0,o.useState)(6),g={lazyLoad:!1,updateOnMove:!0,perPage:1,fixedWidth:"100%",perMove:1,pagination:!0,arrows:!0,drag:!1,speed:500,wheel:!1,wheelSleep:300,interval:0,pauseOnHover:!0,breakpoints:{768:{wheel:!1}}};return(0,o.useEffect)((()=>{t&&!i[t]&&n.catalog.loadCategory(t)}),[t]),(0,o.useEffect)((()=>{if("success"!==i[t]?.dataLoading?.status)return;const e=[];for(let n=0;n<i[t].products.length;n+=h)e.push(i[t].products.slice(n,n+h));p(e)}),[i[t]?.dataLoading?.status,t]),(0,o.useEffect)((()=>{if(u.current)return document.body.offsetWidth<993&&m(4),s.current=new l.default(u.current,g),s.current.on("pagination:updated",(function(e,t,n){e.list.classList.add("splide__pagination--custom"),e.items.forEach(((t,r)=>{0===r||r===e.items.length-1||r<=n.page+1&&r>=n.page-1?t.button.classList.remove("no-display"):t.button.classList.add("no-display"),r===n.page+2&&n.page+2<e.items.length-1||r===n.page-2&&n.page-2>0?(t.button.textContent=" ... ",t.button.classList.remove("no-display")):t.button.textContent=String(t.page+1)}))})),s.current.on("move",(()=>{n.catalog.setPage(s.current?.index)})),s.current.mount(),s.current?.go(i[t].page),()=>{s.current?.destroy()}}),[f]),(0,a.jsx)("div",{className:"splider_single__container",children:"success"===r?.status?(0,a.jsx)("div",{className:"splide splider_single",ref:u,"aria-label":"",children:(0,a.jsx)("div",{className:"splide__track",children:(0,a.jsx)("ul",{className:"splide__list",children:f.map(((e,t)=>(0,a.jsx)("li",{className:"splide__slide",children:(0,a.jsx)(d.default,{products:e})},t)))})})}):(0,a.jsx)(c.default,{})})}))},4408:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5893),i=n(7294),s=n(6113),o=n(4791),l=r(n(6846)),u=r(n(3913));n(6139);const c=n(6990),d={setThemeDark:c.setThemeDark,setThemeLight:c.setThemeLight,setThemeToggle:c.setThemeToggle};t.default=(0,s.connect)((e=>({mobOpened:e.base.mobOpened,lang:e.base.lang})),(e=>({setState:{base:(0,o.bindActionCreators)(d,e)}})))((({mobOpened:e,lang:t,setState:n})=>{const r=(0,i.useRef)(null);return(0,i.useEffect)((()=>{"dark"===localStorage.getItem("theme")?n.base.setThemeDark():n.base.setThemeLight();(e=>{const t={width:70,height:40,circleSize:14,duration:2e3,theme:"light",numberOfStars:30,nodeForTheme:document.querySelector("body")||void 0,saveState:"",starsBlinkingDuration:[.9,1.2,1.4,1.6,1.8,2.1],starsBlinkingAnimation:"\n\t\t\t\t0% { opacity: .2 }\n\t\t\t\t50% { opacity: .8 }\n\t\t\t\t100% { opacity: .2 }",clouds:[{width:30,gap:15,top:0,speed:7,opacity:1},{width:25,gap:20,top:25,speed:4,opacity:.85},{width:20,gap:20,top:40,speed:5,opacity:.7}]},a={_themeSwitcherContainer:r.current,_themeSwitcher:void 0,_themeSwitcherInput:void 0,width:t.width,height:t.height,circleSize:t.circleSize,duration:t.duration,theme:t.theme,numberOfStars:t.numberOfStars,starsBlinkingDuration:t.starsBlinkingDuration,clouds:t.clouds,starsBlinkingAnimation:t.starsBlinkingAnimation,isChanging:!1,nodeForTheme:t.nodeForTheme,saveState:t.saveState},i=(e,t,n)=>new Promise((r=>{setTimeout((()=>{e&&a._contentSwitcher?.classList.remove(e),t&&a._contentSwitcher?.classList.add(t),r()}),n)})),s=e=>{a.isChanging||(a.saveState&&localStorage.setItem(a.saveState,a.theme),a.isChanging=!0,"light"===e?(n.base.setThemeLight(),a.nodeForTheme?.classList.remove("dark"),i("","theme_light_1",0).then((()=>i("theme_light_1","theme_light_2",(a.duration||1)/4))).then((()=>{i("theme_light_2","theme_light",30),a.isChanging=!1}))):(n.base.setThemeDark(),a.nodeForTheme?.classList.add("dark"),i("theme_light","theme_light_back_1",0).then((()=>i("theme_light_back_1","theme_light_back_2",(a.duration||1)/4))).then((()=>{i("theme_light_back_2","",30),a.isChanging=!1}))))},o=()=>{a.theme="light"===a.theme?"dark":"light",s(a.theme)};return{create:()=>{a._themeSwitcherContainer=e.themeSwitcherContainer,a.star=e.star,a.cloud=e.cloud,a.nodeForTheme=e.nodeForTheme?e.nodeForTheme:t.nodeForTheme,a.width=e.width?e.width:t.width,a.height=e.height?e.height:t.height,a.circleSize=e.circleSize?e.circleSize:t.circleSize,a.duration=e.duration?e.duration:t.duration,a.theme=e.theme?e.theme:t.theme,a.numberOfStars=e.numberOfStars?e.numberOfStars:t.numberOfStars,a.starsBlinkingDuration=e.starsBlinkingDuration?e.starsBlinkingDuration:t.starsBlinkingDuration,a.clouds=e.clouds?e.clouds:t.clouds,a.starsBlinkingAnimation=e.starsBlinkingAnimation?e.starsBlinkingAnimation:t.starsBlinkingAnimation,a.saveState=e.saveState?e.saveState:t.saveState,new Promise((e=>{(e=>{if(!a.width||!a.height||!a.starsBlinkingDuration?.length)return;const t=document.createElement("LABEL");a._themeSwitcherInput=document.createElement("INPUT"),a._themeSwitcherInput.setAttribute("type","checkbox"),a._themeSwitcherInput.setAttribute("aria-label","Change the site theme"),a._themeSwitcher=document.createElement("DIV"),a._themeSwitcher.classList.add("theme-switcher"),t.appendChild(a._themeSwitcherInput),t.appendChild(a._themeSwitcher),a._themeSwitcherContainer?.appendChild(t);const n=document.createElement("div");n.classList.add("content-switcher"),n.classList.add("theme_light"),a._themeSwitcher.appendChild(n);const r=document.createElement("div"),i=document.createElement("div");r.classList.add("dark"),i.classList.add("light"),n.appendChild(r),n.appendChild(i),a._contentSwitcher=n})(),(()=>{if(!(a.width&&a.circleSize&&a.height&&a.duration))return;const e=a.width/2-a.circleSize,t=document.createElement("style");document.head.appendChild(t);const n=t.sheet;n.insertRule(`\n\t\t\t\t.theme-switcher > .content-switcher {\n\t\t\t\t\twidth: ${a.width}px;\n\t\t\t\t\theight: ${a.height}px;\n\t\t\t\t\tborder-radius: ${a.height/2}px;\n\t\t\t\t\tposition: relative;\n\t\t\t\t\toverflow: hidden;\n\t\t\t\t\tcursor: pointer;\n\t\t\t\t\t-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n\t\t\t\t}`),n.insertRule("\n\t\t\t\t.theme-switcher > .content-switcher > div {\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\theight: 100%;\n\t\t\t\t\twidth: 100%;\n\t\t\t\t}"),n.insertRule(`\n\t\t\t\t.theme-switcher > .content-switcher > div.light {\n\t\t\t\t\tbackground-color: rgb(100 181 245);\n\t\t\t\t\tclip-path: circle(${a.circleSize}px at ${e}px 50%);\n\t\t\t\t\ttransition: ${a.duration/4}ms cubic-bezier(0,1,0,1);\n\t\t\t\t}`),n.insertRule(`\n\t\t\t\t.theme-switcher > .content-switcher > div.dark {\n\t\t\t\t\ttransition: ${a.duration/4}ms cubic-bezier(0,1,0,1);\n\t\t\t\t\tbackground-color: #002E6E;\n\t\t\t\t}`),n.insertRule(`\n\t\t\t\t.theme-switcher > .content-switcher.theme_light_1 .light {\n\t\t\t\t\ttransition: ${a.duration/4}ms cubic-bezier(1,0,1,0);\n\t\t\t\t\tclip-path: circle(${10*a.width}px at ${e-10*a.width+a.circleSize}px 50%);\n\t\t\t\t}`),n.insertRule(`\n\t\t\t\t.theme-switcher > .content-switcher.theme_light_2 .light {\n\t\t\t\t\ttransition: ${a.duration/4}ms cubic-bezier(1,0,1,0);\n\t\t\t\t\tclip-path: circle(${10*a.width}px at ${e-10*a.width+a.circleSize}px 50%);\n\t\t\t\t}`),n.insertRule(`\n\t\t\t\t.theme-switcher > .content-switcher.theme_light_2 .dark {\n\t\t\t\t\ttransition: ${a.duration/4}ms cubic-bezier(1,0,1,0);\n\t\t\t\t\tclip-path: circle(${10*a.width}px at ${e+10*a.width+a.circleSize}px 50%);\n\t\t\t\t}`),n.insertRule(`\n\t\t\t\t.theme-switcher > .content-switcher.theme_light .light {\n\t\t\t\t\ttransition: ${a.duration/4}ms cubic-bezier(0,1,0,1);\n\t\t\t\t\tz-index: 900;\n\t\t\t\t\tclip-path: circle(${10*a.width}px at ${a.circleSize-9*a.width}px 50%);\n\t\t\t\t}`),n.insertRule(`\n\t\t\t\t.theme-switcher > .content-switcher.theme_light .dark {\n\t\t\t\t\ttransition: ${a.duration/4}ms cubic-bezier(0,1,0,1);\n\t\t\t\t\tz-index: 1000;\n\t\t\t\t\tclip-path: circle(${a.circleSize}px at ${e+2*a.circleSize}px 50%);\n\t\t\t\t}`),n.insertRule(`\n\t\t\t\t.theme-switcher > .content-switcher.theme_light_back_1 .light {\n\t\t\t\t\ttransition: 0ms;\n\t\t\t\t\tz-index: 900;\n\t\t\t\t\tclip-path: circle(${10*a.width}px at ${a.circleSize-9*a.width}px 50%);\n\t\t\n\t\t\t\t}`),n.insertRule(`\n\t\t\t\t.theme-switcher > .content-switcher.theme_light_back_1 .dark {\n\t\t\t\t\ttransition: ${a.duration/4}ms cubic-bezier(1,0,1,0);\n\t\t\t\t\tz-index: 1000;\n\t\t\t\t\tclip-path: circle(${10*a.width}px at ${e+a.circleSize+10*a.width}px 50%);\n\t\t\t\t}`),n.insertRule(`\n\t\t\t\t.theme-switcher > .content-switcher.theme_light_back_2 .light {\n\t\t\t\t\ttransition: 0ms;\n\t\t\t\t\tz-index: 1000;\n\t\t\t\t\tclip-path: circle(${10*a.width}px at ${e-10*a.width+a.circleSize}px 50%);\n\t\t\t\t}`),n.insertRule(`\n\t\t\t\t.theme-switcher > .content-switcher.theme_light_back_2 .dark {\n\t\t\t\t\ttransition: 0ms;\n\t\t\t\t\tz-index: 900;\n\t\t\t\t\tclip-path: circle(${10*a.width}px at ${e+a.circleSize+10*a.width}px 50%);\n\t\t\t\t}`),a.starsBlinkingDuration?.forEach(((e,t)=>{n.insertRule(`\n\t\t\t\t.theme-switcher > .content-switcher .dark .theme_dark__star-${t} {\n\t\t\t\t\tanimation: star-blink ${e}s linear infinite;\n\t\t\t\t}`)})),n.insertRule(`\n\t\t\t\t@keyframes star-blink {\n\t\t\t\t\t${a.starsBlinkingAnimation}\n\t\t\t\t}`),n.insertRule("\n\t\t\t\t.theme-switcher > .content-switcher .light > div {\n\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\theight: auto;\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\tleft: 0;\n\t\t\t\t}"),a.clouds?.forEach(((e,t)=>{n.insertRule(`\n\t\t\t\t.theme-switcher > .content-switcher .light .clouds-${t} {\n\t\t\t\t\twidth: ${6*e.width+5*e.gap}px;\n\t\t\t\t\ttop: ${e.top}%;\n\t\t\t\t\tanimation: theme-clouds-${t}  linear infinite;\n\t\t\t\t\tanimation-duration: ${e.speed}s;\n\t\t\t\t}`),n.insertRule(`\n\t\t\t\t.theme-switcher > .content-switcher .light .clouds-${t} .cloud {\n\t\t\t\t\twidth: ${e.width}px;\n\t\t\t\t\tmargin-right: ${e.gap}px;\n\t\t\t\t\topacity: ${e.opacity};\n\t\t\t\t}`),n.insertRule(`\n\t\t\t\t@keyframes theme-clouds-${t} {\n\t\t\t\t\t0% { transform: translateX(0); }\n\t\t\t\t\t100% { transform: translateX(${-(e.width+e.gap)}px); }\n\t\t\t\t}`)}))})(),(()=>{const e=a._themeSwitcher?.querySelector(".content-switcher .dark");new Array(a.numberOfStars).fill("").map((()=>{let e=Math.floor(20*Math.random()+1);return e=e>13?Math.floor(e/3):e,{x:Math.floor(Math.random()*a.width),y:Math.floor(Math.random()*a.height),size:e,blinkDuration:Math.floor(Math.random()*a.starsBlinkingDuration?.length)}})).forEach((t=>{const n=document.createElement("img");n.classList.add(`theme_dark__star-${t.blinkDuration}`),n.style.position="absolute",n.style.left=`${t.x}px`,n.style.top=`${t.y}px`,n.style.width=`${t.size}px`,n.style.aspectRatio="1",n.src=String(a.star),e?.appendChild(n)}))})(),(()=>{if(a._themeSwitcher){const e=a._themeSwitcher.querySelector(".content-switcher .light");if(!a.clouds)return;const t=new Array(Math.ceil(a.width/(a.clouds[a.clouds.length-1].width+a.clouds[a.clouds.length-1].gap)+2)).fill("");a.clouds?.forEach(((n,r)=>{const i=document.createElement("div");i.classList.add(`clouds-${r}`),e?.appendChild(i),t.forEach((()=>{const e=document.createElement("img");e.classList.add("cloud"),e.src=String(a.cloud),i.appendChild(e)}))}))}})(),e()})).then((()=>{"dark"==a.theme&&s("dark"),a._themeSwitcherInput?.addEventListener("change",o)}))},destroy:()=>{for(a._themeSwitcherInput?.removeEventListener("change",o);a._themeSwitcherContainer?.firstChild;)a._themeSwitcherContainer.removeChild(a._themeSwitcherContainer.firstChild)},changeTo:e=>{a.theme=e,s(e)},change:o}})({themeSwitcherContainer:r.current,star:u.default,cloud:l.default,width:r.current?.offsetWidth,height:r.current?.offsetHeight,circleSize:Math.round(r.current?.offsetHeight/3),duration:2e3,theme:localStorage.getItem("theme")||"light",numberOfStars:30,nodeForTheme:document.querySelector("body")||void 0,saveState:"theme"}).create()}),[]),(0,a.jsx)("div",{className:e?"theme-switcher__container":"theme-switcher__container hide",ref:r})}))},8429:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5893);n(8876);const i=n(7294),s=r(n(4915)),o=r(n(4378));t.default=({lang:e,colors:t,onSelect:n})=>{const[r,l]=(0,i.useState)(),[u,c]=(0,i.useState)(!1),[d,f]=(0,i.useState)({visible:!1}),[p,h]=(0,i.useState)({descr:"",path:""});return(0,a.jsxs)("div",{className:"color-picker "+(u?"expanded":""),children:[(0,a.jsx)("div",{className:"option current",onClick:()=>{c((e=>!e))},children:r?(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("div",{className:"img__container",children:(0,a.jsx)("img",{src:r.url,alt:r.name[e]})}),(0,a.jsx)("span",{children:r.name[e]})]}):(0,a.jsxs)("span",{children:["en"===e?"Choose the fiber before":"Сначала выберите материал"," "]})}),(0,a.jsx)("div",{className:"list",children:t.map((r=>(0,a.jsxs)("div",{className:"option",onClick:()=>{return e=r.id,l(t.find((t=>t.id===e))),c(!1),void n(e);var e},children:[(0,a.jsx)("div",{className:"img__container",children:(0,a.jsx)("img",{src:r.url,alt:r.name[e]})}),(0,a.jsx)("span",{children:r.name[e]}),(0,a.jsx)("span",{onClick:t=>((t,n)=>{t.stopPropagation(),h({descr:n.name[e],path:n.url}),f({visible:!0})})(t,r),children:"en"===e?"(details)":"(детальнее)"})]},r.id)))}),(0,a.jsx)(s.default,{visible:d.visible,close:()=>{f({visible:!1})},escExit:!0,children:(0,a.jsx)(o.default,{props:{path:p.path,descr:p.descr}})})]})}},9189:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(5893),a=n(7294);n(1112),t.default=({colorValue:e,value:t,min:n,max:i,text:s,measurment:o})=>{const l=(0,a.useRef)(null),u=(0,a.useRef)(null);return(0,a.useEffect)((()=>{if(!l.current||!u.current)return;const e=100*t/(i-n);u.current.style.width=`${e}%`}),[]),(0,r.jsxs)("div",{className:"rating_value",ref:l,children:[(0,r.jsxs)("div",{className:"value__container",children:[(0,r.jsx)("div",{className:"rating__value "+(e?`color_${e}`:""),ref:u}),(0,r.jsx)("div",{className:"border_inner border_inner_1"}),(0,r.jsx)("div",{className:"border_inner border_inner_2"}),(0,r.jsx)("div",{className:"border_inner border_inner_3"}),(0,r.jsx)("div",{className:"border_inner border_inner_4"})]}),(0,r.jsx)("div",{className:"rating__legend",children:(0,r.jsxs)("span",{children:[s,(0,r.jsx)("span",{children:o})]})})]})}},3342:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(5893),a=n(7294);n(1443),t.default=({colorValue:e,value:t,max:n,text:i,measurment:s})=>{const o=(0,a.useRef)(null);return(0,a.useRef)(null),(0,a.useEffect)((()=>{}),[]),(0,r.jsxs)("div",{className:"rating_money",ref:o,children:[(0,r.jsx)("div",{className:"money__container",children:Array(t).fill("").map(((e,n)=>(0,r.jsx)("div",{className:"img__container",children:(0,r.jsxs)("svg",{className:n>=t?"faded":"",xmlns:"http://www.w3.org/2000/svg",fill:"transparent",stroke:"#000",viewBox:"100 0 300 500",children:[(0,r.jsx)("path",{strokeWidth:"45",d:"m119,312c4,70 58,111 130,110c78,1 129,-34 125,-101c-11,-61 -78,-69 -122,-79c-48,-16 -118,-16 -117,-89c-1,-53 59,-84 117,-78c60,1 111,32 112,96"}),(0,r.jsx)("path",{strokeWidth:"35",d:"m221,17l0,464m63,0l0,-464"})]})},n)))}),(0,r.jsx)("div",{className:"rating__legend",children:(0,r.jsxs)("span",{children:[i,(0,r.jsx)("span",{children:s})]})})]})}},7122:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(5893);n(4189),t.default=({color:e,type:t,value:n})=>{let a;switch(t){case"minus":a=(0,r.jsx)("svg",{className:`svg-icon ${t}`,xmlns:"http://www.w3.org/2000/svg",x:"0px",y:"0px",viewBox:"0 0 1000 1000",enableBackground:"new 0 0 1000 1000",xmlSpace:"preserve",fill:e||"#FFAAAA",children:(0,r.jsx)("path",{d:"M867.5,377.5h-735C64.9,377.5,10,432.4,10,500s54.9,122.5,122.5,122.5h735c67.6,0,122.5-54.9,122.5-122.5S935.1,377.5,867.5,377.5z"})});break;case"plus":a=(0,r.jsx)("svg",{className:`svg-icon ${t}`,version:"1.1",xmlns:"http://www.w3.org/2000/svg",x:"0px",y:"0px",viewBox:"0 0 1000 1000",enableBackground:"new 0 0 1000 1000",xmlSpace:"preserve",fill:e||"#41AD49",children:(0,r.jsx)("path",{d:"M990,500c0,56.3-45.6,101.9-101.9,101.9H601.9v286.2c0,56.3-45.6,101.9-101.9,101.9c-56.3,0-101.9-45.6-101.9-101.9V601.9H111.9C55.6,601.9,10,556.3,10,500c0-56.3,45.6-101.9,101.9-101.9h286.2V111.9C398.1,55.6,443.7,10,500,10c56.3,0,101.9,45.6,101.9,101.9v286.2h286.2C944.4,398.1,990,443.7,990,500z"})});break;case"pro":a=(0,r.jsxs)("svg",{className:`svg-icon ${t}`,version:"1.1",xmlns:"http://www.w3.org/2000/svg",width:"512",height:"512",viewBox:"0 0 512 512",fill:e||"#41AD49",children:[(0,r.jsx)("path",{d:"M26.636 280.832l51.12-51.090 102.225 102.282-51.12 51.091-102.225-102.282z"}),(0,r.jsx)("path",{d:"M179.996 331.976l254.25-254.25 51.12 51.12-254.25 254.25-51.12-51.12z"}),(0,r.jsx)("path",{d:"M180.006 434.245l-51.141-51.141 51.12-51.12 51.141 51.141-51.119 51.12z"})]});break;case"con":a=(0,r.jsx)("svg",{className:`svg-icon ${t}`,version:"1.1",xmlns:"http://www.w3.org/2000/svg",x:"0px",y:"0px",viewBox:"0 0 174.239 174.239",xmlSpace:"preserve",fill:e||"#FF0000",children:(0,r.jsx)("path",{d:"M146.537,1.047c-1.396-1.396-3.681-1.396-5.077,0L89.658,52.849c-1.396,1.396-3.681,1.396-5.077,0L32.78,1.047 \r\n                            c-1.396-1.396-3.681-1.396-5.077,0L1.047,27.702c-1.396,1.396-1.396,3.681,0,5.077l51.802,51.802c1.396,1.396,1.396,3.681,0,5.077\r\n                        L1.047,141.46c-1.396,1.396-1.396,3.681,0,5.077l26.655,26.655c1.396,1.396,3.681,1.396,5.077,0l51.802-51.802\r\n                        c1.396-1.396,3.681-1.396,5.077,0l51.801,51.801c1.396,1.396,3.681,1.396,5.077,0l26.655-26.655c1.396-1.396,1.396-3.681,0-5.077\r\n                        l-51.801-51.801c-1.396-1.396-1.396-3.681,0-5.077l51.801-51.801c1.396-1.396,1.396-3.681,0-5.077L146.537,1.047z"})});break;case"question":a=(0,r.jsxs)("svg",{className:`svg-icon ${t}`,version:"1.1",xmlns:"http://www.w3.org/2000/svg",width:"800px",height:"800px",viewBox:"0 0 973.1 973.1",xmlSpace:"preserve",children:[(0,r.jsx)("path",{d:"M502.29,788.199h-47c-33.1,0-60,26.9-60,60v64.9c0,33.1,26.9,60,60,60h47c33.101,0,60-26.9,60-60v-64.9\r\n                        C562.29,815,535.391,788.199,502.29,788.199z"}),(0,r.jsx)("path",{d:"M170.89,285.8l86.7,10.8c27.5,3.4,53.6-12.4,63.5-38.3c12.5-32.7,29.9-58.5,52.2-77.3c31.601-26.6,70.9-40,117.9-40\r\n                        c48.7,0,87.5,12.8,116.3,38.3c28.8,25.6,43.1,56.2,43.1,92.1c0,25.8-8.1,49.4-24.3,70.8c-10.5,13.6-42.8,42.2-96.7,85.9\r\n                        c-54,43.7-89.899,83.099-107.899,118.099c-18.4,35.801-24.8,75.5-26.4,115.301c-1.399,34.1,25.8,62.5,60,62.5h49\r\n                        c31.2,0,57-23.9,59.8-54.9c2-22.299,5.7-39.199,11.301-50.699c9.399-19.701,33.699-45.701,72.699-78.1\r\n                        C723.59,477.8,772.79,428.4,795.891,392c23-36.3,34.6-74.8,34.6-115.5c0-73.5-31.3-138-94-193.4c-62.6-55.4-147-83.1-253-83.1\r\n                        c-100.8,0-182.1,27.3-244.1,82c-52.8,46.6-84.9,101.8-96.2,165.5C139.69,266.1,152.39,283.5,170.89,285.8z"})]});break;default:a=(0,r.jsx)(r.Fragment,{})}return a}},2629:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(5893),l=n(745),u=n(7294),c=n(6113),d=s(n(9744)),f=s(n(8840)),p=i(n(5365)),h=s(n(7294)),m=(0,u.lazy)((()=>Promise.resolve().then((()=>i(n(8957))))));(0,l.createRoot)(document.getElementById("root")).render((0,o.jsx)(h.default.StrictMode,{children:(0,o.jsx)(c.Provider,{store:d.default,children:(0,o.jsx)(u.Suspense,{fallback:(0,o.jsx)(f.default,{}),children:(0,o.jsx)(m,{})})})})),p.register({scope:"/3DIrk/"})},3067:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5893);n(5776);const i=n(4791),s=n(6113),o=n(7294),l=r(n(3394));n(4602);const u=r(n(8935)),c=r(n(9745)),d=n(8179),f=n(2387),p={loadColors:d.loadColors},h={loadFibers:f.loadFibers};t.default=(0,s.connect)((e=>({colorsLoading:e.colors.dataLoading,fibersLoading:e.fibers.dataLoading})),(e=>({setState:{colors:(0,i.bindActionCreators)(p,e),fibers:(0,i.bindActionCreators)(h,e)}})))((({colorsLoading:e,fibersLoading:t,setState:n})=>((0,o.useEffect)((()=>{"idle"===e.status&&n.colors.loadColors(),"idle"===t.status&&n.fibers.loadFibers()}),[]),(0,a.jsx)("div",{className:"page page_catalog",children:(0,a.jsx)("div",{className:"container_page",children:(0,a.jsxs)("div",{className:"container",children:[(0,a.jsx)(c.default,{}),(0,a.jsxs)("div",{className:"splider_catalog__main",children:[(0,a.jsx)(u.default,{}),(0,a.jsx)(l.default,{})]})]})})}))))},2423:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5893);n(6e3);const i=n(2387),s=n(8179),o=n(9818),l=n(7294),u=n(4791),c=n(6113),d=r(n(8840)),f=r(n(2278)),p={loadFibers:i.loadFibers,setSelectedFiber:i.setSelectedFiber},h={loadColors:s.loadColors};t.default=(0,c.connect)((e=>({lang:e.base.lang,fibers:e.fibers,colors:e.colors})),(e=>({setState:{fibers:(0,u.bindActionCreators)(p,e),colors:(0,u.bindActionCreators)(h,e)}})))((({lang:e,fibers:t,colors:n,setState:r})=>{const i=(0,o.useParams)().fiberId||"",[s,u]=(0,l.useState)(!1),[c,p]=(0,l.useState)();return(0,l.useEffect)((()=>{"idle"===t.dataLoading.status&&(r.fibers.loadFibers(),u(!1)),"idle"===n.dataLoading.status&&(r.colors.loadColors(),u(!1)),"success"===n.dataLoading.status&&"success"===t.dataLoading.status&&(u(!0),p(t.fibersList.find((e=>e.id===i))),r.fibers.setSelectedFiber(i))}),[n.dataLoading?.status,t.dataLoading?.status,i]),(0,a.jsx)("div",{className:"page page_fiber",children:(0,a.jsx)("div",{className:"container_page",children:(0,a.jsx)("div",{className:"container",children:s&&c?(0,a.jsx)(f.default,{fiber:c,lang:e,colors:n.colors}):(0,a.jsx)(d.default,{})})})})}))},4770:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5893);n(6559);const i=n(4791),s=n(6113),o=n(7294),l=r(n(8840)),u=n(2387),c=n(8179),d=n(9818),f=r(n(7122)),p=r(n(9189)),h=r(n(3342)),m=n(5375),g={loadFibers:u.loadFibers,setShowListFibers:u.setShowListFibers,setSelectedFiber:u.setSelectedFiber},v={loadColors:c.loadColors};t.default=(0,s.connect)((e=>({lang:e.base.lang,fibers:e.fibers,colors:e.colors})),(e=>({setState:{fibers:(0,i.bindActionCreators)(g,e),colors:(0,i.bindActionCreators)(v,e)}})))((({lang:e,fibers:t,colors:n,setState:r})=>{const[i,s]=(0,o.useState)(!1),[u,c]=(0,o.useState)(!1),[g,v]=(0,o.useState)(!1),[b,y]=(0,o.useState)(!1),[_,S]=(0,o.useState)();(0,o.useEffect)((()=>{"idle"===t.dataLoading.status&&(r.fibers.loadFibers(),s(!1)),"idle"===n.dataLoading.status&&(r.colors.loadColors(),s(!1)),"success"===n.dataLoading.status&&"success"===t.dataLoading.status&&(r.fibers.setShowListFibers(t.fibersList.map((e=>e.id))),s(!0))}),[n.dataLoading?.status,t.dataLoading?.status]);const w=()=>{Array.from(document.querySelectorAll("[data-fiberselect]")).forEach((e=>e.checked=!1))};(0,o.useEffect)((()=>{setTimeout((()=>{v(!1)}),3e3)}),[g]);const x=()=>{v(!1),u&&y(!0)},E=(e,t)=>{r.fibers.setSelectedFiber(e),t&&S(t)};return(0,a.jsx)("div",{className:"page page_compare",children:(0,a.jsx)("div",{className:"container_page",children:(0,a.jsxs)("div",{className:"container_compare",children:[(0,a.jsx)("h1",{children:"en"===e?"Filaments comparison":"Сравнение филаментов"}),(0,a.jsx)("div",{className:"table__container",children:i?(0,a.jsxs)("div",{className:"table",children:[(0,a.jsx)("div",{className:"cell row-name fixed-left",children:(0,a.jsx)("span",{})}),(0,a.jsxs)("div",{className:"cell row-name fixed-left selectors",children:[u&&!b&&(0,a.jsx)("button",{className:"button_blue",onClick:()=>{c(!1),r.fibers.setShowListFibers(t.fibersList.map((e=>e.id))),w()},children:"en"===e?"Show all":"Показать все"}),(!u||b)&&(0,a.jsx)("button",{className:"button_blue",onClick:()=>{const e=Array.from(document.querySelectorAll("[data-fiberselect]")).filter((e=>e.checked)).map((e=>e.dataset.fiberselect));e.length<2?v(!0):(r.fibers.setShowListFibers(e),c(!0),w(),y(!1))},children:"en"===e?"Compare":"Сравнить"}),g&&(0,a.jsx)("span",{className:"error-message",children:"en"===e?"select 2 or more":"выберите 2 или более"})]}),m.propertiesList.map((t=>(0,a.jsx)("div",{className:"cell row-name fixed-left with-tip padding_no",children:(0,a.jsxs)(d.NavLink,{to:"/fibers",children:[(0,a.jsx)("span",{children:m.propertiesValues[t].name[e]}),(0,a.jsx)("div",{className:"tip",title:m.propertiesValues[t].tip[e],children:(0,a.jsx)(f.default,{type:"question"})})]},t)},t))),(0,a.jsx)("div",{className:"cell row-name fixed-left row-name_last",children:(0,a.jsx)("span",{})}),t.fibersList.filter((e=>t.showList.includes(e.id))).map(((n,r)=>(0,a.jsxs)(o.Fragment,{children:[(0,a.jsxs)("div",{className:"cell col-name "+(n.id===t.selected?"selected":""),onClick:e=>E(n.id,""),children:[(0,a.jsxs)("div",{className:"img__container",children:[(0,a.jsx)("img",{src:n.imgs[0].url,alt:n.imgs[0].name[e]}),(0,a.jsx)("span",{children:n.short.name[e]})]}),(0,a.jsx)(d.NavLink,{to:`../${n.id}`,className:"button_blue",children:"en"===e?"Learn more":"Подробнее"})]}),(0,a.jsx)("div",{className:"cell cell_checkbox "+(n.id===t.selected?"selected":""),children:(0,a.jsxs)("label",{children:[(0,a.jsx)("input",{type:"checkbox","data-fiberselect":n.id,onChange:x}),(0,a.jsx)("span",{})]})}),m.propertiesList.map(((r,i)=>(0,a.jsxs)("div",{className:`cell ${n.id===t.selected?"selected":""} ${_===r?"selected":""}`,onClick:e=>E(n.id,r),children:["strength"===r&&(0,a.jsx)("div",{className:"rating__container",children:(0,a.jsx)(p.default,{colorValue:"blue",min:0,max:180,value:n.params[r],text:`${n.params[r]}`,measurment:"en"===e?" MPa":" МПа"})}),"stiffnes"===r&&(0,a.jsx)("div",{className:"rating__container",children:(0,a.jsx)(p.default,{colorValue:"red",min:0,max:10,value:n.params[r],text:`${n.params[r]}`,measurment:" / 10"})}),"durability"===r&&(0,a.jsx)("div",{className:"rating__container",children:(0,a.jsx)(p.default,{colorValue:"green",min:0,max:10,value:n.params[r],text:`${n.params[r]}`,measurment:" / 10"})}),"resistantImpact"===r&&(0,a.jsx)("div",{className:"rating__container",children:(0,a.jsx)(p.default,{colorValue:"lilac",min:0,max:10,value:n.params[r],text:`${n.params[r]}`,measurment:" / 10"})}),("minTemp"===r||"maxTemp"===r||"thermalExpansion"===r||"density"===r)&&(0,a.jsxs)("span",{children:[n.params[r]," ",(0,a.jsx)("span",{children:m.propertiesValues[r].unit[e]})]}),("flexible"===r||"elastic"===r||"soft"===r||"composite"===r||"resistantUV"===r||"resistantWater"===r||"dissolvable"===r||"resistantHeat"===r||"resistantChemically"===r||"resistantFatigue"===r||"cutting"===r||"grinding"===r)&&(0,a.jsx)(f.default,{type:2===n.params[r]?"plus":0===n.params[r]?"minus":"con"}),"price"===r&&(0,a.jsx)(h.default,{value:n.params.price,max:5,text:"",measurment:""})]},`${n.id}-${r}`))),(0,a.jsx)("div",{className:"cell col-name_last  "+(n.id===t.selected?"selected":""),onClick:e=>E(n.id,""),children:(0,a.jsx)("span",{children:n.short.name[e]})})]},n.id)))]}):(0,a.jsx)(l.default,{})})]})})})}))},47:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(7294),i=n(5893);n(2727);const s=n(4791),o=n(6113),l=n(7294);n(4602);const u=r(n(8840)),c=n(2387),d=n(8179),f=n(9818),p=r(n(3255)),h={loadFibers:c.loadFibers},m={loadColors:d.loadColors};t.default=(0,o.connect)((e=>({lang:e.base.lang,fibers:e.fibers,colors:e.colors})),(e=>({setState:{fibers:(0,s.bindActionCreators)(h,e),colors:(0,s.bindActionCreators)(m,e)}})))((({lang:e,fibers:t,colors:n,setState:r})=>{const s=(0,f.useParams)().fiberId||"",[o,c]=(0,l.useState)(!1);return(0,l.useEffect)((()=>{"idle"===t.dataLoading.status&&(r.fibers.loadFibers(),c(!1)),"idle"===n.dataLoading.status&&(r.colors.loadColors(),c(!1)),"success"===n.dataLoading.status&&"success"===t.dataLoading.status&&c(!0)}),[n.dataLoading?.status,t.dataLoading?.status]),(0,l.useEffect)((()=>{if(!o||!s)return;const e=Array.from(document.querySelectorAll("[data-fiberid]")).find((e=>e.dataset.fiberid===s));if(!e)return;const t=e.getBoundingClientRect().top+window.pageYOffset-100;window.scrollTo({top:t,behavior:"smooth"})}),[o]),(0,i.jsx)("div",{className:"page page_fibers",children:(0,i.jsx)("div",{className:"container_page",children:(0,i.jsxs)("div",{className:"container",children:[(0,i.jsx)("h1",{children:"en"===e?"Materials using for 3D printing":"Материалы, используемые в печати"}),"en"===e?(0,i.jsxs)("div",{className:"block_text",children:[(0,i.jsx)("p",{children:"In modern 3D printing, a variety of different materials are used to obtain products with different properties for various operating conditions. The physical characteristics of the printed object as well as its cost will differ, which is why it is crucial to choose the right material for printing."}),(0,i.jsx)("p",{children:"Our company offers you a wide selection of printing materials for various types of products. Below are the materials we currently offer for manufacturing your desired products. We also invite you to familiarize yourself with the list of terms used to describe the materials for a more comfortable and comprehensive understanding of their features."}),(0,i.jsxs)("p",{children:[(0,i.jsx)("b",{children:"Strength:"})," the specific load that a part can withstand without breaking."]}),(0,i.jsxs)("p",{children:[(0,i.jsx)("b",{children:"Printability:"})," a relative indicator that characterizes the bonding strength between layers of the part."]}),(0,i.jsxs)("p",{children:[(0,i.jsx)("b",{children:"Stiffness:"})," the ability of a part to resist deformation, the opposite of flexibility (strength and stiffness are not the same, a part can be flexible and withstand high loads before breaking)."]}),(0,i.jsxs)("p",{children:[(0,i.jsx)("b",{children:"Shrinkage:"})," the amount by which the linear dimensions of a part decrease during cooling. The higher the shrinkage, the more time is required for printing the part due to reduced speed."]}),(0,i.jsxs)("p",{children:[(0,i.jsx)("b",{children:"Adhesion:"})," the bonding strength between lines and layers of the material. The higher this value, the closer the strength of the printed part is to that of a molded product."]})]}):(0,i.jsxs)("div",{className:"block_text",children:[(0,i.jsx)("p",{children:"В современной 3D печати используется множество различных материалов, позволяющих получить продукт с различными свойствами для разных условий эксплуатации. Отличаться будут как физическте характеристики печатаемого образца, так и его стоимость, вот почему так важно правильно выбрать материал для печати. "}),(0,i.jsx)("p",{children:"Наша кампания предлагае Вам широкий выбор материалов для печати для самых различных видов продукции. Ниже представлены материалы, из которых на данный момент мы предлагаем вам изготовить желаемую продукцию. Также мы предлагаем Вам ознакомиться со списком терминов, используемых в описании к материалам, для бьолее комфортного и полного понимания особенностей материалов."}),(0,i.jsxs)("p",{children:[(0,i.jsx)("b",{children:"Прочность:"})," удельная нагрузка, которую может воспринять деталь без разрушения."]}),(0,i.jsxs)("p",{children:[(0,i.jsx)("b",{children:"Спекаемость:"})," относительный показатель, характеризующий силу склеивания слоёв детали между собой."]}),(0,i.jsxs)("p",{children:[(0,i.jsx)("b",{children:"Жёсткость:"}),"  способность детали противостоять деформации, противоположность гибкости (прочность и жёсткость не одно и то же, деталь может быть гибкой и выдерживать большие нагрузки до разрушения)."]}),(0,i.jsxs)("p",{children:[(0,i.jsx)("b",{children:"Усадка:"})," величина, на которую уменьшаются линейные размеры детали при остывании, чем выше усадка, тем больше времени требуется на печать детали, в следствие снижения скорости."]}),(0,i.jsxs)("p",{children:[(0,i.jsx)("b",{children:"Cпекание:"})," сила склеивания линий и слоёв материала между собой, чем выше эта величина, тем ближе прочность печатной детали к прочности литого изделия."]})]}),o?(0,i.jsx)("div",{className:"fibers__container",children:t.fibersList.map(((t,r)=>(0,i.jsx)(f.NavLink,{to:`../../fibers/${t.id}`,"aria-label":"en"===e?"(About fiber)":" (О материале)",children:(0,a.createElement)(p.default,{fiber:t,lang:e,colors:n.colors,key:r})},t.id)))}):(0,i.jsx)(u.default,{})]})})})}))},4946:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5893),i=r(n(3295)),s=r(n(3328));n(5612);const o=n(6113);t.default=(0,o.connect)((e=>({lang:e.base.lang})))((({lang:e})=>(0,a.jsx)("div",{className:"page page_home",children:(0,a.jsx)("div",{className:"container_page",children:(0,a.jsx)("div",{className:"container",children:(0,a.jsxs)("div",{className:"page_home",children:[(0,a.jsx)("h1",{children:"en"===e?"Header":"Заголовок"}),(0,a.jsx)("div",{className:"block_text",children:"en"===e?(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"2Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quo tempore atque et nostrum qui vitae! Dolor necessitatibus ipsum consectetur optio."}),(0,a.jsx)("p",{children:"Lorem ipsum, dolor sit amet consectetur adipisicing elit. Necessitatibus, eveniet odit veritatis totam exercitationem id perspiciatis dolores, ipsum quos reprehenderit, consectetur facere harum rerum libero tempore incidunt modi! Placeat cumque quidem velit porro amet quam possimus dolorum eaque exercitationem quod!"}),(0,a.jsx)("p",{children:"Lorem ipsum, dolor sit amet consectetur adipisicing elit. Necessitatibus, eveniet odit veritatis totam exercitationem id perspiciatis dolores, ipsum quos reprehenderit, consectetur facere harum rerum libero tempore incidunt modi! Placeat cumque quidem velit porro amet quam possimus dolorum eaque exercitationem quod!"}),(0,a.jsx)("p",{children:"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quo tempore atque et nostrum qui vitae! Dolor necessitatibus ipsum consectetur optio."})]}):(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"ВАП в апва ып аволрп ывар лорвыа олывапрловы рпвыадлопрвы аплвоапр лвдаыпр влаорплв ыоарп лвдаырплваыодрплд ывраплва лоаврплвор влапрыдалопвырапл дрываплдывра"}),(0,a.jsx)("p",{children:"ВАП в апва ып аволрп ывар лорвыа олывапрловы рпвыадлопрвы аплвоапр лвдаыпр влаорплв ыоарп лвдаырплваыодрплд ывраплва лоаврплвор влапрыдалопвырапл дрываплдывра"}),(0,a.jsx)("p",{children:"ВАП в апва ып аволрп ывар лорвыа олывапрловы рпвыадлопрвы аплвоапр лвдаыпр влаорплв ыоарп лвдаырплваыодрплд ывраплва лоаврплвор влапрыдалопвырапл дрываплдывра"}),(0,a.jsx)("p",{children:"ВАП в апва ып аволрп ывар лорвыа олывапрловы рпвыадлопрвы аплвоапр лвдаыпр влаорплв ыоарп лвдаырплваыодрплд ывраплва лоаврплвор влапрыдалопвырапл дрываплдывра"})]})}),(0,a.jsx)("div",{className:"slider__container",children:(0,a.jsx)(s.default,{})}),(0,a.jsx)(i.default,{})]})})})})))},6512:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5893);n(3486);const i=n(9956),s=n(9818),o=r(n(8840)),l=n(4791),u=n(6113),c=n(7294),d=r(n(8665)),f=r(n(1513)),p={loadAllNews:i.loadAllNews};t.default=(0,u.connect)((e=>({lang:e.base.lang,news:e.news})),(e=>({setState:{news:(0,l.bindActionCreators)(p,e)}})))((({lang:e,news:t})=>{const n=(0,s.useParams)().newsId||"",r=(0,s.useNavigate)(),[i,l]=(0,c.useState)(!1),[u,p]=(0,c.useState)(void 0);return(0,c.useEffect)((()=>{if("success"===t.dataLoading.status){const e=t.newsList.find((e=>e.id===n));e&&(p(e),l(!0))}else(async e=>{new Promise(((t,n)=>{setTimeout((()=>{const r=d.default.find((t=>t.id===e));r?t(r):n()}),500)})).then((e=>{p(e),l(!0)})).catch((e=>{p(void 0),l(!0)}))})(n)}),[]),(0,a.jsx)("div",{className:"page page_news-details",children:(0,a.jsx)("div",{className:"container_page",children:(0,a.jsx)("div",{className:"container",children:i?(0,a.jsxs)(a.Fragment,{children:[u?(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("h1",{children:u.header[e]}),(0,a.jsx)("span",{className:"date",children:String(u.date.toISOString().slice(0,10))}),(0,a.jsx)("div",{className:"news__details",children:(0,a.jsxs)(a.Fragment,{children:[u.text[e].map(((e,t)=>(0,a.jsx)("p",{children:e.part},t))),(0,a.jsx)("div",{className:"images__container",children:(0,a.jsx)(f.default,{images:u.imgs,lang:e,imagesPerSlide:2})})]})})]}):(0,a.jsx)(a.Fragment,{children:(0,a.jsx)("h1",{children:"en"===e?"News was not found":"Запрашиваемая новость не найднена"})}),(0,a.jsxs)("button",{className:"button_blue button_back",onClick:()=>r(-1),children:[(0,a.jsx)("svg",{width:"24",height:"16",viewBox:"0 0 24 16",xmlns:"http://www.w3.org/2000/svg",children:(0,a.jsx)("path",{d:"M23.6875 8.72615C24.0885 8.34643 24.1058 7.71351 23.7261 7.31246L17.5384 0.777062C17.1586 0.376018 16.5257 0.358725 16.1247 0.738437C15.7236 1.11815 15.7063 1.75108 16.086 2.15212L21.5863 7.96137L15.777 13.4616C15.376 13.8413 15.3587 14.4743 15.7384 14.8753C16.1181 15.2763 16.7511 15.2936 17.1521 14.9139L23.6875 8.72615ZM0.342942 8.38133L22.9727 8.99962L23.0273 7.00036L0.397565 6.38207L0.342942 8.38133Z"})}),"en"===e?"Back":"Вернуться"]})]}):(0,a.jsx)(o.default,{})})})})}))},339:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5893),i=n(4791),s=n(6113);n(9510);const o=n(7294),l=r(n(4915)),u=r(n(7703)),c=n(7314),d=r(n(601)),f=r(n(311)),p=n(2387),h=n(8179),m=n(5707),g={setName:c.setName,setEmail:c.setEmail,setPhone:c.setPhone,setMessage:c.setMessage,clearFiles:c.clearFiles,clearForm:c.clearForm,addFiles:c.addFiles,sendOrder:c.sendOrder,setSendDataStatus:c.setSendDataStatus},v={loadColors:h.loadColors},b={loadFibers:p.loadFibers},y={clearCart:m.clearCart};t.default=(0,s.connect)((e=>({lang:e.base.lang,order:e.order,cart:e.cart,colors:e.colors,fibers:e.fibers})),(e=>({setState:{order:(0,i.bindActionCreators)(g,e),colors:(0,i.bindActionCreators)(v,e),fibers:(0,i.bindActionCreators)(b,e),cart:(0,i.bindActionCreators)(y,e)}})))((({lang:e,order:t,cart:n,colors:r,fibers:i,setState:s})=>{const c=(0,o.useRef)(null),p=(0,o.useRef)(null),h=(0,o.useRef)(null),m=(0,o.useRef)(null),[g,v]=(0,o.useState)({visible:!1}),b=(0,o.useRef)(null),[y,_]=(0,o.useState)({status:"",header:"",text:[]}),S=()=>{v({visible:!1}),"success"===t.dataSending.status&&(s.order.clearFiles(),s.order.clearForm(),b.current?.clearAttachedFiles(),s.cart.clearCart()),s.order.setSendDataStatus({status:"idle",message:""})},w=t=>{_({status:"",header:"en"===e?"Sending order...":"Отправка заказа...",text:[t[e]]}),v({visible:!0})};(0,o.useEffect)((()=>{"success"!==t.dataSending.status&&"error"!==t.dataSending.status||(_({status:t.dataSending.status,header:"success"===t.dataSending.status?"en"===e?"Success":"Отправлено":"en"===e?"Error":"Ошибка",text:[t.dataSending.message]}),v({visible:!0}))}),[t.dataSending.status]);const x=({e,target:t})=>{"Enter"===e.key&&(e.preventDefault(),t?.focus())},E=e=>{switch(e.target.id){case"name":s.order.setName(e.target.value);break;case"phone":s.order.setPhone(e.target.value);break;case"email":s.order.setEmail(e.target.value);break;case"message":s.order.setMessage(e.target.value)}(e=>{e.target.parentElement?.classList.remove("error")})(e)};return(0,a.jsxs)("div",{className:"page_order",children:[(0,a.jsx)("div",{className:"container_page",children:(0,a.jsx)("div",{className:"container",children:(0,a.jsxs)("div",{className:"page_order",children:[(0,a.jsx)("h1",{children:"en"===e?"Order 3D printing":"Заказать 3D печать"}),(0,a.jsx)("div",{className:"order__block",children:(0,a.jsxs)("form",{className:"order__container",children:[(0,a.jsx)("h2",{children:"en"===e?"Make an order":"Отправить заявку"}),(0,a.jsxs)("div",{className:"data-block",children:[(0,a.jsxs)("div",{className:"inputs-block",children:[(0,a.jsxs)("div",{className:"input-block",children:[(0,a.jsx)("label",{htmlFor:"name",children:"en"===e?"Your name*":"Ваше имя*"}),(0,a.jsx)("input",{className:"input-element",id:"name",type:"text",required:!0,min:2,max:25,ref:c,value:t.name,onChange:E,onKeyDown:e=>x({e,target:h.current})})]}),(0,a.jsxs)("div",{className:"input-block",children:[(0,a.jsx)("label",{htmlFor:"phone",children:"en"===e?"Your phone":"Ваш телефон"}),(0,a.jsx)("input",{className:"input-element",id:"phone",type:"tel",min:6,max:25,ref:h,value:t.phone,onChange:E,onKeyDown:e=>x({e,target:p.current})})]}),(0,a.jsxs)("div",{className:"input-block",children:[(0,a.jsx)("label",{htmlFor:"email",children:"en"===e?"Your email*":"Ваше почта*"}),(0,a.jsx)("input",{className:"input-element",id:"email",type:"email",required:!0,value:t.email,ref:p,onChange:E,onKeyDown:e=>x({e,target:m.current})})]}),(0,a.jsxs)("div",{className:"input-block message-block",children:[(0,a.jsx)("label",{htmlFor:"message",children:"en"===e?"Information about the order (at least 10 symbols)*":"Информация о заказе (минимум 10 символов)*"}),(0,a.jsx)("textarea",{className:"input-element",id:"message",required:!0,minLength:10,maxLength:1e3,ref:m,value:t.message,onChange:E})]})]}),(0,a.jsx)("div",{className:"files-block",children:(0,a.jsxs)("div",{className:"input-block files",children:[(0,a.jsx)("label",{htmlFor:"files",children:"en"===e?"Attach files":"Прикрепить файлы"}),(0,a.jsx)(f.default,{saveFiles:e=>{s.order.clearFiles(),s.order.addFiles(e)},lang:e,ref:b})]})})]}),(0,a.jsxs)("div",{className:"cart-content__container",children:[(0,a.jsx)("h3",{children:"en"===e?"Your cart":"Ваша корзина"}),(0,a.jsx)(d.default,{})]}),(0,a.jsx)("button",{type:"submit",disabled:"success"!==n.dataLoading.status&&"success"!==i.dataLoading.status&&"success"!==r.dataLoading.status&&"sending"!==t.dataSending.status,className:"button_order",onClick:a=>{(e=>{e.preventDefault(),e.stopPropagation()})(a);const o=new Date,l=t.name,u=t.phone,d=t.email,f=t.message;if((()=>{const t=[{ref:c,name:{en:"Your name",ru:"Ваше имя"}},{ref:p,name:{en:"Your email",ru:"Ваша почта"}},{ref:h,name:{en:"Your phone",ru:"Ваш телефон"}},{ref:m,name:{en:"Information about the order",ru:"Информация о заказе"}}];let n=!1;return _((t=>({status:"error",header:"en"===e?"Errors found":"Обнаружены ошибки",text:[]}))),t.forEach((t=>{t.ref.current?.checkValidity()||(_((n=>({...n,text:n.text.concat("en"===e?`Field "${t.name[e]}" is incorrect`:`Поле "${t.name[e]}" заполнено неверно`)}))),t.ref.current?.parentElement?.classList.add("error"),n=!0)})),n})())return void v({visible:!0});const g=n.items.reduce(((t,n,a)=>t+`${a+1}) ${n.product.name[e]}\n${"en"===e?"Options":"Версия"}: ${n.type} \n${"en"===e?"Fiber":"Материал"}: ${i.fibersList.find((e=>e.id===n.fiber))?.short.name[e]}\n${"en"===e?"Color":"Цвет"}: ${r.colors.find((e=>e.id===n.color))?.name[e]}\n${"en"===e?"Amount":"Количество"}: ${n.amount}\n\n`),""),b=`\n${"en"===e?"Date":"Дата"}: ${o.toISOString().slice(0,10)}\n${"en"===e?"Time":"Время"}: ${o.toISOString().slice(11,19)}\n${"en"===e?"Name":"Имя"}: ${l}\n${"en"===e?"Email":"Почта"}: ${d}\n${"en"===e?"Phone":"Телефон"}: ${u}\n${"en"===e?"Message":"Сообщение"}: ${f}`,y=`${"en"===e?"New order":"Новый заказ"}:${b}\n\n\n ${"en"===e?"Cart content":"Содержимое корзины"}: \n${g}${t.files.length>0?"en"===e?"\n\n\nAttached files:":"\n\n\nПрикрепленные файлы:":""}`;s.order.sendOrder({lang:e,text:y,filesArr:t.files,cart:n,informer:w})},children:"en"===e?"Order":"Отправить"})]})})]})})}),(0,a.jsx)(l.default,{visible:g.visible,close:S,escExit:!0,children:(0,a.jsx)(u.default,{status:y.status,header:y.header,text:y.text,buttonText:"en"===e?"Close":"Закрыть",buttonAction:S})})]})}))},4233:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(5893),a=n(9818);n(8523),t.default=({lang:e})=>{const t=(0,a.useLocation)();return(0,r.jsx)("div",{className:"page page_404",children:(0,r.jsxs)("div",{className:"container",children:[(0,r.jsxs)("h1",{children:["en"===e?"Requested page was not found":"Запрашиваемая страница не найдена",":"]}),(0,r.jsx)("h2",{children:t.pathname})]})})}},8033:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5893);n(350);const i=n(7294),s=n(9818),o=r(n(8840)),l=n(4791),u=n(6113),c=r(n(5733)),d=n(1043),f=n(2387),p=n(8179),h=r(n(3717)),m={loadProduct:d.loadProduct},g={loadColors:p.loadColors},v={loadFibers:f.loadFibers};t.default=(0,u.connect)((e=>({lang:e.base.lang,selectedCategory:e.catalog.selectedCategory,categories:e.catalog.categories,product:e.product,colors:e.colors,fibers:e.fibers})),(e=>({setState:{product:(0,l.bindActionCreators)(m,e),colors:(0,l.bindActionCreators)(g,e),fibers:(0,l.bindActionCreators)(v,e)}})))((({lang:e,setState:t,product:n,colors:r,fibers:l})=>{const u=(0,s.useParams)().productId||"",[d,f]=(0,i.useState)(!1);return(0,i.useEffect)((()=>{u!==n.id&&(t.product.loadProduct(u),f(!1))}),[]),(0,i.useEffect)((()=>{"idle"===l.dataLoading.status&&(t.fibers.loadFibers(),f(!1))}),[l.dataLoading.status]),(0,i.useEffect)((()=>{"idle"===r.dataLoading.status&&(t.colors.loadColors(),f(!1))}),[r.dataLoading.status]),(0,i.useEffect)((()=>{"success"===r.dataLoading.status&&"success"===l.dataLoading.status&&"success"===n.dataLoading.status&&f(!0)}),[l.dataLoading.status,r.dataLoading.status,n.dataLoading.status]),(0,a.jsx)("div",{className:"page page_product-details",children:(0,a.jsx)("div",{className:"container_page",children:(0,a.jsxs)("div",{className:"container",children:[(0,a.jsx)("h1",{children:n.name[e]}),d?(0,a.jsxs)("div",{className:"details__block",children:[(0,a.jsx)("div",{className:"details__splider",children:(0,a.jsx)(c.default,{})}),(0,a.jsx)("div",{className:"details__descr-order",children:(0,a.jsx)(h.default,{})})]}):(0,a.jsx)(o.default,{})]})})})}))},9084:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5893);n(9702);const i=r(n(4469)),s=r(n(5203)),o=r(n(3855)),l=r(n(2386)),u=n(6113);t.default=(0,u.connect)((e=>({lang:e.base.lang})))((e=>(0,a.jsx)("footer",{children:(0,a.jsx)("div",{className:"container",children:(0,a.jsxs)("div",{className:"footer__content",children:[(0,a.jsx)("span",{className:"footer__copyright",children:"PrintIrk © 2023"}),(0,a.jsxs)("div",{className:"footer__social",children:[(0,a.jsxs)("span",{children:["en"===e.lang?"We are in socials":"Мы в соцсетях",": "]}),(0,a.jsxs)("div",{className:"social_links",children:[(0,a.jsx)("a",{href:"#",children:(0,a.jsx)("img",{src:o.default,alt:"Our Telegram",title:"Join us in Telegram"})}),(0,a.jsx)("a",{href:"#",children:(0,a.jsx)("img",{src:s.default,alt:"Our WhatsApp",title:"Join us in WhatsApp"})}),(0,a.jsx)("a",{href:"#",children:(0,a.jsx)("img",{src:i.default,alt:"Our Instagram",title:"Join us in Instagram"})}),(0,a.jsx)("a",{href:"#",children:(0,a.jsx)("img",{src:l.default,alt:"Our Youtube",title:"Our Youtube channel"})})]})]})]})})})))},5431:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5893),i=n(9818),s=r(n(805)),o=r(n(200));n(7439),t.default=()=>(0,a.jsx)("header",{children:(0,a.jsx)("div",{className:"container",children:(0,a.jsxs)("div",{className:"header__content",children:[(0,a.jsx)(i.Link,{to:"/",className:"logo-link",children:(0,a.jsx)("img",{src:o.default,alt:"Our Logo"})}),(0,a.jsx)(s.default,{})]})})})},805:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5893),i=n(7294),s=n(9818);n(2845);const o=r(n(6906)),l=n(6113),u=n(4791),c=n(6990),d=r(n(3226)),f=n(2387),p={setNavCloseDt:c.setNavCloseDt,setNavCloseMob:c.setNavCloseMob,setNavOpenDt:c.setNavOpenDt,setNavOpenMob:c.setNavOpenMob},h={loadFibers:f.loadFibers},m=[{name:{ru:"главная",en:"home"},path:"/",id:"main_home"},{name:{ru:"Филаменты",en:"Filaments"},path:"/fibers",id:"main_fibers",subMenu:[{name:{ru:"О ФИЛАМЕНТАХ",en:"ABOUT"},path:"/fibers",id:"about"},{name:{ru:"СРАВНЕНИЕ",en:"COMPARASING"},path:"/fibers/compare",id:"compare"}]},{name:{ru:"каталог",en:"catalog"},path:"/catalog",id:"catalog"},{name:{ru:"заказать",en:"order"},path:"/order",id:"order"}];t.default=(0,l.connect)((e=>({lang:e.base.lang,mobOpened:e.base.mobOpened,desktopOpened:e.base.desktopOpened,fibersState:e.fibers})),(e=>({setState:{base:(0,u.bindActionCreators)(p,e),fibers:(0,u.bindActionCreators)(h,e)}})))((({lang:e,setState:t,mobOpened:n,desktopOpened:r,fibersState:l})=>{const u=(0,i.useRef)(null),[c,f]=(0,i.useState)(m),[p,h]=(0,i.useState)([]),g=()=>{n?t.base.setNavCloseMob():t.base.setNavOpenMob()};return(0,i.useEffect)((()=>{}),[]),(0,i.useEffect)((()=>{if("success"!==l.dataLoading.status||0===l.fibersList.length)return;const e=m.map((e=>{if("main_fibers"===e.id){const t=l.fibersList.map((e=>({name:e.short.name,path:`/fibers/${e.id}`,id:e.id})));return{...e,subMenu:e.subMenu?.concat(t)}}return e}));f(e)}),[l.dataLoading.status,e]),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)("nav",{className:r?"nav_desktop opened":"nav_desktop",children:[(0,a.jsx)("div",{className:"nav__container",children:(0,a.jsx)("ul",{children:c.map((t=>(0,a.jsxs)("li",{className:t.subMenu?"extandable":"",children:[(0,a.jsxs)(s.NavLink,{className:({isActive:e})=>e?"selected":"",to:t.path,"data-nav-text":t.id,children:[t.name[e],"order"===t.name.en?(0,a.jsx)("div",{className:"cart-informer__container",children:(0,a.jsx)(d.default,{})}):null]}),t.subMenu?(0,a.jsx)("ul",{className:"sub_menu",children:(0,a.jsx)("div",{className:"submenu__content",children:t.subMenu.map((n=>(0,a.jsx)("li",{children:(0,a.jsx)(s.NavLink,{to:n.path,"data-subnav-text":t.id,children:n.name[e]})},n.path)))})}):null]},t.path)))})}),(0,a.jsxs)("div",{className:"nav__switcher",children:[(0,a.jsx)("div",{className:"text-hider"}),(0,a.jsxs)("label",{"aria-label":"open/hide navigation",children:[(0,a.jsx)("input",{type:"checkbox",onClick:()=>{r?t.base.setNavCloseDt():t.base.setNavOpenDt()}}),(0,a.jsx)("img",{src:o.default,alt:"Menu"}),(0,a.jsx)("div",{className:"nav__sign",children:(0,a.jsx)("span",{})})]})]})]}),(0,a.jsxs)("nav",{className:n?"nav_mobile opened":"nav_mobile",children:[(0,a.jsx)("div",{className:"nav__switcher",children:(0,a.jsxs)("label",{"aria-label":"open/hide navigation",children:[(0,a.jsx)("input",{type:"checkbox",onClick:g}),(0,a.jsx)("img",{src:o.default,alt:"Menu"}),(0,a.jsx)("div",{className:"nav__sign",children:(0,a.jsx)("span",{})})]})}),(0,a.jsx)("div",{className:"blur",ref:u}),(0,a.jsx)("div",{className:"nav__container",children:(0,a.jsx)("ul",{children:c.map((t=>(0,a.jsx)(i.Fragment,{children:t.subMenu?.length?(0,a.jsxs)("li",{className:p.includes(t.id)?"expanded":"",children:[(0,a.jsx)("span",{onClick:()=>{return e=t.id,void(p.includes(e)?h(p.filter((t=>t!==e))):h([...p,e]));var e},children:t.name[e]}),(0,a.jsx)("ul",{children:(0,a.jsx)("div",{className:"nav__subNav",children:t.subMenu?.map((t=>(0,a.jsx)("li",{children:(0,a.jsx)(s.NavLink,{className:({isActive:e})=>e?"selected":"",onClick:g,to:t.path,end:!0,children:t.name[e]})},t.id)))})})]}):(0,a.jsx)("li",{children:(0,a.jsx)(s.NavLink,{className:({isActive:e})=>e?"selected":"",onClick:g,to:t.path,children:t.name[e]})})},t.path)))})}),(0,a.jsx)("div",{className:"nav__container_right"})]})]})}))},9590:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.actionsListCart=t.actionsListColors=t.actionsListProduct=t.actionsListCatalog=t.actionsListOrder=t.actionsListFibers=t.actionsListNews=t.actionsListBase=void 0,t.actionsListBase={SET_THEME_DARK:"SET_THEME_DARK",SET_THEME_LIGHT:"SET_THEME_LIGHT",SET_THEME_TOGGLE:"SET_THEME_TOGGLE",SET_LANG_EN:"SET_LANG_EN",SET_LANG_RU:"SET_LANG_RU",SET_NAV_OPEN_MOB:"SET_NAV_OPEN_MOB",SET_NAV_CLOSE_MOB:"SET_NAV_CLOSE_MOB",SET_NAV_TOGGLE_MOB:"SET_NAV_TOGGLE_MOB",SET_NAV_OPEN_DT:"SET_NAV_OPEN_DT",SET_NAV_CLOSE_DT:"SET_NAV_CLOSE_DT",SET_NAV_TOGGLE_DT:"SET_NAV_TOGGLE_DT"},t.actionsListNews={SET_DATA_NEWS:"SET_DATA_NEWS",SET_LOAD_DATA_STATUS_NEWS:"SET_LOAD_DATA_STATUS_NEWS"},t.actionsListFibers={SET_DATA_FIBERS:"SET_DATA_FIBERS",SET_LOAD_DATA_STATUS_FIBERS:"SET_LOAD_DATA_STATUS_FIBERS",SET_SELECTED_FIBER:"SET_SELECTED_FIBER",SET_SHOW_LIST_FIBERS:"SET_SHOW_LIST_FIBERS"},t.actionsListOrder={SET_ORDER_NAME:"SET_ORDER_NAME",SET_ORDER_PHONE:"SET_ORDER_PHONE",SET_ORDER_EMAIL:"SET_ORDER_EMAIL",SET_ORDER_MESSAGE:"SET_ORDER_MESSAGE",CLEAR_ORDER_FORM:"CLEAR_ORDER_FORM",ADD_ORDER_FILES:"ADD_ORDER_FILES",CLEAR_ORDER_FILES:"CLEAR_ORDER_FILES",SET_SEND_DATA_STATUS_ORDER:"SET_SEND_DATA_STATUS_ORDER"},t.actionsListCatalog={SET_LOAD_DATA_STATUS_CATEGORIES_LIST:"SET_LOAD_DATA_STATUS_CATEGORIES_LIST",SET_DATA_CATEGORIES_LIST:"SET_DATA_CATEGORIES_LIST",SET_LOAD_DATA_STATUS_CATEGORY:"SET_LOAD_DATA_STATUS_CATEGORY",SET_DATA_CATEGORY:"SET_DATA_CATEGORY",SET_SELECTED_CATEGORY:"SET_SELECTED_CATEGORY",SET_SELECTED_PRODUCT:"SET_SELECTED_PRODUCT",SET_PAGE:"SET_PAGE"},t.actionsListProduct={SET_LOAD_DATA_STATUS_PRODUCT:"SET_LOAD_DATA_STATUS_PRODUCT",SET_DATA_PRODUCT:"SET_DATA_PRODUCT",SET_SELECTED_IMAGE:"SET_SELECTED_IMAGE"},t.actionsListColors={SET_LOAD_DATA_STATUS_COLORS:"SET_LOAD_DATA_STATUS_COLORS",SET_DATA_COLORS:"SET_DATA_COLORS"},t.actionsListCart={SET_LOAD_DATA_STATUS_CART:"SET_LOAD_DATA_STATUS_CART",SET_SEND_DATA_STATUS_CART:"SET_SEND_DATA_STATUS_CART",ADD_ITEM:"ADD_ITEM",CLEAR_CART:"CLEAR_CART",REMOVE_ITEM:"REMOVE_ITEM",CHANGE_ITEM:"CHANGE_ITEM",SET_CART:"SET_CART"}},6990:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.setNavCloseDt=t.setNavOpenDt=t.setNavCloseMob=t.setNavOpenMob=t.setThemeToggle=t.setThemeDark=t.setThemeLight=t.setLangRu=t.setLangEn=void 0;const r=n(9590);t.setLangEn=()=>({type:r.actionsListBase.SET_LANG_EN}),t.setLangRu=()=>({type:r.actionsListBase.SET_LANG_RU}),t.setThemeLight=()=>({type:r.actionsListBase.SET_THEME_LIGHT}),t.setThemeDark=()=>({type:r.actionsListBase.SET_THEME_DARK}),t.setThemeToggle=()=>({type:r.actionsListBase.SET_THEME_TOGGLE}),t.setNavOpenMob=()=>({type:r.actionsListBase.SET_NAV_OPEN_MOB}),t.setNavCloseMob=()=>({type:r.actionsListBase.SET_NAV_CLOSE_MOB}),t.setNavOpenDt=()=>({type:r.actionsListBase.SET_NAV_OPEN_DT}),t.setNavCloseDt=()=>({type:r.actionsListBase.SET_NAV_CLOSE_DT})},5707:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.saveCart=t.loadCart=t.removeItem=t.clearCart=t.changeItem=t.setCart=t.addItem=t.setSendDataStatusCart=t.setLoadDataStatusCart=void 0;const a=n(9590),i=r(n(3209));t.setLoadDataStatusCart=e=>({type:a.actionsListCart.SET_LOAD_DATA_STATUS_CART,payload:e}),t.setSendDataStatusCart=e=>({type:a.actionsListCart.SET_SEND_DATA_STATUS_CART,payload:e}),t.addItem=e=>({type:a.actionsListCart.ADD_ITEM,payload:e}),t.setCart=e=>({type:a.actionsListCart.SET_CART,payload:e}),t.changeItem=e=>({type:a.actionsListCart.CHANGE_ITEM,payload:e}),t.clearCart=()=>({type:a.actionsListCart.CLEAR_CART}),t.removeItem=e=>({type:a.actionsListCart.REMOVE_ITEM,payload:e}),t.loadCart=()=>async function(e){e((0,t.setLoadDataStatusCart)({status:"loading",message:"Loading cart"}));const n=await new Promise(((e,t)=>{setTimeout((()=>{e(localStorage.getItem("cart"))}),1e3)}));if(n){console.log("raw cart loaded");const r=(JSON.parse(n)||[]).map((e=>{const t=i.default.find((t=>t.id===e.product));return t?{...e,product:t}:void 0})).filter((e=>void 0!==e));console.log("cart converted"),e((0,t.setCart)(r)),e((0,t.setLoadDataStatusCart)({status:"success",message:"Cart is loaded"}))}else(0,t.clearCart)(),e((0,t.setLoadDataStatusCart)({status:"success",message:"Cart is empty"}))},t.saveCart=e=>async function(n){n((0,t.setSendDataStatusCart)({status:"sending",message:"Saving cart"}));const r=e.map((e=>({...e,product:e.product.id})));localStorage.setItem("cart",JSON.stringify(r)),n((0,t.setSendDataStatusCart)({status:"success",message:"Cart is saved"}))}},9709:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.setPage=t.loadCategory=t.setCategory=t.setLoadDataStatusCategory=t.loadCategoriesList=t.setCategoriesList=t.setSelectedProduct=t.setSelectedCategory=t.setLoadDataStatusCategoriesList=void 0;const a=r(n(3209)),i=n(9590),s=r(n(921));t.setLoadDataStatusCategoriesList=e=>({type:i.actionsListCatalog.SET_LOAD_DATA_STATUS_CATEGORIES_LIST,payload:e}),t.setSelectedCategory=e=>({type:i.actionsListCatalog.SET_SELECTED_CATEGORY,payload:e}),t.setSelectedProduct=e=>({type:i.actionsListCatalog.SET_SELECTED_PRODUCT,payload:e}),t.setCategoriesList=e=>({type:i.actionsListCatalog.SET_DATA_CATEGORIES_LIST,payload:e}),t.loadCategoriesList=()=>async function(e){e((0,t.setLoadDataStatusCategoriesList)({status:"loading",message:"Loading categories list"}));try{new Promise(((e,t)=>{setTimeout((()=>{const n=s.default;n?(console.log("CategoriesList list loaded"),e(n)):t({mesasage:"CategoriesList not found"})}),200)})).then((n=>{e((0,t.setCategoriesList)(n)),e((0,t.setLoadDataStatusCategoriesList)({status:"success",message:"Categories list loaded"}))})).catch((n=>{e((0,t.setLoadDataStatusCategoriesList)({status:"error",message:`ERROR while loading categories list: ${n}`}))}))}catch(n){e((0,t.setLoadDataStatusCategoriesList)({status:"error",message:`ERROR while loading categories list: ${n}`}))}},t.setLoadDataStatusCategory=e=>({type:i.actionsListCatalog.SET_LOAD_DATA_STATUS_CATEGORY,payload:e}),t.setCategory=e=>({type:i.actionsListCatalog.SET_DATA_CATEGORY,payload:e}),t.loadCategory=e=>async function(n){n((0,t.setLoadDataStatusCategory)({dataLoading:{status:"loading",message:`Loading category id: ${e}`},id:e}));try{const r=await new Promise(((t,n)=>{setTimeout((()=>{const r=a.default.filter((t=>t.categoryId===e));r?t(r):n(`Category ${e} is empty`),console.log(`category ${e} loaded`)}),200)})),i=s.default.find((t=>t.id===e))?.name||{en:"Other",ru:"Другое"},o={id:e,name:i,products:r,page:0};n((0,t.setCategory)(o)),n((0,t.setLoadDataStatusCategory)({dataLoading:{status:"success",message:`Loaded category id: ${e}`},id:e}))}catch(r){n((0,t.setLoadDataStatusCategory)({dataLoading:{status:"error",message:`ERROR while loading category id=${e}: error:${r}`},id:e}))}},t.setPage=e=>({type:i.actionsListCatalog.SET_PAGE,payload:e})},8179:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.loadColors=t.setColors=t.setLoadDataStatusColors=void 0;const a=n(9590),i=r(n(9206));t.setLoadDataStatusColors=e=>({type:a.actionsListColors.SET_LOAD_DATA_STATUS_COLORS,payload:e}),t.setColors=e=>({type:a.actionsListColors.SET_DATA_COLORS,payload:e}),t.loadColors=()=>async function(e){e((0,t.setLoadDataStatusColors)({status:"loading",message:"Loading colors"}));try{new Promise(((e,t)=>{setTimeout((()=>{const n=i.default;n?(console.log("colors loaded"),e(n)):t({mesasage:"colors not found"})}),500)})).then((n=>{e((0,t.setColors)(n)),e((0,t.setLoadDataStatusColors)({status:"success",message:"colors loaded"}))})).catch((n=>{e((0,t.setLoadDataStatusColors)({status:"error",message:`ERROR while loading colors: ${n}`}))}))}catch(n){e((0,t.setLoadDataStatusColors)({status:"error",message:`ERROR while loading colors: ${n}`}))}}},2387:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.loadFibers=t.setSelectedFiber=t.setShowListFibers=t.setDataFibers=t.setLoadDataStatusFibers=void 0;const a=r(n(3992)),i=n(9590);t.setLoadDataStatusFibers=e=>({type:i.actionsListFibers.SET_LOAD_DATA_STATUS_FIBERS,payload:e}),t.setDataFibers=e=>({type:i.actionsListFibers.SET_DATA_FIBERS,payload:e}),t.setShowListFibers=e=>({type:i.actionsListFibers.SET_SHOW_LIST_FIBERS,payload:e}),t.setSelectedFiber=e=>({type:i.actionsListFibers.SET_SELECTED_FIBER,payload:e}),t.loadFibers=()=>async function(e){e((0,t.setLoadDataStatusFibers)({status:"loading",message:"Loading fibers"}));try{const n=await new Promise(((e,t)=>{setTimeout((()=>{e(a.default),console.log("fibers loaded")}),2e3)}));e((0,t.setLoadDataStatusFibers)({status:"success",message:"Fibers loaded"})),e((0,t.setDataFibers)(n))}catch(n){e((0,t.setLoadDataStatusFibers)({status:"error",message:`ERROR while loading fibers: ${n}`}))}}},9956:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.loadAllNews=t.setDataNews=t.setLoadDataStatusNews=void 0;const a=r(n(8665)),i=n(9590);t.setLoadDataStatusNews=e=>({type:i.actionsListNews.SET_LOAD_DATA_STATUS_NEWS,payload:e}),t.setDataNews=e=>({type:i.actionsListNews.SET_DATA_NEWS,payload:e}),t.loadAllNews=()=>async function(e){e((0,t.setLoadDataStatusNews)({status:"loading",message:"Loading news"}));try{const n=await new Promise(((e,t)=>{setTimeout((()=>{e(a.default)}),1e3)}));e((0,t.setLoadDataStatusNews)({status:"success",message:"News loaded"})),e((0,t.setDataNews)(n))}catch(n){e((0,t.setLoadDataStatusNews)({status:"error",message:`ERROR while loading news: ${n}`}))}}},7314:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.sendOrder=t.setSendDataStatus=t.addFiles=t.clearForm=t.clearFiles=t.setMessage=t.setEmail=t.setPhone=t.setName=void 0;const r=n(9590);t.setName=e=>({type:r.actionsListOrder.SET_ORDER_NAME,payload:e}),t.setPhone=e=>({type:r.actionsListOrder.SET_ORDER_PHONE,payload:e}),t.setEmail=e=>({type:r.actionsListOrder.SET_ORDER_EMAIL,payload:e}),t.setMessage=e=>({type:r.actionsListOrder.SET_ORDER_MESSAGE,payload:e}),t.clearFiles=()=>({type:r.actionsListOrder.CLEAR_ORDER_FILES}),t.clearForm=()=>({type:r.actionsListOrder.CLEAR_ORDER_FORM}),t.addFiles=e=>({type:r.actionsListOrder.ADD_ORDER_FILES,payload:e}),t.setSendDataStatus=e=>({type:r.actionsListOrder.SET_SEND_DATA_STATUS_ORDER,payload:e}),t.sendOrder=({lang:e,text:n,filesArr:r,cart:a,informer:i})=>async function(a){a((0,t.setSendDataStatus)({status:"sending",message:"Sending message"})),await fetch("https://api.telegram.org/bot6231173548:AAGzgUoO-zHTG2bzAFPOp8KZxd9Iv9ddH3o/sendMessage",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({chat_id:"-1001849476847",text:n})}).then((n=>{n.ok||a((0,t.setSendDataStatus)({status:"error",message:"en"===e?`Error while sending a message. HTTP error, status: ${n.status}. Try again later.`:`Ошибка http при отправке сообщения, статус: ${n.status}. Пожалуйста, попробуйте позже.`}))})).then((e=>{})).catch((n=>{a((0,t.setSendDataStatus)({status:"error",message:"en"===e?`Error while sending a message: ${n.message}. Please try again later.`:`Ошибка при отправке сообщения: ${n.message}. Пожалуйста, попробуйте позже.`}))})),r.reduce((async(n,s,o)=>{await n;const l={en:"Files to send left: "+(r.length-o),ru:"Осталось отправить файлов: "+(r.length-o)};return i(l),new Promise((async(n,r)=>{const i=Date.now(),o=new FormData;o.append("chat_id","-1001849476847"),o.append("document",s,s.name);const l={method:"POST",body:o};await fetch("https://api.telegram.org/bot6231173548:AAGzgUoO-zHTG2bzAFPOp8KZxd9Iv9ddH3o/sendDocument",l).then((n=>{n.ok||(a((0,t.setSendDataStatus)({status:"error",message:"en"===e?`Error while sending files. HTTP error, status: ${n.status}. Try again later.`:`Ошибка http при отправке файлов, статус: ${n.status}. Пожалуйста, попробуйте позже.`})),r("en"===e?`Error while sending file "${s.name}": ${n.status}. Sending files has been aborted.`:`Error при отправке файла "${s.name}": ${n.status}. Отправка файлов прервана.`))})).then((e=>{const t=Date.now()-i;setTimeout((()=>{n(`File ${s.name} has been sent successfully`)}),1e3-t)})).catch((n=>{a((0,t.setSendDataStatus)({status:"error",message:"en"===e?`Your message has been sent succesfully, but the error has been occured while sending a file:, ${s.name}, error: ${n.message}`:`Ваше сообщение было успешно отправлено, но возникла ошибка при отправке файла: ${s.name}, ошибка: ${n.message}`})),r("en"===e?`Error while sending file "${s.name}": ${n.message}. Sending files has been aborted.`:`Error при отправке файла "${s.name}": ${n.message}. Отправка файлов прервана.`)}))}))}),Promise.resolve("Files sending started")).then((n=>{a((0,t.setSendDataStatus)({status:"success",message:"en"===e?`Your message ${r.length>0?"and files have":"has"} been sent`:"Ваше сообщение "+(r.length>0?"и вложения были успешно отправлены":"было успешно отправлено")}))})).catch((n=>{a((0,t.setSendDataStatus)({status:"error",message:"en"===e?`The error occur while saving files: ${n}`:`Возникла ошибка при отправке файлов: ${n}`}))}))}},1043:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.loadProduct=t.setProduct=t.setLoadDataStatusProduct=void 0;const a=n(9590),i=r(n(3209));t.setLoadDataStatusProduct=e=>({type:a.actionsListProduct.SET_LOAD_DATA_STATUS_PRODUCT,payload:e}),t.setProduct=e=>({type:a.actionsListProduct.SET_DATA_PRODUCT,payload:e}),t.loadProduct=e=>async function(n){n((0,t.setLoadDataStatusProduct)({status:"loading",message:`Loading product ${e}`}));try{new Promise(((t,n)=>{setTimeout((()=>{const r=i.default.find((t=>t.id===e));r?(console.log(`product ${e} loaded`),t(r)):n({mesasage:`product ${e} not found`})}),1e3)})).then((r=>{n((0,t.setProduct)(r)),n((0,t.setLoadDataStatusProduct)({status:"success",message:`Product id=${e} loaded`}))})).catch((r=>{n((0,t.setLoadDataStatusProduct)({status:"error",message:`ERROR while loading product id=${e}: ${r}`}))}))}catch(r){n((0,t.setLoadDataStatusProduct)({status:"error",message:`ERROR while loading product id=${e}: ${r}`}))}}},8912:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={theme:"light",lang:"ru",mobOpened:!1,desktopOpened:!0}},710:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={dataLoading:{status:"idle",message:""},dataSending:{status:"idle",message:""},items:[]}},7931:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={categoriesListLoading:{status:"idle",message:""},categoriesList:[],categories:{},selectedCategory:"",selectedProduct:""}},9861:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={dataLoading:{status:"idle",message:""},colors:[]}},1627:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={dataLoading:{status:"idle",message:""},fibersList:[],selected:"",showList:[]}},987:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={dataLoading:{status:"idle",message:""},newsList:[]}},4157:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={dataSending:{status:"idle",message:""},name:"",phone:"",email:"",message:"",files:[]}},8831:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={dataLoading:{status:"idle",message:""},id:"",price:{en:"",ru:""},name:{en:"",ru:""},text:{en:[],ru:[]},imgs:[],fibers:[],features:[],mods:[]}},3209:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=r(n(1337)),i=r(n(6748)),s=r(n(8425)),o=r(n(9832)),l=r(n(8612)),u=[{categoryId:"auto",id:"canister_1",name:{en:"Attachment for a canister",ru:"Крепление для канистры"},price:{en:"from 500 rub.",ru:"От 500 р."},text:{en:[{part:"Designed for transportation of «extreme» type canisters."},{part:"Upgraded model. Enhanced based on operational characteristics and customer feedback."}],ru:[{part:"Предназначено для перевозок канистр типа «экстрим»."},{part:"Улучшенная модель. Доработана с учетом особенностей эксплуатации и отзывов покупателей."}]},imgs:[{url:a.default,name:{ru:"Каждое изделие проходит полную сборку и проверку перед передачей заказчику",en:"Each product undergoes full assembly and inspection before delivery to the customer"}},{url:i.default,name:{ru:"Качественная посадка крепежа для удобной эксплуатации",en:"Secure fastening for convenient operation"}},{url:s.default,name:{ru:"Специальная текстура, показавшая максимальные эксплуатационные характеристики",en:"Special texture that has demonstrated maximum operational characteristics"}},{url:o.default,name:{ru:"Полный комплект, включающий в себя все необходимое для комфортной эксплуатации",en:"Complete set that includes everything necessary for comfortable operation"}},{url:l.default,name:{ru:"Полное заполнение детали для максимальной надежности изделия",en:"Full filling of the part for maximum reliability of the product"}}],fibers:["f_PETg"],features:[{name:{en:"Weight",ru:"Вес"},value:{en:"0.2kg",ru:"200гр."}},{name:{en:"Delivery",ru:"Доставка"},value:{en:"Available",ru:"Возможна"}},{name:{en:"Min items to order",ru:"Минимальная партия"},value:{en:"1 item",ru:"1 шт."}},{name:{en:"Compatible with original part",ru:"Совместимость с оригинальным креплением"},value:{en:"Full",ru:"Полная"}}],mods:[{en:"The length of the bolt: 8cm.",ru:"Длина болта: 8см."},{en:"The length of the bolt: 12cm.",ru:"Длина болта: 12см."}]}];t.default=u},921:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=[{id:"auto",name:{en:"Auto/moto",ru:"Авто/мото"}},{id:"c2",name:{en:"Toys",ru:"Игрушки"}},{id:"c3",name:{en:"Test",ru:"Тест"}},{id:"c4",name:{en:"Decor",ru:"Декор"}}]},9206:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=r(n(6009)),i=r(n(649)),s=r(n(7440)),o=r(n(7633)),l=r(n(4263)),u=r(n(4722)),c=r(n(8279)),d=r(n(8755)),f=r(n(7153)),p=r(n(1488)),h=r(n(7843)),m=[{id:"c_amber",name:{ru:"Янтарный",en:"Amber"},url:a.default},{id:"c_blue",name:{ru:"Голубой",en:"Blue"},url:i.default},{id:"c_blue_dark",name:{ru:"Темно-голубой",en:"Dark blue"},url:s.default},{id:"c_cooper",name:{ru:"Медный",en:"Cooper"},url:o.default},{id:"c_corn",name:{ru:"Кукурузный",en:"Corn"},url:l.default},{id:"c_emerald",name:{ru:"Изумрудный",en:"Emerald"},url:u.default},{id:"c_lilac_pearl",name:{ru:"Лиловая жемчужина",en:"Lilac pearl"},url:c.default},{id:"c_orange",name:{ru:"Оранжевый",en:"Orange"},url:d.default},{id:"c_pink",name:{ru:"Розовый",en:"Pink"},url:f.default},{id:"c_raspberry",name:{ru:"Малиновый",en:"Raspberry"},url:p.default},{id:"c_torque",name:{ru:"Бирюзовый",en:"Torque"},url:h.default}];t.default=m},3992:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=r(n(9307)),i=r(n(7572)),s=r(n(4905)),o=r(n(729)),l=r(n(2970)),u=r(n(6147)),c=r(n(9787)),d=r(n(3369)),f=r(n(1751)),p=r(n(3031)),h=r(n(8781)),m=r(n(6315)),g=r(n(1131)),v=r(n(4842)),b=[{id:"f_PLA",colors:["c_lilac_pearl","c_orange","c_pink","c_raspberry","c_torque"],name:{ru:"PLA (полилактид)",en:"PLA (polyactid)"},short:{name:{ru:"PLA",en:"PLA"},descr:{en:"PLA is the go-to material for most users due to its ease-of-use, dimensional accuracy, and low cost.",ru:"PLA распостраненный материал для печати благодаря низкой цене и хорошим характеристикам."}},text:{en:[{part:"The most common material for 3D printing is available in numerous colors and fillings, primarily for decorative purposes. Some manufacturers produce PLA filled with marble crumbs, metal powder, or wood fibers, which gives the plastic parts the appearance of metal, stone, or wood. "},{part:"Polylactic acid (PLA) is made from corn or sugarcane and is environmentally friendly since products made from it decompose in natural conditions."}],ru:[{part:"Самый распространённый материал для 3д печати, встречается множество расцветок и наполнений, в основном, декоративного характера. Некоторые производители выпускают PLA, наполненный мраморной крошкой, металлической пудрой или древесными волокнами, из-за чего внешне пластиковые детали становятся похожими на металл, камень или дерево. "},{part:"Полилактид производится из кукурузы или сахарного тростника, экологичен, так, как изделия из него разлагаются в природных условиях "}]},proscons:{pros:[{en:"Stiff and good strength",ru:"Высокая прочность и жесткость"},{en:"Good dimensional accuracy",ru:"Хорошая точность печати"},{en:"Good shelf life",ru:"Большой срок годности"},{en:"Low cost",ru:"Низкая стоимость"},{en:"Suitable for decorative elements",ru:"Хорошо подходит для печати элементов декора"},{en:"Suitable for models with movable joints",ru:"Подходит для моделей с подвижными соединениями"}],cons:[{en:"Non UV resistant",ru:"Боится солнечных лучей"},{en:"Low heat resistance",ru:"Низкая устойчивость к высоким температурам"},{en:"Narrow temperature range of use",ru:"Узкий температурный диапазон использования"},{en:"Not suitable for contact with food",ru:"Не подходит для контактов с пищей"},{en:"Low impact resistance",ru:"Низкая ударопрочность"}]},imgs:[{url:a.default,name:{ru:"Подходит для маленьких моделей",en:"Suitable for small models"}},{url:i.default,name:{ru:"Подходит для ненагруженных механизмов",en:"Suitable for lightly loaded mechanisms"}},{url:s.default,name:{ru:"Подходит для декоративных элементов",en:"Suitable for decorative elements"}},{url:o.default,name:{ru:"Подходит для моделей с подвижными соединениями",en:"Suitable for models with movable joints"}},{url:l.default,name:{ru:"Подходит для печати деталей интерьера",en:"Suitable for printing interior parts"}},{url:u.default,name:{ru:"Подходит для печати запасных частей без высоких требований к качеству",en:"Suitable for printing spare parts without high quality requirements"}}],features:[{name:{ru:"обработка растворителями",en:"solvent treatment "},value:{ru:"дихлорметан, дихлорэтан",en:"dichloromethane, dichloroethane"}}],params:{strength:65,stiffnes:7,durability:4,resistantImpact:3,minTemp:-20,maxTemp:45,thermalExpansion:80,density:1.24,price:1,flexible:0,elastic:0,soft:0,composite:0,resistantUV:0,resistantWater:0,dissolvable:0,resistantHeat:0,resistantChemically:0,resistantFatigue:0,cutting:2,grinding:2,priceGr:"4-6"}},{id:"f_PETg",colors:["c_amber","c_blue","c_blue_dark","c_cooper","c_corn","c_emerald","c_lilac_pearl","c_orange","c_pink","c_raspberry","c_torque"],name:{ru:"PETg (полиэтилентерефталат, модифицированный гликолем)",en:"PETg (Polyethylene, terephthalate modified with glycol)"},short:{name:{ru:"PETg",en:"PETg"},descr:{en:"PETG filament is known for their ease of printability, smooth surface finish, and water resistance.",ru:"PETG filament is known for their ease of printability, smooth surface finish, and water resistance."}},text:{en:[{part:"Indeed, this material is most commonly used for manufacturing technical parts, and it handles heat better than PLA and is not susceptible to sunlight. PETg is available in various colors, with fillings resembling stone, metal, or wood, although, like PLA, it is less commonly encountered."}],ru:[{part:"Именно, этот материал чаще всего используют для изготовления технических деталей, лучше, чем PLA переносит нагрев, не боится солнечного света. Выпускается PETg в различных цветах, наполнение под камень, металл или дерево, как в случае с PLA, встречается редко."}]},proscons:{pros:[{en:"Glossy and smooth surface finish",ru:"Глянцевая и гладкая поверхность"},{en:"High durability",ru:"Высокая долговечность"},{en:"Good shelf life",ru:"Большой срок годности"},{en:"Low cost",ru:"Низкая стоимость"},{en:"Suitable for decorative elements",ru:"Хорошо подходит для печати элементов декора"},{en:"UV resistant",ru:"Не боится солнечных лучей"},{en:"Wide temperature range of use",ru:"Широкий температурный диапазон использования"}],cons:[{en:"Not suitable for contact with food",ru:"Не подходит для контактов с пищей"},{en:"Low impact resistance",ru:"Низкая ударопрочность"}]},imgs:[{url:c.default,name:{ru:"Изображение 1",en:"Image 1"}},{url:d.default,name:{ru:"",en:""}},{url:f.default,name:{ru:"",en:""}},{url:p.default,name:{ru:"",en:""}},{url:h.default,name:{ru:"",en:""}},{url:m.default,name:{ru:"",en:""}},{url:g.default,name:{ru:"",en:""}},{url:v.default,name:{ru:"",en:""}}],features:[{name:{ru:"обработка растворителями",en:"solvent treatment "},value:{ru:"дихлорметан, дихлорэтан",en:"dichloromethane, dichloroethane"}}],params:{strength:53,stiffnes:10,durability:7,resistantImpact:3,minTemp:-40,maxTemp:70,thermalExpansion:60,density:1.23,price:2,flexible:0,elastic:0,soft:0,composite:0,resistantUV:2,resistantWater:2,dissolvable:0,resistantHeat:0,resistantChemically:2,resistantFatigue:2,cutting:2,grinding:2,priceGr:"4.5-6.5"}},{id:"f_ABS",colors:["c_b","c_w","c_t"],name:{ru:"ABS (Акрилонитрил бутадиен стирол)",en:"ABS (Acrylonitrile Butadiene Styrene)"},short:{name:{ru:"ABS",en:"ABS"},descr:{en:"ABS is a low-cost material, great for printing tough and durable parts that can withstand high temperatures.",ru:"ABS is a low-cost material, great for printing tough and durable parts that can withstand high temperatures."}},text:{en:[{part:"Poor meltability and high shrinkage of ABS plastic result in low strength. However, this plastic has good thermal resistance. It is most commonly used for 3D printing interior/exterior parts of automobiles. Without paint or coating, it is susceptible to direct sunlight."}],ru:[{part:"Плохая спекаемость и высокая усадка ABS пластика влекут за собой низкую прочность, однако, данный пластик обладает хорошей термостойкостью. Чаще всего из него печатают детали интерьера/экстерьера автомобиля. Без покрытия краской или лаком боится открытых солнечных лучей."}]},proscons:{pros:[{en:"Very high hardeness",ru:"+"},{en:"Good for toys",ru:"+"}],cons:[{en:"Non UV resistant",ru:"-"},{en:"Toxic",ru:"+"}]},imgs:[{url:a.default,name:{ru:"Изображение 6",en:"Image 6"}},{url:a.default,name:{ru:"Изображение 3",en:"Image 3"}},{url:a.default,name:{ru:"Изображение 4",en:"Image 4"}},{url:a.default,name:{ru:"Изображение 1",en:"Image 1"}}],features:[{name:{ru:"прочность",en:"hardness"},value:{ru:"средняя",en:"medium"}}],params:{strength:103,stiffnes:1,durability:8,minTemp:10,maxTemp:90,thermalExpansion:170,density:1.44,price:4,flexible:2,elastic:2,resistantImpact:1,soft:1,composite:1,resistantUV:2,resistantWater:2,dissolvable:1,resistantHeat:2,resistantChemically:1,resistantFatigue:2,cutting:2,grinding:2,priceGr:"1-2"}},{id:"f_ASA",colors:["c_w"],name:{ru:"ASA (акрилонитрил стирол акрилат)",en:"ASA (Acrylonitrile Styrene Acrylate)"},short:{name:{ru:"ASA",en:"ASA"},descr:{en:"ASA is a common alternative to ABS and is great for outdoor applications due to its high UV, temperature, and impact resistance.",ru:"ASA is a common alternative to ABS and is great for outdoor applications due to its high UV, temperature, and impact resistance."}},text:{en:[{part:"ASA is a relative of ABS plastic and shares the same physical properties as its counterpart. The most significant and only difference between them is that ASA has high weather resistance and, in its uncolored form, is not susceptible to direct sunlight."}],ru:[{part:"ASA является родственником ABS пластика, обладает теми же физическими свойствами, что и его собрат. Важнейшее и единственное отличие между ними – ASA обладает высокой атмосферостойкостью, в неокрашенном виде не боится прямых солнечных лучей."}]},proscons:{pros:[{en:"+",ru:"+"}],cons:[{en:"-",ru:"-"}]},imgs:[{url:a.default,name:{ru:"Изображение 6",en:"Image 6"}},{url:a.default,name:{ru:"Изображение 3",en:"Image 3"}},{url:a.default,name:{ru:"Изображение 4",en:"Image 4"}},{url:a.default,name:{ru:"Изображение 1",en:"Image 1"}}],features:[{name:{ru:"прочность",en:"hardness"},value:{ru:"средняя",en:"medium"}}],params:{strength:130,stiffnes:1,durability:8,minTemp:10,maxTemp:90,thermalExpansion:170,density:1.44,price:4,flexible:2,elastic:2,resistantImpact:0,soft:1,composite:1,resistantUV:2,resistantWater:2,dissolvable:1,resistantHeat:2,resistantChemically:1,resistantFatigue:2,cutting:2,grinding:2,priceGr:"9"}},{id:"f_PA",colors:["c_b"],name:{ru:"PA (полиамид/нейлон)",en:"PA (Polyamide/Nylon)"},short:{name:{ru:"PA",en:"PA"},descr:{en:"PA bla.... is a common alternative to ABS and is great for outdoor applications due to its high UV, temperature, and impact resistance.",ru:"PA bla....  is a common alternative to ABS and is great for outdoor applications due to its high UV, temperature, and impact resistance."}},text:{en:[{part:"Polyamide is resistant to petroleum products and solvents. Due to its low friction, it is particularly well-suited for manufacturing bushings and gears, where lubrication is not necessary. Thanks to its high strength, even in freezing conditions, the parts retain their functionality"}],ru:[{part:"Полиамид стоек к нефтепродуктам и растворителям, из-за низкого трения он лучше всего подходит для изготовления втулок, шестерен, при этом смазка не обязательна. Из-за высокой прочности, даже, на морозе детали сохраняют работоспособность."}]},proscons:{pros:[{en:"+",ru:"+"}],cons:[{en:"-",ru:"-"}]},imgs:[{url:a.default,name:{ru:"Изображение 6",en:"Image 6"}},{url:a.default,name:{ru:"Изображение 3",en:"Image 3"}},{url:a.default,name:{ru:"Изображение 4",en:"Image 4"}},{url:a.default,name:{ru:"Изображение 1",en:"Image 1"}}],features:[{name:{ru:"прочность",en:"hardness"},value:{ru:"средняя",en:"medium"}}],params:{strength:70,stiffnes:1,durability:8,minTemp:10,maxTemp:90,thermalExpansion:170,density:1.44,price:4,flexible:2,elastic:2,resistantImpact:1,soft:1,composite:1,resistantUV:2,resistantWater:2,dissolvable:1,resistantHeat:2,resistantChemically:1,resistantFatigue:2,cutting:2,grinding:2,priceGr:"4-6"}},{id:"f_CABS",colors:["c_b"],name:{ru:"Композиты на основе ABS",en:"Composites based on ABS"},short:{name:{ru:"ABS+",en:"ABS+"},descr:{en:"bla.... is a common alternative to ABS and is great for outdoor applications due to its high UV, temperature, and impact resistance.",ru:"bla....  is a common alternative to ABS and is great for outdoor applications due to its high UV, temperature, and impact resistance."}},text:{en:[{part:"Poor meltability and high shrinkage of ABS plastic result in low strength. However, this plastic has good thermal resistance. It is most commonly used for 3D printing interior/exterior parts of automobiles. Without paint or coating, it is susceptible to direct sunlight. By adding glass and carbon fibers, the strength and stiffness are increased."},{part:""},{part:"Types of fibers: "},{part:"GF (glass fibers)"},{part:"CF (carbon fibers)"}],ru:[{part:"Плохая спекаемость и высокая усадка ABS пластика влекут за собой низкую прочность, однако, данный пластик обладает хорошей термостойкостью. Чаще всего из него печатают детали интерьера/экстерьера автомобиля. Без покрытия краской или лаком боится открытых солнечных лучей. Благодаря добавлению стеклянных и углеродных нитей повышается прочность и жёсткость."},{part:""},{part:"Виды нитей: "},{part:"GF (стеклянные нити)"},{part:"CF (углеродные нити)"}]},proscons:{pros:[{en:"+",ru:"+"}],cons:[{en:"-",ru:"-"}]},imgs:[{url:a.default,name:{ru:"Изображение 6",en:"Image 6"}},{url:a.default,name:{ru:"Изображение 3",en:"Image 3"}},{url:a.default,name:{ru:"Изображение 4",en:"Image 4"}},{url:a.default,name:{ru:"Изображение 1",en:"Image 1"}}],features:[{name:{ru:"прочность",en:"hardness"},value:{ru:"средняя",en:"medium"}}],params:{strength:39,stiffnes:1,durability:8,minTemp:10,maxTemp:90,thermalExpansion:170,density:1.44,price:4,flexible:2,elastic:2,resistantImpact:1,soft:1,composite:1,resistantUV:2,resistantWater:2,dissolvable:1,resistantHeat:2,resistantChemically:1,resistantFatigue:2,cutting:2,grinding:2,priceGr:"4-6"}},{id:"f_CN",colors:["c_b"],name:{ru:"Композиты на основе нейлона",en:"Composites based on nylon"},short:{name:{ru:"НЕЙЛОН+",en:"NYLON+"},descr:{en:"bla.... is a common alternative to ABS and is great for outdoor applications due to its high UV, temperature, and impact resistance.",ru:"bla....  is a common alternative to ABS and is great for outdoor applications due to its high UV, temperature, and impact resistance."}},text:{en:[{part:"Polyamide is resistant to petroleum products and solvents. Due to its low friction, it is particularly well-suited for manufacturing bushings and gears, where lubrication is not necessary. Thanks to its high strength, even in freezing conditions, the parts retain their functionality. By adding glass and carbon fibers, the strength and stiffness are increased."},{part:""},{part:"Types of fibers: "},{part:"GF (glass fibers)"},{part:"CF (carbon fibers)"}],ru:[{part:"Полиамид стоек к нефтепродуктам и растворителям, из-за низкого трения он лучше всего подходит для изготовления втулок, шестерен, при этом смазка не обязательна. Из-за высокой прочности, даже, на морозе детали сохраняют работоспособность. Благодаря добавлению стеклянных и углеродных нитей повышается прочность и жёсткость."},{part:""},{part:"Виды нитей: "},{part:"GF (стеклянные нити)"},{part:"CF (углеродные нити)"}]},proscons:{pros:[{en:"+",ru:"+"}],cons:[{en:"-",ru:"-"}]},imgs:[{url:a.default,name:{ru:"Изображение 6",en:"Image 6"}},{url:a.default,name:{ru:"Изображение 3",en:"Image 3"}},{url:a.default,name:{ru:"Изображение 4",en:"Image 4"}},{url:a.default,name:{ru:"Изображение 1",en:"Image 1"}}],features:[{name:{ru:"прочность",en:"hardness"},value:{ru:"средняя",en:"medium"}}],params:{strength:160,stiffnes:1,durability:8,minTemp:10,maxTemp:90,thermalExpansion:170,density:1.44,price:4,flexible:2,elastic:2,resistantImpact:1,soft:0,composite:1,resistantUV:2,resistantWater:2,dissolvable:1,resistantHeat:2,resistantChemically:0,resistantFatigue:2,cutting:2,grinding:2,priceGr:"4-6"}},{id:"f_PC",colors:["c_b","c_m","c_w","c_r","c_b","c_g"],name:{ru:"PC (поликарбонат)",en:"PC (Polycarbonate)"},short:{name:{ru:"PC",en:"PC"},descr:{en:"Polycarbonate is known for its strength and durability. It has very high heat and impact resistance making it an ideal choice for tough environments.",ru:"Polycarbonate is known for its strength and durability. It has very high heat and impact resistance making it an ideal choice for tough environments."}},text:{en:[{part:"Polycarbonate stands out among materials with its wide range of operating temperatures and high wear resistance. It is non-combustible."}],ru:[{part:"Поликарбонат из спектра материалов выделяется широким диапазоном рабочих температур и высокой износостойкостью. Не поддерживает горение."}]},proscons:{pros:[{en:"+",ru:"+"}],cons:[{en:"-",ru:"-"}]},imgs:[{url:a.default,name:{ru:"Изображение 6",en:"Image 6"}},{url:a.default,name:{ru:"Изображение 3",en:"Image 3"}},{url:a.default,name:{ru:"Изображение 4",en:"Image 4"}},{url:a.default,name:{ru:"Изображение 1",en:"Image 1"}}],features:[{name:{ru:"прочность",en:"hardness"},value:{ru:"средняя",en:"medium"}}],params:{strength:3,stiffnes:1,durability:8,minTemp:10,maxTemp:90,thermalExpansion:170,density:1.44,price:4,flexible:2,elastic:2,resistantImpact:1,soft:1,composite:1,resistantUV:2,resistantWater:2,dissolvable:1,resistantHeat:2,resistantChemically:1,resistantFatigue:2,cutting:2,grinding:2,priceGr:"4-6"}},{id:"f_PP",colors:["c_b","c_m","c_w","c_r","c_b","c_g"],name:{ru:"PP (полипропилен)",en:"PP (polypropylene)"},short:{name:{ru:"PP",en:"PP"},descr:{en:"Polypropylene is great for high-cycle, low strength applications due to its fatigue resistance, semi-flexible, and lightweight characteristics.",ru:"Polypropylene is great for high-cycle, low strength applications due to its fatigue resistance, semi-flexible, and lightweight characteristics."}},text:{en:[{part:"Polypropylene possesses high fatigue strength, and parts made from it can withstand multiple flexural cycles."}],ru:[{part:"Полипропилен обладает высокой усталостной прочностью, детали, изготовленные из него выдерживают многократные изгибы."}]},proscons:{pros:[{en:"+",ru:"+"}],cons:[{en:"-",ru:"-"}]},imgs:[{url:a.default,name:{ru:"Изображение 6",en:"Image 6"}},{url:a.default,name:{ru:"Изображение 3",en:"Image 3"}},{url:a.default,name:{ru:"Изображение 4",en:"Image 4"}},{url:a.default,name:{ru:"Изображение 1",en:"Image 1"}}],features:[{name:{ru:"прочность",en:"hardness"},value:{ru:"средняя",en:"medium"}}],params:{strength:3,stiffnes:1,durability:8,minTemp:10,maxTemp:90,thermalExpansion:170,density:1.44,price:4,flexible:2,elastic:2,resistantImpact:1,soft:1,composite:1,resistantUV:2,resistantWater:2,dissolvable:1,resistantHeat:2,resistantChemically:1,resistantFatigue:2,cutting:2,grinding:2,priceGr:"4-6"}},{id:"f_SEBS",colors:["c_b","c_m","c_w","c_r","c_b","c_g"],name:{ru:"SEBS (стирол этилен бутадиен стирол)",en:"SEBS (Styrene Ethylene Butadiene Styrene)"},short:{name:{ru:"SEBS",en:"SEBS"},descr:{en:"bla... is great for high-cycle, low strength applications due to its fatigue resistance, semi-flexible, and lightweight characteristics.",ru:"bla... is great for high-cycle, low strength applications due to its fatigue resistance, semi-flexible, and lightweight characteristics."}},text:{en:[{part:"Thermoplastic elastomer, similar to rubber in physical properties, is often used in modeling for the production of tires, tracks, and damping pads."}],ru:[{part:"Термопластичный эластомер, по физическим свойствам похож на резину, а потому в моделировании его часто применяют для изготовления шин и гусениц, демпфирующих прокладок."}]},proscons:{pros:[{en:"+",ru:"+"}],cons:[{en:"-",ru:"-"}]},imgs:[{url:a.default,name:{ru:"Изображение 6",en:"Image 6"}},{url:a.default,name:{ru:"Изображение 3",en:"Image 3"}},{url:a.default,name:{ru:"Изображение 4",en:"Image 4"}},{url:a.default,name:{ru:"Изображение 1",en:"Image 1"}}],features:[{name:{ru:"прочность",en:"hardness"},value:{ru:"средняя",en:"medium"}}],params:{strength:3,stiffnes:1,durability:8,minTemp:10,maxTemp:90,thermalExpansion:170,density:1.44,price:4,flexible:2,elastic:2,resistantImpact:1,soft:0,composite:1,resistantUV:2,resistantWater:2,dissolvable:1,resistantHeat:2,resistantChemically:1,resistantFatigue:2,cutting:2,grinding:2,priceGr:"4-6"}}];t.default=b},8665:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=r(n(1556)),i=r(n(732)),s=r(n(7827)),o=r(n(7721)),l=new Date,u=[{id:"n1",header:{ru:"Новость 1",en:"News 1"},date:l,short:{ru:"Новость 1  авп вап авп авпаолва ва валыопрваолп ва авло ав вапрловаолп ав  апрапрап ап  па пар апр па",en:"News 1 dfg df dfdf df gdf dfdfghdfgkj dkdfk dfk hfd dfkjdfhg kdfjgkdfsj dfdf kfkfd dfkgkj kj kh "},text:{en:[{part:"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quo tempore atque et nostrum qui vitae! Dolor necessitatibus ipsum consectetur optio."},{part:"Lorem ipsum, dolor sit amet consectetur adipisicing elit. Necessitatibus, eveniet odit veritatis totam exercitationem id perspiciatis dolores, ipsum quos reprehenderit, consectetur facere harum rerum libero tempore incidunt modi! Placeat cumque quidem velit porro amet quam possimus dolorum eaque exercitationem quod!"}],ru:[{part:"ВАП в апва ып аволрп ывар лорвыа олывапрловы рпвыадлопрвы аплвоапр лвдаыпр влаорплв ыоарп лвдаырплваыодрплд ывраплва лоаврплвор влапрыдалопвырапл дрываплдывра"},{part:"ВАП в апва ып аволрп ывар лорвыа олывапрловы рпвыадлопрвы аплвоапр лвдаыпр влаорплв ыоарп лвдаырплваыодрплд ывраплва лоаврплвор влапрыдалопвырапл дрываплдывра авпрва пдрваыплопдорва лопвапрвыалод рпвлдаопрвал дпрвлдарпдлыварплвырап дывлаопрыдлв рапвыдлаопрылвдоарплдываорпфы жвапшщ вапврыап выарпваы п выалопрвалоыпр влап а"}]},imgs:[{url:a.default,name:{ru:"Изображение 1",en:"Image 1"}},{url:i.default,name:{ru:"Изображение 2",en:"Image 2"}},{url:s.default,name:{ru:"Изображение 3",en:"Image 3"}},{url:o.default,name:{ru:"Изображение 4",en:"Image 4"}}]},{id:"n2",header:{ru:"Новость 2",en:"News 2"},date:l,short:{ru:"Новость 2  авп вап авп авпаолва ва валыопрваолп ва авло ав вапрловаолп ав  апрапрап ап  па пар апр па",en:"News 2 dfg df dfdf df gdf dfdfghdfgkj dkdfk dfk hfd dfkjdfhg kdfjgkdfsj dfdf kfkfd dfkgkj kj kh "},text:{en:[{part:"Lorem gf hfgh dfghipsum dolor sit amet, consectetur adipisicing elit. Quo tempore atque et nostrum qui vitae! Dolor necessitatibus ipsum consectetur optio."},{part:"fgdh fgh Lorem ipsum, dolor sit amet consectetur adipisicing elit. Necessitatibus, eveniet odit veritatis totam exercitationem id perspiciatis dolores, ipsum quos reprehenderit, consectetur facere harum rerum libero tempore incidunt modi! Placeat cumque quidem velit porro amet quam possimus dolorum eaque exercitationem quod!"}],ru:[{part:"ВАП авыпв а в апва ып аволрп ывар лорвыа олывапрловы рпвыадлопрвы аплвоапр лвдаыпр влаорплв ыоарп лвдаырплваыодрплд ывраплва лоаврплвор влапрыдалопвырапл дрываплдывра"},{part:"ВАП вап ывап в апва ып аволрп ывар лорвыа олывапрловы рпвыадлопрвы аплвоапр лвдаыпр влаорплв ыоарп лвдаырплваыодрплд ывраплва лоаврплвор влапрыдалопвырапл дрываплдывра авпрва пдрваыплопдорва лопвапрвыалод рпвлдаопрвал дпрвлдарпдлыварплвырап дывлаопрыдлв рапвыдлаопрылвдоарплдываорпфы жвапшщ вапврыап выарпваы п выалопрвалоыпр влап а"}]},imgs:[{url:i.default,name:{ru:"Изображение 2",en:"Image 2"}},{url:a.default,name:{ru:"Изображение 3",en:"Image 3"}}]},{id:"n3",header:{ru:"Новость 3",en:"News 3"},date:l,short:{ru:"Новость 3  авп вап авп авпаолва ва валыопрваолп ва авло ав вапрловаолп ав  апрапрап ап  па пар апр па",en:"News 3 dfg df dfdf df gdf dfdfghdfgkj dkdfk dfk hfd dfkjdfhg kdfjgkdfsj dfdf kfkfd dfkgkj kj kh "},text:{en:[{part:"Lorem gf hfgh dfghipsum dolor sit amet, consectetur adipisicing elit. Quo tempore atque et nostrum qui vitae! Dolor necessitatibus ipsum consectetur optio."},{part:"fgdh fgh Lorem ipsum, dolor sit amet consectetur adipisicing elit. Necessitatibus, eveniet odit veritatis totam exercitationem id perspiciatis dolores, ipsum quos reprehenderit, consectetur facere harum rerum libero tempore incidunt modi! Placeat cumque quidem velit porro amet quam possimus dolorum eaque exercitationem quod!"}],ru:[{part:"ВАП авыпв а в апва ып аволрп ывар лорвыа олывапрловы рпвыадлопрвы аплвоапр лвдаыпр влаорплв ыоарп лвдаырплваыодрплд ывраплва лоаврплвор влапрыдалопвырапл дрываплдывра"},{part:"ВАП вап ывап в апва ып аволрп ывар лорвыа олывапрловы рпвыадлопрвы аплвоапр лвдаыпр влаорплв ыоарп лвдаырплваыодрплд ывраплва лоаврплвор влапрыдалопвырапл дрываплдывра авпрва пдрваыплопдорва лопвапрвыалод рпвлдаопрвал дпрвлдарпдлыварплвырап дывлаопрыдлв рапвыдлаопрылвдоарплдываорпфы жвапшщ вапврыап выарпваы п выалопрвалоыпр влап а"}]},imgs:[{url:s.default,name:{ru:"Изображение 2",en:"Image 2"}},{url:a.default,name:{ru:"Изображение 3",en:"Image 3"}}]},{id:"n4",header:{ru:"Новость 4",en:"News 4"},date:l,short:{ru:"Новость 4  авп вап авп авпаолва ва валыопрваолп ва авло ав вапрловаолп ав  апрапрап ап  па пар апр па",en:"News 4 dfg df dfdf df gdf dfdfghdfgkj dkdfk dfk hfd dfkjdfhg kdfjgkdfsj dfdf kfkfd dfkgkj kj kh "},text:{en:[{part:"Lorem gf hfgh dfghipsum dolor sit amet, consectetur adipisicing elit. Quo tempore atque et nostrum qui vitae! Dolor necessitatibus ipsum consectetur optio."},{part:"fgdh fgh Lorem ipsum, dolor sit amet consectetur adipisicing elit. Necessitatibus, eveniet odit veritatis totam exercitationem id perspiciatis dolores, ipsum quos reprehenderit, consectetur facere harum rerum libero tempore incidunt modi! Placeat cumque quidem velit porro amet quam possimus dolorum eaque exercitationem quod!"}],ru:[{part:"ВАП авыпв а в апва ып аволрп ывар лорвыа олывапрловы рпвыадлопрвы аплвоапр лвдаыпр влаорплв ыоарп лвдаырплваыодрплд ывраплва лоаврплвор влапрыдалопвырапл дрываплдывра"},{part:"ВАП вап ывап в апва ып аволрп ывар лорвыа олывапрловы рпвыадлопрвы аплвоапр лвдаыпр влаорплв ыоарп лвдаырплваыодрплд ывраплва лоаврплвор влапрыдалопвырапл дрываплдывра авпрва пдрваыплопдорва лопвапрвыалод рпвлдаопрвал дпрвлдарпдлыварплвырап дывлаопрыдлв рапвыдлаопрылвдоарплдываорпфы жвапшщ вапврыап выарпваы п выалопрвалоыпр влап а"}]},imgs:[{url:i.default,name:{ru:"Изображение 4",en:"Image 4"}}]},{id:"n5",header:{ru:"Новость 5",en:"News 5"},date:l,short:{ru:"Новость 5  авп вап авп авпаолва ва валыопрваолп ва авло ав вапрловаолп ав  апрапрап ап  па пар апр па",en:"News 5 dfg df dfdf df gdf dfdfghdfgkj dkdfk dfk hfd dfkjdfhg kdfjgkdfsj dfdf kfkfd dfkgkj kj kh "},text:{en:[{part:"Lorem gf hfgh dfghipsum dolor sit amet, consectetur adipisicing elit. Quo tempore atque et nostrum qui vitae! Dolor necessitatibus ipsum consectetur optio."},{part:"fgdh fgh Lorem ipsum, dolor sit amet consectetur adipisicing elit. Necessitatibus, eveniet odit veritatis totam exercitationem id perspiciatis dolores, ipsum quos reprehenderit, consectetur facere harum rerum libero tempore incidunt modi! Placeat cumque quidem velit porro amet quam possimus dolorum eaque exercitationem quod!"}],ru:[{part:"ВАП авыпв а в апва ып аволрп ывар лорвыа олывапрловы рпвыадлопрвы аплвоапр лвдаыпр влаорплв ыоарп лвдаырплваыодрплд ывраплва лоаврплвор влапрыдалопвырапл дрываплдывра"},{part:"ВАП вап ывап в апва ып аволрп ывар лорвыа олывапрловы рпвыадлопрвы аплвоапр лвдаыпр влаорплв ыоарп лвдаырплваыодрплд ывраплва лоаврплвор влапрыдалопвырапл дрываплдывра авпрва пдрваыплопдорва лопвапрвыалод рпвлдаопрвал дпрвлдарпдлыварплвырап дывлаопрыдлв рапвыдлаопрылвдоарплдываорпфы жвапшщ вапврыап выарпваы п выалопрвалоыпр влап а"}]},imgs:[{url:i.default,name:{ru:"Изображение 5",en:"Image 5"}},{url:s.default,name:{ru:"Изображение 6",en:"Image 6"}}]}];t.default=u},9353:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=r(n(8912)),i=n(9590);t.default=(e=a.default,t)=>{switch(t.type){case i.actionsListBase.SET_LANG_EN:return{...e,lang:"en"};case i.actionsListBase.SET_LANG_RU:return{...e,lang:"ru"};case i.actionsListBase.SET_THEME_LIGHT:return{...e,theme:"light"};case i.actionsListBase.SET_THEME_DARK:return{...e,theme:"dark"};case i.actionsListBase.SET_THEME_TOGGLE:const t="light"===e.theme?"dark":"light";return{...e,theme:t};case i.actionsListBase.SET_NAV_OPEN_MOB:return{...e,mobOpened:!0};case i.actionsListBase.SET_NAV_CLOSE_MOB:return{...e,mobOpened:!1};case i.actionsListBase.SET_NAV_OPEN_DT:return{...e,desktopOpened:!0};case i.actionsListBase.SET_NAV_CLOSE_DT:return{...e,desktopOpened:!1};default:return e}}},9730:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=r(n(710)),i=n(9590);t.default=(e=a.default,t)=>{switch(t.type){case i.actionsListCart.SET_LOAD_DATA_STATUS_CART:const n=t.payload;return{...e,dataLoading:n};case i.actionsListCart.SET_SEND_DATA_STATUS_CART:const r=t.payload;return{...e,dataSending:r};case i.actionsListCart.CLEAR_CART:return{...e,items:[]};case i.actionsListCart.SET_CART:return{...e,items:t.payload};case i.actionsListCart.ADD_ITEM:const a=t.payload;let s=!1;const o=e.items.map((e=>{let t=!0;return e.color!==a.color&&(t=!1),e.fiber!==a.fiber&&(t=!1),e.product.id!==a.product.id&&(t=!1),JSON.stringify(e.type.en)!==JSON.stringify(a.type.en)&&(t=!1),t?(s=!0,{...e,amount:e.amount+a.amount}):e}));return!s&&o.push(a),{...e,items:o};case i.actionsListCart.CHANGE_ITEM:const l=t.payload,u=e.items.map((e=>l.id===e.id?l:e));return{...e,items:u};case i.actionsListCart.REMOVE_ITEM:const c=t.payload;return{...e,items:e.items.filter((e=>c!==e))};default:return e}}},1353:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=r(n(7931)),i=n(9590);t.default=(e=a.default,t)=>{switch(t.type){case i.actionsListCatalog.SET_LOAD_DATA_STATUS_CATEGORIES_LIST:const n=t.payload;return{...e,categoriesListLoading:n};case i.actionsListCatalog.SET_DATA_CATEGORIES_LIST:const r=t.payload;return{...e,categoriesList:r};case i.actionsListCatalog.SET_SELECTED_CATEGORY:const a=t.payload;return{...e,selectedCategory:a};case i.actionsListCatalog.SET_SELECTED_PRODUCT:const s=t.payload;return{...e,selectedProduct:s};case i.actionsListCatalog.SET_LOAD_DATA_STATUS_CATEGORY:const o=t.payload;return{...e,categories:{...e.categories,[o.id]:{...e.categories[o.id],dataLoading:o.dataLoading}}};case i.actionsListCatalog.SET_DATA_CATEGORY:const l=t.payload;return{...e,categories:{...e.categories,[l.id]:{...e.categories[l.id],id:l.id,name:l.name,products:l.products,page:l.page}}};case i.actionsListCatalog.SET_PAGE:const u=t.payload;return{...e,categories:{...e.categories,[e.selectedCategory]:{...e.categories[e.selectedCategory],page:u}}};default:return e}}},5286:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=r(n(9861)),i=n(9590);t.default=(e=a.default,t)=>{switch(t.type){case i.actionsListColors.SET_LOAD_DATA_STATUS_COLORS:return{...e,dataLoading:t.payload};case i.actionsListColors.SET_DATA_COLORS:return{...e,colors:t.payload};default:return e}}},4068:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=r(n(1627)),i=n(9590);t.default=(e=a.default,t)=>{switch(t.type){case i.actionsListFibers.SET_LOAD_DATA_STATUS_FIBERS:return{...e,dataLoading:t.payload};case i.actionsListFibers.SET_DATA_FIBERS:return{...e,fibersList:[...t.payload]};case i.actionsListFibers.SET_SELECTED_FIBER:return{...e,selected:t.payload};case i.actionsListFibers.SET_SHOW_LIST_FIBERS:return{...e,showList:t.payload};default:return e}}},2253:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=r(n(987)),i=n(9590);t.default=(e=a.default,t)=>{switch(t.type){case i.actionsListNews.SET_LOAD_DATA_STATUS_NEWS:return{...e,dataLoading:t.payload};case i.actionsListNews.SET_DATA_NEWS:return{...e,newsList:[...t.payload]};default:return e}}},6203:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=r(n(4157)),i=n(9590);t.default=(e=a.default,t)=>{switch(t.type){case i.actionsListOrder.SET_SEND_DATA_STATUS_ORDER:return{...e,dataSending:t.payload};case i.actionsListOrder.SET_ORDER_NAME:return{...e,name:t.payload};case i.actionsListOrder.SET_ORDER_PHONE:return{...e,phone:t.payload};case i.actionsListOrder.SET_ORDER_EMAIL:return{...e,email:t.payload};case i.actionsListOrder.SET_ORDER_MESSAGE:return{...e,message:t.payload};case i.actionsListOrder.CLEAR_ORDER_FORM:return{...e,message:""};case i.actionsListOrder.CLEAR_ORDER_FILES:return{...e,files:[]};case i.actionsListOrder.ADD_ORDER_FILES:return{...e,files:e.files.concat(t.payload)};default:return e}}},4902:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=r(n(8831)),i=n(9590);t.default=(e=a.default,t)=>{switch(t.type){case i.actionsListProduct.SET_LOAD_DATA_STATUS_PRODUCT:return{...e,dataLoading:t.payload};case i.actionsListProduct.SET_DATA_PRODUCT:return{...e,...t.payload};default:return e}}},9744:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(4791),i=r(n(3894)),s=r(n(9353)),o=r(n(2253)),l=r(n(4068)),u=r(n(6203)),c=r(n(1353)),d=r(n(4902)),f=r(n(5286)),p=r(n(9730)),h=(0,a.combineReducers)({base:s.default,news:o.default,fibers:l.default,order:u.default,catalog:c.default,product:d.default,colors:f.default,cart:p.default}),m=(0,a.createStore)(h,(0,a.applyMiddleware)(i.default));t.default=m},5365:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.unregister=t.register=void 0,t.register=function(e){if("serviceWorker"in navigator){if(new URL("MISSING_ENV_VAR".PUBLIC_URL,window.location.href).origin!==window.location.origin)return;window.addEventListener("load",(()=>{!async function(e,t){try{const e=await navigator.serviceWorker.register("sw.js",{scope:t.scope});e.update(),console.log("ServiceWorker registered successfully",e),navigator.serviceWorker.oncontrollerchange=e=>{console.log("New ServiceWorker activated"),window.location.reload()}}catch(e){console.log("ServiceWorker register fail:",e)}}(0,e)}))}},t.unregister=function(){"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((e=>{e.unregister()})).catch((e=>{console.error("Unable to unregister service-worker: ",e.message)}))}},6104:e=>{var t="undefined"!=typeof process&&process.pid?process.pid.toString(36):"";function n(){var e=Date.now(),t=n.last||e;return n.last=e>t?e:t+1}e.exports=e.exports.default=function(e,r){return(e||"")+""+t+n().toString(36)+(r||"")},e.exports.process=function(e,r){return(e||"")+t+n().toString(36)+(r||"")},e.exports.time=function(e,t){return(e||"")+n().toString(36)+(t||"")}},3250:(e,t,n)=>{"use strict";var r=n(7294),a="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},i=r.useState,s=r.useEffect,o=r.useLayoutEffect,l=r.useDebugValue;function u(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!a(e,n)}catch(e){return!0}}var c="undefined"==typeof window||void 0===window.document||void 0===window.document.createElement?function(e,t){return t()}:function(e,t){var n=t(),r=i({inst:{value:n,getSnapshot:t}}),a=r[0].inst,c=r[1];return o((function(){a.value=n,a.getSnapshot=t,u(a)&&c({inst:a})}),[e,n,t]),s((function(){return u(a)&&c({inst:a}),e((function(){u(a)&&c({inst:a})}))}),[e]),l(n),n};t.useSyncExternalStore=void 0!==r.useSyncExternalStore?r.useSyncExternalStore:c},139:(e,t,n)=>{"use strict";var r=n(7294),a=n(1688),i="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},s=a.useSyncExternalStore,o=r.useRef,l=r.useEffect,u=r.useMemo,c=r.useDebugValue;t.useSyncExternalStoreWithSelector=function(e,t,n,r,a){var d=o(null);if(null===d.current){var f={hasValue:!1,value:null};d.current=f}else f=d.current;d=u((function(){function e(e){if(!l){if(l=!0,s=e,e=r(e),void 0!==a&&f.hasValue){var t=f.value;if(a(t,e))return o=t}return o=e}if(t=o,i(s,e))return t;var n=r(e);return void 0!==a&&a(t,n)?t:(s=e,o=n)}var s,o,l=!1,u=void 0===n?null:n;return[function(){return e(t())},null===u?void 0:function(){return e(u())}]}),[t,n,r,a]);var p=s(e,d[0],d[1]);return l((function(){f.hasValue=!0,f.value=p}),[p]),c(p),p}},1688:(e,t,n)=>{"use strict";e.exports=n(3250)},2798:(e,t,n)=>{"use strict";e.exports=n(139)},8944:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/carousel_1..png"},3007:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/carousel_2..jpeg"},5637:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/carousel_3..jpeg"},3952:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/carousel_4..jpeg"},8167:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/carousel_5..png"},2677:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/carousel_6..png"},1337:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/canister_1..webp"},6748:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/canister_2..webp"},8425:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/canister_3..webp"},9832:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/canister_4..webp"},8612:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/canister_5..webp"},5747:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/catalog_hero..webp"},6009:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/amber..webp"},649:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/blue..webp"},7440:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/blue_dark..webp"},7633:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/cooper..webp"},4263:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/corn..webp"},4722:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/emerald..webp"},8279:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/lilac_pearl..webp"},8755:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/orange..webp"},7153:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/pink..webp"},1488:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/raspberry..webp"},7843:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/torque..webp"},9787:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/petg_1..webp"},3369:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/petg_2..webp"},1751:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/petg_3..webp"},3031:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/petg_4..webp"},8781:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/petg_5..webp"},6315:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/petg_6..webp"},1131:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/petg_7..webp"},4842:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/petg_8..webp"},9307:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/pla_1..webp"},7572:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/pla_2..webp"},4905:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/pla_3..webp"},729:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/pla_4..webp"},2970:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/pla_5..webp"},6147:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/pla_6..webp"},1374:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/icon_file_question..svg"},200:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/logo..png"},4469:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/logo_instagram..svg"},3855:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/logo_telegram..svg"},5203:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/logo_whatsapp..svg"},2386:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/logo_youtube..svg"},6906:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/nav_logo..png"},1556:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/news_1..png"},732:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/news_2..jpeg"},7827:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/news_3..jpeg"},7721:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/news_4..jpeg"},6846:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/theme_day__cloud..svg"},3913:(e,t,n)=>{"use strict";e.exports=n.p+"assets/images/theme_nigth__star..svg"}},r={};function a(e){var t=r[e];if(void 0!==t)return t.exports;var i=r[e]={exports:{}};return n[e].call(i.exports,i,i.exports,a),i.exports}a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var i=Object.create(null);a.r(i);var s={};e=e||[null,t({}),t([]),t(t)];for(var o=2&r&&n;"object"==typeof o&&!~e.indexOf(o);o=t(o))Object.getOwnPropertyNames(o).forEach((e=>s[e]=()=>n[e]));return s.default=()=>n,a.d(i,s),i},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;a.g.importScripts&&(e=a.g.location+"");var t=a.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&!e;)e=n[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),a.p=e})(),a(2629)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,